<?php

/**
 * @file 
 * quiz_extra.module
 */

include_once 'quiz_extra.features.inc';

/**
 * Implements hook_init() to redirect user to first question of quiz.
 */
function quiz_extra_init() {
  $node = menu_get_object('node', 1);
  $arg2 = arg(2);

  if($node && $node->type == 'quiz' && !(arg(2))) {
    drupal_goto('node/' . $node->nid. '/take', array(), '302');   
  }
}

/**
 * Implements hook_menu_alter().
 * @param type $items
 */
function quiz_extra_menu_alter(&$items) {
  $items['node/%node/take']['page callback'] = 'quiz_take_extra';  
}

/**
 * Primary quiz-taking view on 'Take' tab.
 * Code borrowed from quiz.module.
 */
function quiz_take_extra($node) {

  drupal_add_js(drupal_get_path('module', 'quiz_extra') . '/quiz_extra.js');

  //drupal_alter('quiz_take', $node);
  if (isset($node->rendered_content)) {
    return $node->rendered_content;
  }
  $to_be_rendered = quiz_take_quiz($node);
  if(!empty($_SESSION['quiz_' . $node->nid])) { // if we are on result page do not render quiz stats.
    // add customized stats.
    $to_be_rendered['stats'] = array(
      '#markup' => theme('quiz_stats', array('node' => $node)),
      '#weight' => 1,
    );
  }

  // alter the weight for progress provided by quiz.module.
  $to_be_rendered['progress']['#weight'] = 2;

  return drupal_render($to_be_rendered);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quiz_extra_form_quiz_question_answering_form_alter(&$form, &$form_state) {
  unset($form['tries[answer]']['#title']);
}

/**
 * Implements hook_theme().
 */
function quiz_extra_theme($existing, $type, $theme, $path) {
  return array(
    'quiz_stats' => array(
      'variables' => array('node' => NULL),
      'template' => 'quiz-stats',
    ),
  );
}

/**
 * Theme the stats on the quiz page
 *
 * @param $node
 *   The quiz node
 */
function template_preprocess_quiz_stats(&$vars) {
  $node = $vars['node'];
  if ($node->show_attempt_stats) {
    $takes = $node->takes == 0 ? t('Unlimited') : $node->takes;
    $stats[] = array(
      'title' => t('Attempts'),
      'data' => $takes,
    );
  }
  if (!empty($node->pass_rate)) {
    $stats[] = array(
      'title' => t('Pass rate'),
      'data' => $node->pass_rate . ' %',
    );
  }

  $vars['stats'] = $stats;
}

/**  
 * Implements hook_theme_registry_alter  
 */ 
function quiz_extra_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['quiz_take_summary'])) { 

    // Assign custom preprocess function.
    $theme_registry['quiz_take_summary']['preprocess functions'] = array('quiz_take_summary_preprocess');

    // unset default theme function, to load custom template file.
    unset($theme_registry['quiz_take_summary']['function']);
    $theme_registry['quiz_take_summary']['template'] = drupal_get_path('module', 'quiz_extra').'/quiz-take-summary';

    // Assign custom function to quiz_navigation_form theme.
    $theme_registry['quiz_question_navigation_form']['function'] = 'quiz_extra_quiz_question_navigation_form';

  }
}

function quiz_take_summary_preprocess(&$vars) {
  $quiz = $vars['quiz'];
  $questions = $vars['questions'];
  $score = $vars['score'];
  drupal_set_title($quiz->title);

  // Link to next lesson in course.
  $next = next_lesson($quiz->book);
  // link-button class should be used for links rendered as button.
  $vars['next_lesson'] = l(t('Next lesson'), $next['link_path'], array('attributes' => array('class' => array('link-button'))));

  // Get the feedback for all questions. These are included here to provide maximum flexibility for themers
  if ($quiz->display_feedback) {
    $form = drupal_get_form('quiz_report_form', $questions);
    $vars['quiz_report_form'] = drupal_render($form);
  }
  else {
    $vars['quiz_report_form'] = '';
  }

  // Wrong score : calculated as Max Score - score
  $vars['wrong_score'] = $score['possible_score'] - $score['numeric_score'];
}


/**
 * Override theme of the question navigation form(Back, Next, Skip buttons...)
 *
 * @param $form
 *  Form holding the navigation buttons
 */
function quiz_extra_quiz_question_navigation_form($variables) {
  $form = $variables['form'];
  if (!isset($form['#last'])) {
    return drupal_render_children($form);
  }
  else {
    $submit = drupal_render($form['submit']) . drupal_render($form['op']);
    $to_return = '<div>' . drupal_render_children($form) . '</div>';
  //  $to_return .= '<div><em>' . t('This is the last question. Press Finish to deliver your answers') . '</em></div>';
    $to_return .= '<div>' . $submit . '</div>';
    return $to_return;
  }
}
