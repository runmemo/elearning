<?php

/**
 * @file
 * Provides custom form for updating user's picture.
 */
include_once 'user_extra.features.inc';

/**
 * Implements hook_date_format_types().
 */
function user_extra_date_format_types() {
  return array(
    'medium_dot' => t('Medium with dots'),
  );
}

/**
 * Implements hook_date_formats().
 */
function user_extra_date_formats() {
  return array(
    array(
      'type' => 'medium_dot',
      'format' => 'd.m.Y - H:i',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 * @param type $items
 */
function user_extra_menu_alter(&$items) {
  $items['user/login']['type'] = MENU_NORMAL_ITEM;
  $items['user/login']['page callback'] = 'drupal_get_form';
  $items['user/login']['page arguments'][] = 'user_login';
  $items['user/login']['file'] = 'user.pages.inc';
  $items['user/login']['modal'] = TRUE;
  $items['user/register']['modal'] = TRUE;
  $items['user/password']['modal'] = TRUE;
  $items['user']['title callback'] = 'user_extra_user_menu_title';
  $items['user/%user/edit']['modal'] = TRUE;
}

/**
 *
 * Implements hook_block_info()
 */
function user_extra_block_info() {
  // Block for displaying userpoints form on "History" tab of user profile page.
  $blocks['user_extra_userpoints_block'] = array(
    'info' => t('User Profile History Tab'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function user_extra_block_view($delta = '') {
  if ($delta == 'user_extra_userpoints_block') {
    return user_extra_get_userpoints_form();
  }
}

/**
 * Gets usrepoints form and places it in a block's content
 * @return array block array with userpoints form in its content
 */
function user_extra_get_userpoints_form() {
  $block = array();
  if (module_exists('userpoints')) {
    include drupal_get_path('module', 'userpoints') . '/userpoints.pages.inc';
    $block['content'][] = drupal_get_form('userpoints_list_transactions');
  }
  return $block;
}

/**
 * Implements hook_form_alter().
 */
function user_extra_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    global $user;
    $form['#attributes']['class'][] = 'login-form';
    $form['#attributes']['class'][] = 'login-system-form';
    // If our form is not in modal mode, add class.
    if (!isset($_POST['js'])) {
      drupal_set_title(t('Login'));
      $form['#attributes']['class'][] = 'login-page-form';
    }
    $form['name']['#prefix'] = '<div class="login-form-registration">' . l(t('Create new account'), 'user/register', array('attributes' => array('class' => array('login-form-additional-link')))) . '</div>';
    $form['name']['#attributes']['class'][] = 'login-form-name-edit';
    $form['name']['#description'] = $form['pass']['#description'] = t('');
    $form['pass']['#prefix'] = '<div class="login-form-reset">' . l(t('Forgotten your password?'), 'user/password', array('attributes' => array('class' => array('login-form-additional-link')))) . '</div>';
    $form['pass']['#attributes']['class'][] = 'login-form-pass-edit';
    $form['actions']['submit']['#attributes']['class'][] = 'login-form-submit';
    $form['actions']['submit']['#id'] = 'main-login-submit';
    $form['actions']['fb_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Login via Facebook'),
      '#attributes' => array(
        'class' => array(
          'login-form-fb-submit',
        ),
      ),
    );
  }
  elseif ($form_id == 'user_register_form') {
    $form['account']['mail']['#description'] = t('Email should be unique on @sitename and will be used as your username.', array('@sitename' => variable_get('site_name', 'CourseHub')));
    $form['account']['mail']['#suffix'] = '<a class="register-form-popup-link popup-mail"></a><div class="popup-arrow-left popup-mail-arrow"></div>';
    $form['account']['pass']['#suffix'] = '<a class="register-form-popup-link popup-pass"></a><div class="popup-arrow-left popup-pass-arrow"></div>';
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'user_extra_reg_submit_callback',
      'wrapper' => 'user-register-form',
      'progress' => array('type' => 'throbber'),
    );
    $form['#attributes']['class'][] = 'register-form';
    $form['#attributes']['class'][] = 'login-system-form';
    $form['field_first_name']['#weight'] = -12;
    $form['field_surname']['#weight'] = -11;
    $form['field_first_name']['#prefix'] = '<div class="user-form-name-wrapper">';
    $form['field_surname']['#suffix'] = '</div>';
    // @todo Ilya provide real path to the license agreement page.
    $form['message'] = array(
      '#markup' => t('Registering, you are accepting the !license_agreement', array('!license_agreement' => l(t('license agreement'), '', array('attributes' => array('target' => '_blank'))))),
      '#weight' => 20,
      '#prefix' => '<div class="register-form-license-text">',
      '#suffix' => '</div>',
    );
    drupal_set_title(t('Create new account'));
  }
  elseif ($form_id == 'user_pass') {
    $form['#attributes']['class'][] = 'password-form';
    $form['#attributes']['class'][] = 'login-system-form';
    drupal_set_title(t('Request new passowrd'));
  }
  elseif ($form_id == 'user_profile_form') {
    global $user;
    $form['field_first_name']['#weight'] = -12;
    $form['field_surname']['#weight'] = -11;
    $form['field_first_name']['#prefix'] = '<div class="user-form-name-wrapper">';
    $form['field_surname']['#suffix'] = '</div>';
    $form['#attributes']['class'][] = 'profile-edit-form';
    // searches the #validate array for the current_pass validation function, and removes it
    $key = array_search('user_validate_current_pass', $form['#validate']);
    if ($key !== FALSE) {
      unset($form['#validate'][$key]);
    }
    if (!user_access('administer users', $user)) {
      $form['picture']['#access'] = FALSE;
      $form['timezone']['#access'] = FALSE;
      $form['timezone']['#access'] = FALSE;
      $form['locale']['#access'] = FALSE;
    }
   
    // check if we are not on password recovery page.
    if(user_extra_hide_profile_password()) {
      $form['account']['current_pass']['#access'] = FALSE;
      $form['account']['pass']['#access'] = FALSE;
    }
    else {
      $form['#attributes']['class'][] = 'profile-reset-form';
    }
    drupal_set_title(t('Editing profile'));
    drupal_add_js(array('user_forms' => array('class' => 'ctools-modal-profile-form')), 'setting');
  }
}

/**
 * Defines whether password fields should be hidden on user profile edit form.
 * 
 * @return boolean
 *   Returns TRUE if password fields must be hidden.
 */
function user_extra_hide_profile_password() {
   global $user;
   // If user can administer other users we want to show all fields.
   if (user_access('administer users', $user)) {
     return FALSE;
   }
   // User is recovering password, we want to show the password.
   if (!empty($_SESSION['pass_reset_' . $user->uid])) {
     return FALSE;
   }
   // By default we hide the password. 
   return TRUE;
}

/**
 * Implements hook_preprocess_link().
 */
function user_extra_preprocess_link(&$variables) {
  $paths = array('user/login/nojs', 'user/register/nojs', 'user/password/nojs');
  if (in_array($variables['path'], $paths)) {
    $variables['options']['attributes']['class'][] = 'ctools-modal-common-modal-style';
    drupal_add_js(array('user_forms' => array('class' => 'ctools-modal-login-form')), 'setting');
    drupal_add_js(drupal_get_path('module', 'user_extra') . '/user_extra.js');
  }
}

/**
 * Process variables for user-profile.tpl.php.
 * @param array $variables
 * @see user-profile.tpl.php
 */
function user_extra_preprocess_user_profile(&$variables) {
  drupal_add_js(drupal_get_path('module', 'user_extra') . '/user_extra.js');
  $account = $variables['elements']['#account'];
  // todo @Ilya: get rid of this after fixing issue with title from userpoints form.
  drupal_set_title(format_username($account));
  $variables['account'] = $account;
}

/**
 * Implements hook_preprocess_user_picture.
 */
function user_extra_preprocess_user_picture(&$variables) {
  
  // Add upload form to the user picture, if user has access.
  if (isset($variables['size']) && $variables['size'] !== 'default') {
    return;
  }
  if (isset($variables['access']) && !$variables['access']) {
    return;
  }
  // Load js and form only on user page
  if (user_edit_access($variables['account']) && arg(0) == 'user') {
    drupal_add_js(drupal_get_path('module', 'user_extra') . '/user_extra_avatar.js');
    $variables['upload_form'] = drupal_get_form('profile_pic_update_form');
  }
}

/**
 * Implements theme_process_user_picture().
 */
function user_extra_process_user_picture(&$variables) {
  if (isset($variables['show_points']) && $variables['show_points']) {
    $userpoints = userpoints_get_current_points($variables['account']->uid, 'all');
    $variables['userpoints'] = $userpoints;
  }
}

/**
 * Custom menu title callback in order to show proper title for anonymous users.
 * @global object $user
 * @return string
 */
function user_extra_user_menu_title() {
  global $user;
  return $user->uid > 0 ? format_username($user) : t('Login');
}

/**
 * Form for uploading or removing user's picture.
 * @param type $form
 * @param type $form_state
 * @return array array with form elements
 */
function profile_pic_update_form($form, &$form_state) {
  // store user's picture in $form_state along with user ID.
  if (!isset($form_state['storage']['picture'])) {
    global $user;
    $user = user_load($user->uid);
    $form_state['storage']['picture'] = isset($user->picture->uri) ? theme('image_style', array('style_name' => 'user_profile_picture', 'path' => $user->picture->uri)) : '';
    $form_state['storage']['user'] = $user->uid;
  }
  $form = array();
  $form['#prefix'] = '<div id="user-picture-upload-wrapper">';
  $form['#suffix'] = '</div>';
  $form['header'] = array(
    '#markup' => '<span class="modal-title">' . t('Photo editing') . '</span>',
    '#prefix' => '<div class="modal-header popups-title">'
  );
  $form['close'] = array(
    '#markup' => '<span class="popups-close" title="' . t('Close') . '"><a class="close" href="#">x</a></span>',
    '#suffix' => '</div>'
  );
  $form['picture'] = array(
    '#markup' => '<div id="upload-form-picture"><div class="default-avatar">' . $form_state['storage']['picture'] . '</div></div>',
    '#prefix' => '<div class="upload-form-main-wrapper">',
  );

  $form['file'] = array(
    '#type' => 'file',
    '#size' => 23,
    '#prefix' => '<div class="upload-form-links-wrapper"><div class="upload-form-upload-wrapper"><a class="upload-link">' . t('Upload photo') . '</a>',
    '#suffix' => '</div>'
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'user_pic_update_delete_callback',
      'wrapper' => 'user-picture-upload-wrapper',
      'progress' => array('type' => 'throbber'),
    ),
    '#value' => t('Remove photo'),
    '#prefix' => '<div class="upload-form-remove-wrapper"><a class="remove-link">' . t('Remove photo') . '</a>',
    '#suffix' => '</div>',
  );
  $form['message_placeholder'] = array(
    '#markup' => '',
    '#prefix' => '<div id="message-placeholder">',
    '#suffix' => '</div></div></div>'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'user_pic_update_submit_callback',
      'wrapper' => 'user-picture-upload-wrapper',
      'progress' => array('type' => 'throbber'),
    ),
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('upload-form-main-submit')),
  );

  $form['done_link'] = array(
    '#markup' => '<div class="upload-form-submit-link">' . t('Finish') . '</div>',
  );

  return $form;
}

/**
 * Implements hook FORM_ID_validate for profile_pic_update_form().
 */
function profile_pic_update_form_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#id'] == 'edit-submit') {
    // Try to save uploaded file.
    $file = file_save_upload('file', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('png gif jpg jpeg'),
    ));
    if ($file) {
      if ($file = file_move($file, 'public://')) {
        // if succes store file object in $form_state['values']
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to save the uploaded file.'));
        watchdog('user_extra', 'Failed to save file, submitted by user %uid', array('%uid' => $form_state['storage']['user']), WATCHDOG_WARNING);
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
      watchdog('user_extra', 'No file was found during form validation for user picture form, user %uid', array('%uid' => $form_state['storage']['user']), WATCHDOG_WARNING);
    }
  }
  elseif ($form_state['triggering_element']['#id'] == 'edit-delete') {
    $user = user_load($form_state['storage']['user']);
    // Check if there is a photo to delete.
    if (!isset($user->picture->fid) || (!is_object($user->picture) && $user->picture = 0)) {
      form_set_error('file', t('No file to remove.'));
    }
  }
}

/**
 * Implements hook FORM_ID_submit for profile_pic_update_form().
 */
function profile_pic_update_form_submit($form, &$form_state) {
  $user = user_load($form_state['storage']['user']);
  if ($form_state['triggering_element']['#id'] == 'edit-submit') {
    // If new photo is submitted save user's account with new photo
    // and update photo's representation in $form_state.
    $file = $form_state['values']['file'];
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    $edit = array(
      'picture' => $file,
    );
  }
  elseif ($form_state['triggering_element']['#id'] == 'edit-delete') {
    $edit = array(
      'picture_delete' => TRUE,
    );
  }
  $saved_user = user_save($user, $edit);
  unset($form_state['values']['file']);
  $form_state['rebuild'] = TRUE;
  if (!empty($saved_user->picture)) {
    if (is_numeric($saved_user->picture)) {
      $saved_user->picture = file_load($saved_user->picture);
    }
  }
  $form_state['storage']['picture'] = isset($saved_user->picture->uri) ? theme('image_style', array('style_name' => 'user_profile_picture', 'path' => $saved_user->picture->uri)) : '';
}

/**
 * Callback function : Ajax callback function for submission new photo.
 * @param type $form
 * @param type $form_state
 * @return type
 */
function user_pic_update_submit_callback($form, &$form_state) {
  drupal_validate_form('profile_pic_update_form', $form, $form_state);
  if (form_get_errors()) {
    $form_state['rebuild'] = TRUE;
    // collect error messages in order to output them inside the form
    $form['message_placeholder']['#markup'] = common_tools_collect_messages('error');
    return $form;
  }
  unset($form['file']['#value']);
  $commands[] = ajax_command_replace('#user-picture-upload-wrapper', render($form));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Callback function : Ajax callback function for deletion old photo.
 * @param type $form
 * @param string $form_state
 * @return type
 */
function user_pic_update_delete_callback($form, &$form_state) {
  drupal_validate_form('profile_pic_update_form', $form, $form_state);
  if (form_get_errors()) {
    $form_state['rebuild'] = TRUE;
    $form['message_placeholder']['#markup'] = common_tools_collect_messages('error');
    return $form;
  }
  unset($form['file']['#value']);
  $commands[] = ajax_command_replace('#user-picture-upload-wrapper', render($form));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback for user_register_form(). Return forms with errors
 * or empty form with success message.
 * @param array $form
 * @param array $form_state
 * @return array form array
 */
function user_extra_reg_submit_callback($form, &$form_state) {
  drupal_validate_form('user_register_form', $form, $form_state);
  if (form_get_errors()) {
    $form_state['rebuild'] = TRUE;
  }
  else {
    $form['actions']['submit']['#access'] = FALSE;
    $form['field_first_name']['#access'] = FALSE;
    $form['field_surname']['#access'] = FALSE;
    $form['account']['mail']['#access'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;
    $form['message']['#access'] = FALSE;
  }
  return $form;
}

/**
 * Implements hook_username_alter().
 */
function user_extra_username_alter(&$name, $account) {
  if ($account->uid > 0) {
    $user = user_load($account->uid);
    $field_name_view = field_view_field('user', $user, 'field_first_name');
    $field_name = isset($field_name_view[0]['#markup']) ? $field_name_view[0]['#markup'] : '';
    $field_surname_view = field_view_field('user', $user, 'field_surname');
    $field_surname = isset($field_surname_view[0]['#markup']) ? $field_surname_view[0]['#markup'] : '';
    $name = (!empty($field_name) && !empty($field_surname)) ? $field_name . ' ' . $field_surname : $name;
  }
}
