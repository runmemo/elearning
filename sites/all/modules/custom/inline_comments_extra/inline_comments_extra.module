<?php

/**
 * Implements hook_views_api().
 */
function inline_comments_extra_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'inline_comments_extra') . '/views',);
}

/**
 * Implementation of hook_node_view().
 */
function inline_comments_extra_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'open_question' || $node->type == 'question') {
    drupal_add_js(drupal_get_path('module', 'inline_comments_extra') . '/inline_comments_extra.js');
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function inline_comments_extra_theme_registry_alter(&$theme_registry) {
  $theme_registry['comment']['template'] = 'comment';
  $theme_registry['comment']['path'] = drupal_get_path('module', 'inline_comments_extra');
  $theme_registry['comment']['type'] = 'theme';
  $theme_registry['comment']['theme path'] = drupal_get_path('module', 'inline_comments_extra');
  $theme_registry['comment']['theme paths'] = array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds custom markup to comments form for inline comments
 */
function inline_comments_extra_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['build_info']['args'][0];
  $form['actions']['cancel_link'] = array(
    '#prefix' => '<div class="views-inline-comment-cancel">',
    '#sufix' => '</div>',
    '#type' => 'markup',
    '#markup' => '<a id="comment-form-hide-' . $node->nid . '" class="comment-cancel">' . t('Cancel') . '</a>',
    '#weight' => 18,
    // class="views-inline-comment-link-alias"
  );
}

/**
 * Implements hook_query_TAG_alter().
 * @param QueryAlterableInterface $query
 */
function inline_comments_extra_query_comment_filter_alter(QueryAlterableInterface $query) {
  if (($node = $query->getMetaData('node')) && (get_class($query) == 'PagerDefault')) {
    $orderby = &$query->getOrderBy();
    $expressions = &$query->getExpressions();
    if (isset($orderby['torder'])) {
      unset($expressions['torder']);
      unset($orderby['torder']);
      $orderby['c.thread'] = 'DESC';
    } else {
      unset($orderby['c.thread']);
      $orderby['c.cid'] = 'ASC';
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function inline_comments_extra_menu_alter(&$items) {
  $items['ajax/inline_comments/add_comments']['file'] = 'inline_comments_extra.module';
  $items['ajax/inline_comments/add_comments']['page callback'] = 'inline_comments_extra_add_comments';
  $items['ajax/inline_comments/add_comments']['module'] = 'inline_comments_extra';
}

/**
 * Menu callback for saving new comment.
 * 
 * Code has been copied and overriden from inline_comments module. We need this,
 * because there is no validation for comment body and by default it's possible
 * to save empty comments.
 */
function inline_comments_extra_add_comments() {
  $text = isset($_POST['comment_text']) ? check_markup($_POST['comment_text']) : '';
  $uid = isset($_POST['uid']) ? check_plain($_POST['uid']) : '';
  $nid = isset($_POST['nid']) ? check_plain($_POST['nid']) : '';
  $node = $nid != '' ? node_load($nid) : '';
  // Save comment only if there some text, provided by the user.
  if ($text != '') {
    $comment = (object) array(
        'nid' => $nid,
        'uid' => $uid,
        'cid' => 0,
        'pid' => 0,
        'mail' => '',
        'subject' => '',
        'is_anonymous' => FALSE,
        'status' => COMMENT_PUBLISHED,
        'language' => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => $text,
              'format' => 'filtered_html'
            )
          )
        ),
    );
    comment_save($comment);
  }
  $cids = comment_get_thread($node, variable_get('comment_default_mode_' . $node->type, 1), variable_get('comment_default_per_page_' . $node->type, 10));
  $comments = comment_load_multiple($cids);
  comment_prepare_thread($comments);
  drupal_add_css(drupal_get_path('module', 'comment') . '/comment.css');
  $build = comment_view_multiple($comments, $node);
  $build['pager']['#theme'] = 'pager';
  $output = drupal_render($build);
  if ($text == '') {
    $output .= '<div id="message-placeholder"><div class="text">' . t('Comment cannot be empty.') . '<span class="close" title="close">X</span></div></div>';
  }
  drupal_json_output(array('data' => $output));
}
