<?php
/**
 * @file
 * Contains test cases for subscriptions reference module
 */

/** 
 * Class contains tests 
 * @todo barinder implement tests
 */
class SubscriptionsReferenceTestCase extends SubscriptionsTestCase {
  protected $parent;
  protected $user_a;
  protected $user_b;
  
  public static function getInfo() {
    return array(
      'name' => 'Subscription Reference Drupal Web Test',
      'description' => 'Drupal Web tests for subscription reference.',
      'group' => 'Subscription Reference',
    );
  }
  
  function setUp() {
    parent::setUp('subscriptions_reference', 'subscriptions_reference_test');

    // create user A (uA)
    $this->user_a = $this->drupalCreateUser(array(
      'subscribe to test parent reference',
    ));
    $this->drupalLogin($this->user_a); // we need to set access attribute
    
    // create user B (uB)
    $this->user_b = $this->drupalCreateUser(array(
      'subscribe to test parent reference',
    ));
    $this->drupalLogin($this->user_b); // we need to set access attribute
    $this->drupalLogout();
    
    // create parent node (nP) as uA
    $this->parent = $this->createParentNode($this->user_a->uid);

  }

  /**
   * creates parent node
   * @param integer $uid id of node author
   */
  function createParentNode($uid) {
    $settings = array(
      'type' => 'test_parent',
      'uid' => $uid,
    );
    $parent = $this->drupalCreateNode($settings);
    node_save($parent);
    return $parent;
  }
  
  /**
   * Tests subscribe functions used by rules
   * @see subscriptions_reference_subscribe()
   * @see subscriptions_reference_unsubscribe()
   * 
   */
  function testSubsciptionFunctions() {
    $params = array( // default pararms for getting our subscriptions
      'module' => SUBSCRIPTIONS_REFERENCE_MODULE, 
      'field' => 'field_test_parent',
      'value' => $this->parent->nid);
    
    // subscribe uA to nP : Authors are not auto subscribed see : rules_subscribe_author_to_question for more
    subscriptions_reference_subscribe($this->parent, $this->user_a);
    $this->assertSubscriptions($params, $this->user_a->uid, 1, 'User A has a subscription');
    
    // subscribe user B to parent node
    subscriptions_reference_subscribe($this->parent, $this->user_b);
    // check subscription of uB to nP
    $this->assertSubscriptions($params, $this->user_b->uid, 1, 'User B has a subscription');
    $this->assertSubscriptions($params, $this->user_a->uid, 1, 'User A still has a subscription');
    
    // unsubscribe user A
    subscriptions_reference_unsubscribe($this->parent, $this->user_a);
    $this->assertSubscriptions($params, $this->user_b->uid, 1, 'User B still has a subscription');
    $this->assertSubscriptions($params, $this->user_a->uid, 0);
     
  }
  
  /**
   * Tests that correct notifications are being sent to users 
   * subscribed to new content via subscriptions_reference
   * @see subscriptions_reference_test.module in tests
   */
  function testUserGetsNotification() {
   
    // subscribe uA to nP : Authors are not auto subscribed see : rules_subscribe_author_to_question for more
    subscriptions_reference_subscribe($this->parent, $this->user_a); // A is author
    // create child (nC) for nP as uB
    $child_node_b = $this->createChildNode($this->user_b->uid, $this->parent->nid);
    // check if that and only that email is in the queue (uA is not autosubscribed)
    $conditions = array(
      'value' => $this->parent->nid,
      'uid' => $this->user_a->uid,
      'load_args' => $child_node_b->nid
    );
    $this->assertSubscriptionsQueue(array(), 1);
    $this->assertSubscriptionsQueue($conditions, 1, 'Item\'s attributes match subscription');
    // NOTE: we have one email to send to user A
    
    // create child to nP as user A
    $child_node_a = $this->createChildNode($this->user_a->uid, $this->parent->nid);
    // check if email is in the queue
    $conditions = array(
      'value' => $this->parent->nid,
      'uid' => $this->user_a->uid,
      'load_args' => $child_node_a->nid
    );
    $this->assertSubscriptionsQueue($conditions, 1);
    // NOTE: we have second email to send to user A
    
    // unsubscribe uA from nP
    subscriptions_reference_unsubscribe($this->parent, $this->user_a);
    // create child to nP as uB
    $child_node_b2 = $this->createChildNode($this->user_b->uid, $this->parent->nid);
    // check if email is not in the queue
    $conditions = array(
      'value' => $this->parent->nid,
      'uid' => $this->user_b->uid,
      'load_args' => $child_node_b2->nid
    );
    $this->assertSubscriptionsQueue($conditions, 0);
   
    // subscribe user B to node Parent
    subscriptions_reference_subscribe($this->parent, $this->user_b); // B is not an author
    // add child to Parent node as user A
    $child_node = $this->createChildNode($this->user_a->uid, $this->parent->nid);
    
    // check that only user B gets notification
    $conditions = array(
      'value' => $this->parent->nid,
      'uid' => $this->user_b->uid,
      'load_args' => $child_node->nid,
    );
    $this->assertSubscriptionsQueue($conditions, 1);
    // NOTE: we have one email for user B (+ two for user A remaining).
    
    // Run CRON and check that correct emails were sent
    // $this->cronRun(); this call somehow complicates things, 
    // so just calling cron function in question directly
    subscriptions_mail_cron();
    // check that queue is empty after cron execution
    $queue = $this->getSubscriptionQueueItems();
    $this->assertFalse($queue, 'Queue is empty');
    // check that emails were sent
    $mails = $this->drupalGetMails();   
    $this->assertEqual(count($mails), 3, '3 emails were sent as expected');
    // check first email to user A
    $this->assertEqual($mails[0]['key'], 'node-reference-field-test-parent', 'Mail key is correct');
    $this->assertEqual($mails[0]['to'], $this->user_a->mail, 'Mail is sent to correct email address');
    // check second email to user A
    $this->assertEqual($mails[1]['key'], 'node-reference-field-test-parent', 'Mail key is correct');
    $this->assertEqual($mails[1]['to'], $this->user_a->mail, 'Mail is sent to correct email address');
    // check email to user B
    $this->assertEqual($mails[2]['key'], 'node-reference-field-test-parent', 'Mail key is correct');
    $this->assertEqual($mails[2]['to'], $this->user_b->mail, 'Mail is sent to correct email address');
    
  }

  /**
   * creates child node
   */
  function createChildNode($uid, $parent_nid) {
    $settings = array(
      'type' => 'test_child',
      'uid' => $uid,
    );
    $settings['field_test_parent']['und'][0]['target_id'] = $parent_nid;
    $node = $this->drupalCreateNode($settings);
   
    return $node;
  }
  
}

class SubscriptionReferenceUnitTestCase extends DrupalUnitTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'Subscription Reference Unit Test Case',
      'description' => 'Unit tests for subscription reference.',
      'group' => 'Subscription Reference',
    );
  }
  
  function test_hook_subscriptions_reference() {
    //  @todo find a way to mock the function _available_reference_fields() 
    //  override_function(); this is one possible solution
    //  http://php.net/manual/en/function.override-function.php
    //  http://www.php.net/manual/en/function.override-function.php#50821
    //  that requires: pecl apd
    
    //  overriding of the function will allow testing of other functions
    //  without touching db
    
    //  here is an example of mock testing:
    //  http://www.workhabit.com/blog/mock-function-testing-drupal
    //  that requires: pecl runkit
    //  @see PHPMockFunction folder in libraries
    
  }
  /**
   * Tests that rule actions have correct settings in hook_rules_action_info()
   */
  function testSubscribeRules() {
    module_load_include('inc', 'subscriptions_reference', 'subscriptions_reference.rules');
    $actions = subscriptions_reference_rules_action_info();
    foreach ($actions as $action) {
      $this->assertTrue(function_exists($action['base']), 'Function exists for rules action.');
      $this->assertTrue(isset($action['parameter']['node']), 'Node is a parameter of the action.');
      $this->assertTrue(isset($action['parameter']['user']), 'User is a parameter of the action.');
      $this->assertEqual($action['parameter']['node']['type'], 'node', 'Node parameter has correct type.');
      $this->assertEqual($action['parameter']['user']['type'], 'user', 'User parameter has correct type.');
    }
  }
  
}
