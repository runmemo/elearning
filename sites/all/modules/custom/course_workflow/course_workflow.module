<?php

// Course stage constants.
define('COURSE_SUBMITTED', 1);
define('COURSE_PUBLISHED', 2);
define('COURSE_ARCHIVED', 3);

// Course access grant ids.
define('COURSE_ACCESS_ALL', 1);

/**
 *  Implements hook_form_FORM_ID_alter().
 * 
 *  Lock stage field on course add page for teacher.
 */
function course_workflow_form_course_node_form_alter(&$form, &$form_stage) {
  // Disable stage field for users who don't have permissions to change stage.
  if (!user_access('publish any course')) {
    $form['field_stage']['#disabled'] = TRUE;
  }
}


/**
 *  Implements hook_permission().
 */
function course_workflow_permission() {
  return array(
    'access any unpublished course' => array(
      'title' => t('Access any unpublished course'),
      'description' => t('May view courses of other users even though they are not published.'),
    ),
    'access own unpublished course' => array(
      'title' => t('Access own unpublished course'),
      'description' => t('May view own courses even though they are not published.'),
    ),
    'publish any course' => array(
      'title' => t('Publish any course'),
      'description'=> t('Can publish any course that was submited.'),
    ),
  );
}

function course_workflow_change_stage($node, $stage) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $node_wrapper->field_stage->set($stage);
  $node_wrapper->save();
}

/**
 *  Implements hook_node_grants().
 */
function course_workflow_node_grants($account, $op) {  
  $grants = array();

  // Then, if "access any unpublished course" is allowed to the account,
  if (user_access('access any unpublished course', $account)) {
    $grants['course_access_any'] = array(COURSE_ACCESS_ALL);
  }

  if (user_access('access own unpublished course', $account)) {
    $grants['course_access_own'] = array($account->uid);
  }
  return $grants;
}

/**
 *  Implements hook_node_access_records().
 */
function course_workflow_node_access_records($node) {

  // We only take care node is part of book and node really has $node->book['bid'].
  if (empty($node->book['bid'])) {
    return;
  }

  // Reset cache for course book, to load latest values.
  entity_get_controller('node')->resetCache(array($node->book['bid']));
  
  // Get the stage of course
  $course_item = entity_metadata_wrapper('node', $node);
  $course = $course_item->book->value();
  $stage = $course->field_stage[LANGUAGE_NONE][0]['value'];
  
  $grants = array();
  if ($stage == COURSE_PUBLISHED) {
    // If course is published no grant controlls are required.
    return;
  }
  
  // Add grans for users with access all courses perms.
  $grants[] = array(
    'realm' => 'course_access_any',
    'gid' => COURSE_ACCESS_ALL,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  );
 
  // For the course_view_own realm, the grant ID (gid) is
  // equivalent to the node author's user ID (UID).
  $grants[] = array(
    'realm' => 'course_access_own',
    'gid' => $course->uid,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  );
  // Allow course teachers to access course.
  $teachers = field_get_items('node', $course, 'field_teacher');
  if ($teachers) {
    foreach ($teachers as $delta => $teacher) {
      if ($course->uid !== $teacher['uid']) {
        $grants[] = array(
          'realm' => 'course_access_own',
          'gid' => $teacher['uid'],
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 0,
        );
      }
    }
  }
  
  return $grants; 
}

/**
 *  Implements hook_node_update().
 */
function course_workflow_node_update($node) {
  if ($node->type !== 'course') {
    return;
  } 
  $items = course_get_items($node, TRUE);
  foreach ($items as $nid => $type) {
    $node = node_load($nid);
    node_access_acquire_grants($node);
  }
}
