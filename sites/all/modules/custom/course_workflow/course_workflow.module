<?php

// Course stage constants.
define('COURSE_SUBMITTED', 1);
define('COURSE_PUBLISHED', 2);
define('COURSE_ARCHIVED', 3);

// Course access grant ids.
define('COURSE_VIEW_ALL', 1);

/**
 *  Implements hook_form_FORM_ID_alter.
 *  Lock stage field on course add page for teacher.
 */
function course_workflow_form_course_node_form_alter(&$form, &$form_stage) {
  global $user;
  
  // if current user is teacher, lock stage field.
  if (in_array('teacher', array_values($user->roles))) {
    $form['field_stage']['#disabled'] = TRUE;
  }
  
}


/**
 *  Implements of hook_permission()
 */
function course_workflow_permission() {
  return array(
    'view any unpublished course' => array(
      'title' => t('Access any unpublished course'),
      'description' => t('May view courses of other users even though they are not published.'),
    ),
    'view own unpublished course' => array(
      'title' => t('Access own unpublished course'),
      'description' => t('May view own courses even though they are not published.'),
    ),
  );
}


/**
 *  Implements of hook_node_grants()
 */
function course_workflow_node_grants($account, $op) {  
  $grants = array();

  // Then, if "view any unpublished course" is allowed to the account,
  if (user_access('view any unpublished course', $account)) {
    $grants['course_view_any'] = array(COURSE_VIEW_ALL);
  }

  if (user_access('view own unpublished course', $account)) {
    $grants['course_view_own'] = array($account->uid);
  }

  return $grants;
}

/**
 *  Implements of hook_node_access_records()
 */
function course_workflow_node_access_records($node) {
  // We only care about the node if it's a part of a book. 
  if (!isset($node->book) || !isset($node->book['bid'])) {
    if ($node->type === 'course') {
      $stages = field_get_items('node', $node, 'field_stage');
      if (!$stages) {
        return;
      } 
      $stage = $stages[0]['value'];
    }
    else {
      return;
    }
  }
  else {
    // Get the stage of the course in publishing
    $course_item = entity_metadata_wrapper('node', $node);
    $stage = $course_item->book->field_stage->value();
  }
  $grants = array();
  if($stage == COURSE_PUBLISHED) {
    // If course published, allow all.
    $grants[] = array(
      'realm' => 'all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  else {
    $grants[] = array(
      'realm' => 'course_view_any',
      'gid' => COURSE_VIEW_ALL,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // For the course_view_own realm, the grant ID (gid) is
    // equivalent to the node author's user ID (UID).
    $grants[] = array(
      'realm' => 'course_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

  return $grants; 
}
