<?php

/**
 * @file
 * Common tools for Runmemo.com
 * 
 * This module provides common functions that can be reused in other
 * custom modules.
 */

function common_tools_init() {
  //Add common ctools modal style
  common_modal_style();
}

/**
 * 
 * Prints object/array as a table with layered structure.
 * @param object $elem item to print
 * @param integer $max_level number of layers to print
 * @param array $print_nice_stack
 */
function print_nice($elem, $max_level=10, $print_nice_stack = array()) {
  if (is_array($elem) || is_object($elem)) {
    if (in_array($elem, $print_nice_stack, TRUE)) {
      echo "<font color=red>RECURSION</font>";
      return;
    }
    $print_nice_stack[] = $elem;
    if ($max_level<1) {
      echo "<font color=red>riched max level</font>";
      return;
    }
    $max_level--;
    echo "<table border=1 cellspacing=0 cellpadding=3 width=100%>";
    if (is_array($elem)) {
      echo '<tr><td colspan=2 style="background-color:#333333;"><strong><font color=white>ARRAY</font></strong></td></tr>';
    } 
    else {
      echo '<tr><td colspan=2 style="background-color:#333333;"><strong>';
      echo '<font color=white>OBJECT Type: ' . get_class($elem) . '</font></strong></td></tr>';
    }
    $color=0;
    foreach ($elem as $k => $v) {
      if ($max_level%2) {
        $rgb=($color++%2)?"#888888":"#BBBBBB";
      } 
      else {
        $rgb=($color++%2)?"#8888BB":"#BBBBFF";
      }
      echo '<tr><td valign="top" style="width:40px;background-color:' . $rgb . ';">';
      echo '<strong>' . $k . "</strong></td><td>";
      print_nice($v, $max_level, $print_nice_stack);
      echo "</td></tr>";
    }
    echo "</table>";
    return;
  }
  if ($elem === NULL) {
    echo "<font color=green>NULL</font>";
  } 
  elseif ($elem === 0) {
    echo "0";
  } 
  elseif ($elem === TRUE) {
    echo "<font color=green>TRUE</font>";
  } 
  elseif ($elem === FALSE) {
    echo "<font color=green>FALSE</font>";
  } 
  elseif ($elem === "") {
    echo "<font color=green>EMPTY STRING</font>";
  } 
  else {
    echo str_replace("\n", "<strong><font color=red>*</font></strong><br>\n", $elem);
  } 
} 



/**
 * 
 * Creates field and field instance from definition.
 * @param array $field Definition of the field generated by Features module
 */
function create_field($field) {
  if (isset($field['field_config'])) {
    $field_info = field_info_field($field['field_config']['field_name']);
    if (!isset($field_info)) {
      field_create_field($field['field_config']);  
    } 
    else { // field exists, log message
      watchdog('Field creation',
      'No need to create a field as it already exists ' . $field['field_config']['field_name'] . '.',
      array(), WATCHDOG_NOTICE);
    }
  }
  if (isset($field['field_instance'])) {
    $field_info = field_info_instance('node', $field['field_instance']['field_name'], $field['field_instance']['bundle']);
    if (!isset($field_info)) { // field does not exist
     field_create_instance($field['field_instance']);
  }
  else { // field instance exists, no need to create, log message
    watchdog('Field creation',
    'No need to create an instance for a field as it already exists ' . $field['field_instance']['field_name'] . '.',
    array(), WATCHDOG_NOTICE);
  }
 }
}


/**
 * 
 * from http://stackoverflow.com/questions/1639932/get-vocabulary-id-by-name
 * 
 * This function will return a vocabulary object which matches the
 * given machine name. Will return null if no such vocabulary exists.
 *
 * @param String $vocabulary_name
 *   This is the machine name of the section which is required
 * @return Object
 *   This is the vocabulary object with the name
 *   or null if no such vocabulary exists
 */
function get_vocabulary_by_name($vocabulary_name) {
  $vocabs = taxonomy_get_vocabularies(NULL);
  foreach ($vocabs as $vocab_object) {
    if ($vocab_object->machine_name == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}

function get_vocabulary_terms_by_name($vocabulary_name) {
  $vocabulary = get_vocabulary_by_name($vocabulary_name);
  $terms = taxonomy_get_tree($vocabulary->vid);
  $options = array();
  foreach ($terms as $data) {
    $options[$data->tid] = $data->name;
  }
  return $options;
}

/**
 * Gets the title from the provided node in language of the user
 * @param object $node node from wich we want to get the title in the 
 * current language of the user
 * @return string title of the node in current language
 */
function get_node_translated_title($node) {
   global $language;
   if (!isset($node->title_field[$language->language])) {
     $lang = $node->language;
   } 
   else {
     $lang = $language->language;
   }
   $title  = $node->title_field[$lang][0]['value'];
   return $title;
}

/**
 * Ctools Common modal style
 */

function common_modal_style() {
  // Create our own javascript that will be used to theme a modal.
  $throbber = drupal_get_path('theme', 'elearning') . '/images/throbber.gif';
  $common_modal = array(
    'common-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 380,
        'height' => 'auto',
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CommonModal',
      'closeText' => 'x',
      'throbber' => theme('image', array('path' => $throbber, 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  // Add the settings array defined above to Drupal 7's JS settings:
  drupal_add_js($common_modal, 'setting');
  // The function below assumes the course_exit.modal.js file resides in [module_dir]/js
  drupal_add_js(drupal_get_path('module', 'common_tools') . '/common_modal.js');
}
