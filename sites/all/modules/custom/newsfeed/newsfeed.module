<?php

/**
 * @file
 * Code for the Newsfeed feature.
 */
include_once 'newsfeed.features.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function newsfeed_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
  if ($module == 'message_notify' && $api == 'notifier') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_views_api().
 */
function newsfeed_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function newsfeed_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'message_notify' && $plugin_type == 'notifier') {
    return 'plugins/notifier/internal';
  }
}

/**
 * Implements hook_block_info().
 */
function newsfeed_block_info() {
  // Block for displaying notifications count.
  $block['user_notifications_count'] = array(
    'info' => t('User notifications count'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function newsfeed_block_view($delta = '') {
  if ($delta == 'user_notifications_count') {
    global $user;
    if (!$user->uid) {
      return;
    }
    $block = array('subject' => '');
    $block['content'] = array(
      '#type' => 'markup',
      '#markup' => l('<span class="link-inner">17</span>', 'notifications', array('attributes' => array('title' => t('Notifications')), 'html' => TRUE)),
    );
    return $block;
  }
}

/**
 * Creates new message with given parameters.
 * 
 * @param string $type
 *   Type of the message
 * @param integer $uid
 *   User ID, to which to assgin message
 * @param object $node
 *   Node which is used to get the context ans list of subscribers
 * @param array $fields
 *   Values to place in corresponding fields
 * @param array $uids
 *   User IDs array. It's used in case of single recipient of the message
 * 
 */
function newsfeed_create_message($type, $uid, $node, $fields = array(), $uids = array()) {
  // Create message.
  $message = message_create($type, array('uid' => $uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  
  // Set necessary fields to use with tokens.
  foreach ($fields as $name => $value) {
    $wrapper->$name->set($value);
  }
  $message->save();

  // Add parameters in order to avoid creating message for every subscriber.
  $notify_options = array(
    'internal' => array(
      'save on fail' => FALSE,
      'save on success' => FALSE,
      'mid' => $message->mid,
    )
  );
  $subscribe_options = array(
    'save message' => FALSE,
    'author' => $uid,
  );
  if (!empty($uids)) {
    $subscribe_options['uids'] = $uids;
  }

  message_subscribe_send_message('node', $node, $message, $notify_options, $subscribe_options);
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 * 
 * Adds 'internal' notifier if it's not set yet.
 */
function newsfeed_message_subscribe_get_subscribers_alter(&$uids, $values) {
  if (empty($uids) || is_null($notifier = message_notify_get_notifier('internal'))) {
    return;
  }
  foreach ($uids as $uid => $options) {
    // Unset node author from receivers array.
    if (isset($values['subscribe_options']['author']) && $values['subscribe_options']['author'] == $uid) {
      unset($uids[$uid]);
      continue;
    }
    // Add internal notifier if it's not added yet.
    if (!isset($options['notifiers']['internal'])) {
      $uids[$uid]['notifiers']['internal'] = 'internal';
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Handles message-user instance deletion when message is being deleted.
 */
function newsfeed_entity_delete($entity, $entity_type) {
  if ($entity_type == 'message') {
    db_delete('message_user')
      ->condition('mid', $entity->mid)
      ->execute();
  }
}
