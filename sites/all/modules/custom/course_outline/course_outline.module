<?php

/**
 * @file
 * course_outline.module provides a block that shows outline of the course
 */

include_once 'course_outline.inc';

/**
 * Implements hook_block_info()
 */
function course_outline_block_info() {
  $block['course_outline'] = array(
    'info' => t('Course Outline'),
      //  'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $block['course_certificate'] = array(
    'info' => t('Course Certificate'),
  );
  return $block;
}

/**
 * Implements hook_theme()
 */
function course_outline_theme() {
  return array(
    'menu_link__course_outline_unit' => array(
      'render element' => 'element'
    ),
    'course_outline_certifcate' => array(
      'variables' => array('variables' => NULL),
      'template' => 'course-outline-certifcate',
    ),
  );
}

/**
 * Returns HTML for the unit level elements of the course outline
 */
function theme_menu_link__course_outline_unit(array $variables) {
  $element = $variables['element'];
  $classes = implode(' ', $variables['element']['#attributes']['class']);
  $sub_menu = '';
  $output = '<h3 class="' . $classes . ' outline-unit js-outline-unit">' . $element['#title'] . '<span class="icon"></span></h3>';
  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  return $output . $sub_menu . "\n";
}

/**
 * Define the contents and title of the block/
 * Implementation of hook_block_view()
 *
 * Returns a renderable block array containing the current book's outline if
 * the node is part of a book.
 *
 * Returns NULL if the current menu item is not part of a book heirarchy.
 */
function course_outline_block_view($delta = '') {
  $book = course_node_book();
  if (!$book) {
    return NULL;
  }
  $block['subject'] = '';
  $course_node = node_load($book['bid']);
  switch ($delta) {
    case 'course_outline':
      $node = menu_get_object();
      $edit_access = node_access('update', $node) ? TRUE : FALSE;
      $block['content'][] = drupal_get_form('course_outline_block_view_form', $course_node, $book, $edit_access);
      break;

    case 'course_certificate' :
      // Build certificate block.
      $certificate = array();
      global $user;
      if ($course_node) {
        $grades = course_get_course_grades($course_node);
        $certificate['grade_ranges'] = course_get_grade_ranges($grades);
        $certificate['user_credit'] = credit_calculate($course_node, $user);
        $certificate['points'] = format_plural($certificate['user_credit'], '1 point', '@count points');
        $certificate['pass_credit'] = course_get_course_pass_score($course_node);
        if ($certificate['user_credit'] >= $certificate['pass_credit']) {
          $certificate['class'] = 'certificate-enabled';
          $certificate['link'] = l(t('Download certificate'), 'node/' . $course_node->nid . '/certificate');
        }
        else {
          $certificate['class'] = 'certificate-disabled';
          $certificate['link'] = '<span class="certificate-disabled-text">' . t('Certificate unavailable') . '</span>';
        }
      }

      $certificate_output = array(
        '#type' => 'markup',
        '#markup' => theme('course_outline_certifcate', $certificate),
      );
      $block['content'][] = $certificate_output;
      break;
  }

  return $block;
}

/**
 * Returns course outline block with edit button, if current user has access to it.
 * @param object $node first object of the course's hierarchy
 * @param array $book course's book
 * @param boolean $edit_access access rights for editing node
 * @return array form's array
 */
function course_outline_block_view_form($form, &$form_state, $course_node = FALSE, $book = array(), $edit_access = NULL) {
  $form = array();
  $form['#prefix'] = '<div id="course-outline-block-wrapper">';
  $form['#suffix'] = '</div>';
  // Build course outline.
  drupal_add_js(drupal_get_path('module', 'course_outline') . '/course_outline.js');
  drupal_add_library('system', 'ui.accordion');

  $tree = menu_tree_all_data($book['menu_name'], NULL, 3);
  $tree_key = key($tree);

  course_outline_preprocess_tree($tree);

  // If we pass 1 as the second param, we just get the top level node in the
  // book. Since the key will be the top level mlid, we'll have to use 
  // ['p1'] in the $book array (which contains the top mlid) when we use it 
  // for the block title.
  $book_name = book_toc($book['bid'], 1);

  $tree_output = menu_tree_output($tree);
  // Alter titles and classes of the links in the tree.
  course_outline_preprocess_tree($tree_output);
  
  // Build the block title and contents.
  $form['view'] = array(
    '#markup' => drupal_render($tree_output),
  );

  $form_state['storage']['course_node'] = $course_node;
  $form_state['storage']['edit_access'] = $edit_access;
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit'),
    '#access' => $edit_access,
    '#ajax' => array(
      'callback' => 'course_outline_block_view_form_submit_callback',
      'wrapper' => 'course-outline-block-wrapper',
      'progress' => array('type' => 'throbber'),
    ),
  );
  return $form;
}

/**
 * Custom ajax callback for course_outline_block_view_form();
 */
function course_outline_block_view_form_submit_callback($form, &$form_state) {
  $course_node = isset($form_state['storage']['course_node']) ? $form_state['storage']['course_node'] : '';
  $edit_access = isset($form_state['storage']['edit_access']) ? $form_state['storage']['edit_access'] : FALSE;
  $form = $course_node ? drupal_get_form('course_outline_book_admin_edit', $course_node, $edit_access) : array();
  $commands[] = ajax_command_replace('#course-outline-block-wrapper', drupal_render($form));
  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * Custom form for administering a course's hierarchy.
 * Code has been borrowed from 'book' module in order to make this form ajaxable.
 * @param $node
 *   The node of the top-level page in the book.
 * @see book.admin.inc file in 'book' module
 * @ingroup forms
 */
function course_outline_book_admin_edit($form, $form_state, $course_node, $edit_access) {
  include_once drupal_get_path('module', 'book') . '/book.admin.inc';
  $form['#prefix'] = '<div id="course-outline-edit-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#node'] = $course_node;
  $form_state['storage']['edit_access'] = $edit_access;
  _book_admin_table($course_node, $form);
  if (isset($form['table']) && !empty($form['table'])) {
    foreach ($form['table'] as $key => &$row_item) {
      if ($key != '#theme' && $key != '#tree') {
        $row_item['title']['#disabled'] = TRUE;
      }
    }
  }
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#ajax' => array(
      'callback' => 'course_outline_edit_form_submit_callback',
      'wrapper' => 'course-outline-edit-wrapper',
      'progress' => array('type' => 'throbber')
    ),
  );
  return $form;
}

/**
 * Form validation handler for course_outline_book_admin_edit().
 * Checks that the book has not been changed while using the form.
 */
function course_outline_book_admin_edit_validate($form, &$form_state) {
  if ($form_state['values']['tree_hash'] != $form_state['values']['tree_current_hash']) {
    form_set_error('', t('This book has been modified by another user, the changes could not be saved.'));
  }
}

/**
 * Ajax form submission callback for course_outline_book_admin_edit().
 * This function takes care to save parent menu items before their children.
 */
function course_outline_edit_form_submit_callback($form, &$form_state) {
  // Save elements in the same order as defined in post rather than the form.
  // This ensures parents are updated before their children, preventing orphans.
  $order = array_flip(array_keys($form_state['input']['table']));
  $form['table'] = array_merge($order, $form['table']);
  foreach (element_children($form['table']) as $key) {
    if ($form['table'][$key]['#item']) {
      $row = $form['table'][$key];
      $values = $form_state['values']['table'][$key];

      // Update menu item if moved.
      if ($row['plid']['#default_value'] != $values['plid'] || $row['weight']['#default_value'] != $values['weight']) {
        $row['#item']['plid'] = $values['plid'];
        $row['#item']['weight'] = $values['weight'];
        menu_link_save($row['#item']);
      }
    }
  }
  // replace this form with course_outline_block_view_form().
  $edit_access = isset($form_state['storage']['edit_access']) ? $form_state['storage']['edit_access'] : FALSE;
  $form = drupal_get_form('course_outline_block_view_form', $form['#node'], $form['#node']->book, $edit_access);
  $commands[] = ajax_command_replace('#course-outline-edit-wrapper', drupal_render($form));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Adds content type specific html to leafs of course menu
 * @param array $tree represents menu tree
 * @return boolean
 */
function course_outline_preprocess_tree(&$tree) {
  global $user;
  $tree_key = key($tree);
  if (isset($tree[$tree_key]['#below'])) {
    $tree = $tree[$tree_key]['#below']; // remove the top level
    $flag = flag_get_flag('course_item_complete');
    foreach ($tree as &$unit) {
      if (!isset($unit['#below'])) {
        continue;
      }
      // change theme for unit level links
      $unit['#theme'] = 'menu_link__course_outline_unit';
      // for each lesson we add html to the title
      foreach ($unit['#below'] as &$item) {
        if (!isset($item['#below'])) {
          continue;
        }
        $node = menu_get_object('node', 1, $item['#original_link']['link_path']);

        $completed = $flag->is_flagged($node->nid, $user->uid);
        $item['#attributes']['class'][] = 'outline-item';
        unset($item['#attributes']['class']['leaf']);
        $item['#attributes']['class'][] = $completed ? 'outline-item-is-complete' : 'outline-item-is-incomplete';
        if ($node->nid == arg(1)) {
          $item['#attributes']['class'][] = 'js-outline-current';
          $item['#attributes']['class'][] = 'outline-item-is-current';
        }

        $item['#title'] = course_outline_item_title($node);
        $item['#localized_options']['html'] = TRUE;
        $item['#attributes']['class'][] = $node->type;
      }
    }
  }
}

/**
 * Builds title for course outline menu item
 * @param object $node
 * @return string title for the course outline menu item
 */
function course_outline_item_title($node) {
  $title = "<span class='outline-" . str_replace('_', '-', $node->type) . "-icon'></span>";
  switch ($node->type) {
    case 'lesson':
      $title = $title . '<span class="outline-lesson-prefix">' . t('Lesson @i.', array('@i' => $node->outline_index)) . '</span>';
      break;
  }
  $title = '<div class="title-wrapper">' . $title . $node->title . '</div>';
  return $title;
}

/**
 * Implements hook_node_load().
 */
function course_outline_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (isset($node->book)) {
      $node->outline_index = course_outline_get_item_index($node);
    }
  }
}

/**
 * Gets index of the node in the book by type.
 */
function course_outline_get_item_index($node) {
   $items = course_get_items($node);
   $counter = new multi_counter();
   foreach ($items as $nid => $type) {
      $counter->increment($type);
      if ($nid == $node->nid) {
        break;
      }
    } 
   return $counter->current($node->type);
}
