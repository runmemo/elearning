<?php

/**
 * Implements hook_init().
 *
 * Add quiz-specific styling.
 */
function course_outline_init() {
  // @todo Probably don't want to add this to every page.
  drupal_add_js(drupal_get_path('module', 'course_outline') . '/course_outline.js');
  drupal_add_css(drupal_get_path('module', 'course_outline') . '/course_outline.css');
  drupal_add_library('system', 'ui.accordion');
}

/**
 * Define the Book Outline Block/
 * Implementation of hook_block_info()
 */
function course_outline_block_info() {
  $block['book_outline'] = array(
    'info' => 'Course Outline',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $block;
}

/**
 * Define the contents and title of the block/
 * Implementation of hook_block_view()
 *
 * Returns a renderable block array containing the current book's outline if
 * the node is part of a book.
 *
 * Returns NULL if the current menu item is not part of a book heirarchy.
 */
function course_outline_block_view($delta = '') {

  $book = course_outline_node_book();
  if (!$book) {
    return NULL;
  }

  $tree = menu_tree_all_data($book['menu_name'], NULL, 3);
  course_outline_preprocess_tree($tree);

// If we pass 1 as the second param, we just get the top level node in the
  // book. Since the key will be the top level mlid, we'll have to use 
  // ['p1'] in the $book array (which contains the top mlid) when we use it 
  // for the block title.
  $book_name = book_toc($book['bid'], 1);

  $tree_output = menu_tree_output($tree);
  // alter titles and classes of the links in the tree
  course_outline_preprocess_tree($tree_output);
  
  // Build the block title and contents
  $block['subject'] = $book_name[$book['p1']];
  $block['content'] = $tree_output;
  
  return $block;
}

/**
 * Adds content type specific html to leafs of course menu
 * @param array $tree represents menu tree
 * @return boolean
 */
function course_outline_preprocess_tree(&$tree) {
  $counter = new multi_counter;
  $tree_key = key($tree);
  if(isset($tree[$tree_key]['#below'])){
    foreach ($tree[$tree_key]['#below'] as &$unit) {
      if(!isset($unit['#below'])) { 
        continue;
      }
      foreach ($unit['#below'] as &$lesson) {
        if(!isset($lesson['#below'])) { 
          continue;
        }
        // @todo: check for performance issues
        $node = menu_get_object('node', 1, $lesson['#original_link']['link_path']);
        $node->order = $counter->increment($node->type);
     
        $lesson['#title'] = course_outline_item_title($node);
        $lesson['#localized_options']['html'] = TRUE;
        $lesson['#attributes']['class'][] = $node->type;
      }
    }
  }
  return TRUE;
}
/**
 * Builds title for course outline menu item
 * @param object $node
 * @return string title for the course outline menu item
 */
function course_outline_item_title($node){
  switch ($node->type) {
        case 'lesson':
          $title = "<span class='" . $node->type . "'>" . t('Lesson @i.', array('@i' => $node->order)) . '</span>';
          break;
        case 'quiz': // @todo : add question mark icon.
          $title = "<span class='" . $node->type . "'></span>";
          break;
        default:
          $title = "<span class='" . $node->type . "'></span>";
          break;
      }
      $title = $title . $node->title;
   return $title;
}

/**
 * Checks to see if current node is part of a book.
 * Returns book array if it is part of a book, FALSE is not.
 */
function course_outline_node_book() {
  $node = menu_get_object();
  if ($node && isset($node->book)) {
    return $node->book;
  }
  return FALSE;
}

/**
 * Helper counter class allows to keep several counts
 */
class multi_counter {

  private $counts;

  public function __construct() {
    $this->counts = array();
  }

  /**
   * Increments counter of specific type by one
   * @param string $type
   * @return integer
   */
  public function increment($type) {
    if (!isset($this->counts[$type])) {
      return $this->counts[$type] = 1;
    }
    else {
      return++$this->counts[$type];
    }
  }

  /**
   * Gets current value of counter
   * @param string $type
   * @return integer
   */
  public function current($type) {
    if (!isset($this->counts[$type])) {
      return 0;
    }
    else {
      return $this->counts[$type];
    }
  }

}
