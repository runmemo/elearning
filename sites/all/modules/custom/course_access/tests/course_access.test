<?php

/**
 * @file
 * Tests for Course Access module.
 */


  /**
   * Test the "submitted" course access.
   *
   * 1- Create 3 users with permissions to create course as books.
   * 2- User 1 has additional permission : "view any unpublished course"
   * 3- User 2 has additional permission : "view own unpublished course"
   * 4- User 3 dont have any additional permission.
   * 5- Each user creates one course in submitted stage.
   * 6- Test that user1 can view the other user's course.
   * 7- Test that user2 cannot view the other user's course.
   * 8- Test that user2 can view his own course.
   * 9- Test that user3 cannot view any course.
   * 10- Add lesson to each of the course item above and repeat step 6 - 8 for 
   *     lessons
   */

class CourseAccessTest extends CourseTestCase {

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('course_access');
    node_access_rebuild();
  }
  
  /**
   * creates course node
   */
  function createCourseAccessNode($uid, $stage) {
    $settings = array(
      'type' => 'course',
      'uid' => $uid,
    );

    $course =  $this->drupalCreateNode($settings);
    $course->book['bid'] = $course->nid;
    $course->field_teacher[LANGUAGE_NONE][0]['uid'] = $uid;
    $course->field_stage[LANGUAGE_NONE][0]['value'] = $stage;
    node_save($course);
    return $course;
  }

  function populateCourseAccessNode($course = NULL) {
    // Creating a course with the following structure:
    $outline = array(
      'unit1' => array(// 0 
        'lesson1' => 'page', // 1
      ),
    );
    return $this->populateCourse($course, $outline);
  }  

}

/**
 *  Tests navigation related features of the course
 */
class CourseAccessTestCase extends CourseAccessTest {
  public static function getInfo() {
    return array(
      'name' => 'Course Access test',
      'description' => 'Checks behavior of Course Access.',
      'group' => 'Course',
    );
  }

  function setUp() {
    parent::setUp();

    $permissions = array(
      'create new books',
      'create book content',
      'edit own book content',
      'add content to books'
    );

    $this->user1 = $this->drupalCreateUser(array_merge(array('view any unpublished course'), $permissions));
    $this->user2 = $this->drupalCreateUser(array_merge(array('view own unpublished course'), $permissions));
    $this->user3 = $this->drupalCreateUser($permissions);
    
    $this->course1 = $this->createCourseAccessNode($this->user1->uid, 1);   
    $this->course2 = $this->createCourseAccessNode($this->user2->uid, 1);   
    $this->course3 = $this->createCourseAccessNode($this->user3->uid, 1);
  }

  function testCourseAccess() {
    $user1 = $this->drupalLogin($this->user1);
    $this->drupalGet('node/' . $this->course1->nid);
    $this->assertResponse(200);
    $this->drupalGet('node/' . $this->course2->nid);
    $this->assertResponse(200);
    $this->drupalGet('node/' . $this->course3->nid);
    $this->assertResponse(200);

    $user2 = $this->drupalLogin($this->user2);
    $this->drupalGet('node/' . $this->course1->nid);
    $this->assertResponse(403);
    $this->drupalGet('node/' . $this->course2->nid);
    $this->assertResponse(200);
    $this->drupalGet('node/' . $this->course3->nid);
    $this->assertResponse(403);

    $user3 = $this->drupalLogin($this->user3);
    $this->drupalGet('node/' . $this->course1->nid);
    $this->assertResponse(403);
    $this->drupalGet('node/' . $this->course2->nid);
    $this->assertResponse(403);
    $this->drupalGet('node/' . $this->course3->nid);
    $this->assertResponse(403);

    // populate course.
    $course_items1 = $this->populateCourseAccessNode($this->course1); 
    $course_items2 = $this->populateCourseAccessNode($this->course2);
    $course_items3 = $this->populateCourseAccessNode($this->course3);

    foreach($course_items1 as $course_item) {
      $user1 = $this->drupalLogin($this->user1);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(200);

      $user2 = $this->drupalLogin($this->user2);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403);

      $user3 = $this->drupalLogin($this->user3);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403);
    }

    foreach($course_items2 as $course_item) {
      $user1 = $this->drupalLogin($this->user1);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(200);

      $user2 = $this->drupalLogin($this->user2);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403); 

      $user3 = $this->drupalLogin($this->user3);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403);
    }

    foreach($course_items3 as $course_item) {
      $user1 = $this->drupalLogin($this->user1);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(200);

      $user2 = $this->drupalLogin($this->user2);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403);

      $user3 = $this->drupalLogin($this->user3);
      $this->drupalGet('node/' . $course_item->nid);
      $this->assertResponse(403);
    }

  }

}
