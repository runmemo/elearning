<?php

/**
 * @file
 * 
 * classroom.test contains test case for Classroom module
 */

/**
 * Test case for Classroom module that checks that
 */
class ClassroomCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Classroom Test Case',
      'description' => 'Tests that Classroom module functions work correctly.',
      'group' => 'Course',
    );
  }

  function setUp() {
    parent::setUp('newsletter', 'classroom');
    
    // Create course
    $settings = array(
      'type' => 'course'
    );
    $this->course = $this->drupalCreateNode($settings);
    $this->course->book['bid'] = $this->course->nid;
    node_save($this->course);
    // Create users
    $this->user_a = $this->drupalCreateUser(array());
    $this->user_b = $this->drupalCreateUser(array());
    
  }

  function testGroupsFieldExists() {
     $this->assertTrue(field_info_instance('user', 'field_classrooms', 'user'), 'Field was added to the user entity.');
  }
  /**
   * Test case for registration process. Checks, that group is created and user
   * is added to this group and removed, when registration is cancelled.
   */
  function testClassroomAddUser() {
    $uid = $this->user_a->uid;
    $course_nid = $this->course->nid;
  
    $classroom = classroom_get_user_classroom($course_nid, $uid);
    $this->assertFalse($classroom, 'User is not assigned to any classrooms.');
   
    // Add user to classroom
    $result = classroom_add_user($course_nid, $uid);
    $this->assertTrue($result);
   
    $res = db_select('og_membership', 'm')->fields('m')->execute();
    debug($res->fetchAll(), 'Shows to records. Why?'); // @todo Ilya - why there are two records here.
    
    $user_group = classroom_get_user_classroom($uid, $course_nid);
    $this->assertTrue($user_group, 'After registration user has been added to the course group.');
    
    // Add user to classroom
    $result = classroom_add_user($course_nid, $uid);
    $this->assertFalse($result);
    // @todo Ilya: assert that there is still a single membership or watchdog record.
  }
  
  function testClassroomRemoveUser() {
    $uid = $this->user_a->uid;
    $course_nid = $this->course->nid;
     // Add user to classroom
    classroom_add_user($course_nid, $uid);
    // Remove user from classroom
    $result = classroom_remove_user($course_nid, $uid);
    $this->assertTrue($result);
    $user_group = classroom_get_user_classroom($uid, $course_nid);
    $this->assertFalse($user_group, 'After registration cancellation user has been removed from the group.');
  
    $result = classroom_remove_user($course_nid, $uid);
    $this->assertFalse($result);
    
  }
  
  function testClassroomOverflow() {
    // @todo Ilya: check that new classroom is created once current class gets to it's max size.
    // e.g. if 9 users registered to a course with max group size of 2 we should have 5 groups.
  }

}
