<?php

/**
 * @file
 * 
 * classroom.test contains test case for Classroom module
 */

/**
 * Test case for Classroom module that checks module functions.
 */
class ClassroomCase extends DrupalWebTestCase {
  protected $course;
  
  public static function getInfo() {
    return array(
      'name' => 'Classroom Test Case',
      'description' => 'Tests that Classroom module functions work correctly.',
      'group' => 'Course',
    );
  }

  function setUp() {
    parent::setUp('classroom');

    // Create course
    $settings = array(
      'type' => 'course'
    );
    $this->course = $this->drupalCreateNode($settings);
    $this->course->book['bid'] = $this->course->nid;
    node_save($this->course);
    // Create users
    $this->user_a = $this->drupalCreateUser(array());
    $this->user_b = $this->drupalCreateUser(array());
    $this->user_c = $this->drupalCreateUser(array());
  }
  
  /**
   * Tests that fields on classroom bundle were created.
   */
  function testGroupsFieldExists() {
    $this->assertTrue(field_info_instance('user', 'og_user_node', 'user'), 'Field was added to the user entity.');
    $this->assertTrue(field_info_instance('node', 'field_classroom_course', 'classroom'), 'Field was added to the user entity.');
    $this->assertTrue(field_info_instance('node', 'group_group', 'classroom'), 'Field was added to the user entity.'); 
  }

  /**
   * Test case for registration process. Checks, that group is created and user
   * is added to this group.
   */
  function testClassroomAddUser() {
    $uid = $this->user_a->uid;
    $course_nid = $this->course->nid;

    $classroom = classroom_get_user_classroom($course_nid, $uid);
    $this->assertFalse($classroom, 'User is not assigned to any classrooms.');

    // Add user to classroom
    $result = classroom_add_user($course_nid, $uid);
    $this->assertTrue($result);

    $user_group = classroom_get_user_classroom($uid, $course_nid);
    $this->assertTrue($user_group, 'After registration user has been added to the course group.');

    // Add same user to classroom
    $result = classroom_add_user($course_nid, $uid);
    $this->assertFalse($result);
  
    $query = db_select('og_membership', 'm');
    $query->fields('m');
    $query->addExpression('COUNT(*)', 'count');
    $result = $query->execute();
    $rows = $result->fetch();
    $this->assertEqual($rows->count, 1, 'There is only one membership.');
    
    // Add another user to classroom
    $result = classroom_add_user($course_nid, $this->user_b->uid);
    $this->assertTrue($result);
  }

  /**
   * Checks, that user is removed, when registration is cancelled.
   */
  function testClassroomRemoveUser() {
    $uid = $this->user_a->uid;
    $course_nid = $this->course->nid;
    // Add user to classroom
    classroom_add_user($course_nid, $uid);
    // Remove user from classroom
    $result = classroom_remove_user($course_nid, $uid);
    $this->assertTrue($result);
    $user_group = classroom_get_user_classroom($uid, $course_nid);
    $this->assertFalse($user_group, 'After registration cancellation user has been removed from the group.');

    $result = classroom_remove_user($course_nid, $uid);
    $this->assertFalse($result);
  }

  /**
   * Checks, that new classroom is created once current class gets to it's max size.
   */
  function testClassroomOverflow() {
    variable_set('classroom_size', 3);
    
    $course_nid = $this->course->nid;
    $users = array();
    for ($i = 1; $i<=10; $i++) {
       $users[] = $this->drupalCreateUser(array());
    }
    $assigned = array();
    foreach ($users as $key => $user) {
      classroom_add_user($course_nid, $user->uid);
      $assigned[$key] = classroom_get_user_classroom($user->uid, $course_nid);
    }

    $this->assertEqual($assigned[0], $assigned[2], "Users are in the same classroom.");
    $this->assertNotEqual($assigned[0], $assigned[3], "Users are in different classrooms.");
    $this->assertEqual($assigned[3], $assigned[4], "Users are in the same classroom.");
    $this->assertEqual($assigned[4], $assigned[5], "Users are in the same classroom.");
    $this->assertNotEqual($assigned[5], $assigned[6], "Users are in different classrooms.");
  
    $this->assertEqual(classroom_count_classrooms($course_nid), 4, 'Number of classrooms is correct.');
    
  }
  
  /**
   * Tests classroom_members_count() function.
   */
  function testClassroomCount() {
    $course_nid = $this->course->nid;
    // Add user to classroom of a course.
    classroom_add_user($course_nid, $this->user_a->uid);
    $classroom_nid = classroom_get_group($course_nid);
    $members = classroom_members_count($classroom_nid);
    $this->assertEqual($members, 1);
    
    // Add two more users
    classroom_add_user($course_nid, $this->user_b->uid);
    classroom_add_user($course_nid, $this->user_c->uid);
    $members = classroom_members_count($classroom_nid);
    $this->assertEqual($members, 3);
  }
  
  /**
   * Tests classroom_create_group() function.
   */
  function testClassroomCreate() {
    $gid = classroom_create_group($this->course->nid);
    $classroom = entity_metadata_wrapper('node', $gid);
    $this->assertEqual($classroom->field_classroom_course->raw(), $this->course->nid);
    $this->assertEqual($classroom->group_group->value(), 1);
  }
  
}
