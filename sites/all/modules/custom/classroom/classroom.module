<?php

/**
 * @file
 * Code for the Classroom feature.
 */
include_once 'classroom.features.inc';

/**
 * Implements hook_entity_presave();
 */
function classroom_entity_presave($entity, $type) {
  if ($type == 'registration') {
    if (isset($entity->nid)) {
      if ($entity->is_new || ($entity->cancelled == 0 && $entity->original->cancelled > 0)) {
        classroom_add_user($entity->nid, $entity->uid);
      }
      elseif ($entity->cancelled > 0 && $entity->original->cancelled == 0) {
        classroom_remove_user($entity->nid, $entity->uid);
      }
    }
  }
}

/**
 * 
 * @param integer $course_nid
 *   Course node ID
 * @return
 *   Group ID or FALSE
 */
function classroom_get_group($course_nid) {
  $group_id = classroom_get_available_group($course_nid);
  if (!$group_id) {
    $group_id = classroom_create_group($course_nid);
    if (!$group_id) {
      watchdog('classroom', "Couldn't assign user to any course (# %nid) group.", array('%nid' => $course_nid), WATCHDOG_WARNING);
    }
  }
  return $group_id;
}

/**
 * Calculates number of classrooms for the given course.
 * 
 * @param integer $course_nid
 *   Course node ID
 */
function classroom_count_classrooms($course_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'classroom')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_classroom_course', 'target_id', $course_nid)
    ->count();
  $result = $query->execute();
  if (empty($result)) {
    return FALSE;
  }
  return $result;
}

/**
 * Adds user to the course group.
 * 
 * @param integer $course_nid
 *   Course node ID
 * @param integer $uid
 *   User ID
 */
function classroom_add_user($course_nid, $uid) {
  $group = classroom_get_user_classroom($uid, $course_nid);
  if (!$group) {
    $group_id = classroom_get_group($course_nid);
    if ($group_id) {
      $values = array(
        'entity_type' => 'user',
        'entity' => $uid,
        'field_name' => 'og_user_node'
      );
      og_group('node', $group_id, $values);
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Removes user from the course group.
 * 
 * @param integer $course_nid
 *   Course node ID
 * @param integer $uid
 *   User ID
 */
function classroom_remove_user($course_nid, $uid) {
  $group = classroom_get_user_classroom($uid, $course_nid);
  if ($group) {
    og_ungroup('node', $group, 'user', $uid);
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function classroom_form_og_ui_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['classroom_size'] = array(
    '#type' => 'textfield',
    '#description' => t('Defines the max size of the classroom in the system.'),
    '#title' => t('Classroom size'),
    '#default_value' => variable_get('classroom_size', 5),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
  );
}

/**
 * Returns course group, to which user is assigned or FALSE.
 * 
 * @param integer $uid
 *   User ID
 * @param integer $course_nid
 *   Course node ID
 *   
 * @return integer
 *   Course group node ID
 */
function classroom_get_user_classroom($uid, $course_nid) {
  $user = user_load($uid);
  $groups = og_get_groups_by_user($user, 'node');
  
  if (empty($groups)) {
    return FALSE;
  }
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'classroom')
    ->propertyCondition('status', 1)
    ->propertyCondition ('nid', $groups, 'IN')
    ->fieldCondition('field_classroom_course', 'target_id', $course_nid);
  $result = $query->execute();
  
  if (empty($result)) {
    return FALSE;
  }
  
  foreach ($result['node'] as $nid => $node) {
    return $nid;
  }
 
  return FALSE;
}

/**
 * Returns last not full group for the course or FALSE if there are no groups
 * for the course.
 * 
 * @param integer $course_nid
 *   Course node ID
 * 
 * @return
 *   Available group ID or FALSE if none was found
 */
function classroom_get_available_group($course_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'classroom')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_classroom_course', 'target_id', $course_nid)
    ->propertyOrderBy('nid', 'DESC')
    ->range(0, 1);
  $result = $query->execute();
  if (empty($result)) {
    return FALSE;
  }
  $default_size = variable_get('classroom_size', 5);
  foreach ($result['node'] as $nid => $node) {
    $size = classroom_members_count($nid);
    if (!$size || ($size < $default_size)) {
      return $nid;
    }
  }
  return FALSE;
}

/**
 * Calculates number of students in group.
 * 
 * @param integer $group_nid
 *   Group node ID
 */
function classroom_members_count($group_nid) {
  $query = new EntityFieldQuery();
  return $query->entityCondition('entity_type', 'user')
      ->propertyCondition('status', 1)
      ->fieldCondition('og_user_node', 'target_id', $group_nid)
      ->count()
      ->execute();
}

/**
 * Creates new course group.
 * 
 * @param integer $course_nid
 *   Course node ID
 * 
 * @return
 *   Node ID of the group or FALSE
 */
function classroom_create_group($course_nid) {
  $node = new stdClass();
  $node->type = 'classroom';
  $node->title = 'Classroom for course #' . $course_nid;
  $node->language = LANGUAGE_NONE;
  $node->options = array();
  $node->promote = 0;
  $node->created = REQUEST_TIME;
  $node->status = 1;
  $node->uid = 0;
  $node->group_group[LANGUAGE_NONE][0]['value'] = 1;
  $node->field_classroom_course[LANGUAGE_NONE][0]['target_id'] = $course_nid;
  node_save($node);

  return isset($node->nid) ? $node->nid : FALSE;
}

/**
 * Implements hook_views_default_views_alter().
 * 
 * Adds og relationship and contextual filter to the 'open_questions_review_list' view.
 */
function classroom_views_default_views_alter(&$views) {
  if (isset($views['open_questions_review_list'])) {
    if (!isset($views['open_questions_review_list']->display['default']->handler->display->display_options['relationships']['og_membership_rel'])) {
      $relationships = &$views['open_questions_review_list']->display['default']->handler->display->display_options['relationships'];
      $relationships['og_membership_rel']['id'] = 'og_membership_rel';
      $relationships['og_membership_rel']['table'] = 'users';
      $relationships['og_membership_rel']['field'] = 'og_membership_rel';
      $relationships['og_membership_rel']['relationship'] = 'uid';
    }
    if (!isset($views['open_questions_review_list']->display['default']->handler->display->display_options['arguments']['gid'])) {
      $args = &$views['open_questions_review_list']->display['default']->handler->display->display_options['arguments'];
      $args['gid']['id'] = 'gid';
      $args['gid']['table'] = 'og_membership';
      $args['gid']['field'] = 'gid';
      $args['gid']['relationship'] = 'og_membership_rel';
      $args['gid']['default_action'] = 'default';
      $args['gid']['default_argument_type'] = 'og_user_groups';
      $args['gid']['default_argument_options']['glue'] = ',';
      $args['gid']['summary']['number_of_records'] = '0';
      $args['gid']['summary']['format'] = 'default_summary';
      $args['gid']['summary_options']['items_per_page'] = '25';
      $args['gid']['break_phrase'] = TRUE;
    }
  }
}
