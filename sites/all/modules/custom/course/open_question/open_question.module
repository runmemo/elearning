<?php

/**
 * @file
 * Code for the Open Question feature.
 */
include_once 'open_question.features.inc';

/**
 * Implements hook_block_info()
 */
function open_question_block_info() {
  $blocks['oq_answer_form_block'] = array(
    'info' => t('OQ Answer Form Block'),
  );
  $blocks['oq_other_answers_block'] = array(
    'info' => t('OQ Answers Review List'),
  );
  return $blocks;
}

/**
 * Implements hook_permission()
 */
function opent_question_permission() {
  return array(
    'create open question' => array(
      'title' => 'Create open question',
      'description' => 'Allows user to create open questions.'
    )
  );
}

/**
 * Implements hook_block_view
 */
function open_question_block_view($delta = '') {
  $block = array();
  $question = menu_get_object('node');
  
  $answered = open_question_is_answered($question->nid);

  switch ($delta) {
    case 'oq_answer_form_block':
      $block['subject'] = '';

      if (!node_access('create', 'open_question_answer')) {
        // user does not have rights to see the form
        $block['content'] = t('You need to register to answer this question.');
        return $block;     
      }
      
      // add answer form
      $block['content']['answer_form']= drupal_get_form('open_question_answer_form', $answered);
      // embed view 
      if ($answered) {
        $block['content']['questions_list'] = array(
          '#type' => 'markup',
          '#markup' => open_question_get_answer_feedbacks($answered),
        );
      }
      
      break;
    case 'oq_other_answers_block':
      $block['subject'] = '';
     
      if ($answered) {
        $block['content'] = open_question_answered_content();
      } 
      else {
        $block['content']['message'] = array(
         '#type' => 'markup',
         '#markup' => t('You need to answer question before you can review answers of other students.'),
        );
      }
    break;
  }
  return $block;
}

/*
 * Get content for answered open question.
 */

function open_question_answered_content() {
  $block_content = array();
  $block_content['message'] = array(
    '#type' => 'markup',
    '#markup' => t('Please review and mark answers of other students.'),
  );
  // show answers of other students for review
  $review_list_view = views_get_view('open_questions_review_list');
  $block_content['review_list'] = array(
    '#type' => 'markup',
    '#markup' => $review_list_view->preview(),
  );
  return $block_content;
}

/**
 * Implementation of hook_rules_event_info()
 */
function open_question_rules_event_info() {
  return array(
    'open_question_answered' => array(
      'label' => t('Open question complete'),
      'module' => 'open_question',
      'group' => 'Course' ,
      'variables' => array(
        'answered_by' => array('type' => 'user', 'label' => t('User who answered the open question.')),
        'open_question' => array('type' => 'node', 'label' => t('The open question that was answered.')),
      ),
    ),
  );
}

/**
 * Gets nid of answer by user to open question
 * @global object $user current user
 * @param integer $nid
 * @param integer $uid
 * @return integer nid of user's answer to open question
 */
function open_question_is_answered($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  // count number of answers given by user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_question_answer')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_open_question', 'target_id', $nid)
      ->range(0, 1); // this is just to improve db performance

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }

  return FALSE;
}

/**
 * Form for providing an answer to an open question
 */
function open_question_answer_form($form, &$form_state, $answered) {
  //debug($form_state['step']);
  $form = array();
  $form['#prefix'] = '<div id="oq-answer-form-wrapper">';
  $form['#suffix'] = '</div>';
  
  $nid = 0;
  if (empty($form_state['step'])) {  // page is loaded
    $question = menu_get_object('node');
    if ($question && $question->type === 'open_question') {
      $nid = $question->nid;
      $form_state['question_nid'] = $nid;
    }
    else { // this is not a page of open question
      return $form;
    }

    // check whether user already has an answer to this question
    $form_state['answer_nid'] = $answered;
    if ($answered) {
      $mode = 'view';
    }
    else {
      $mode = 'edit';
    }
    $form_state['step'] = $mode;
  }
  else {
    $answered = $form_state['asnwer_nid'];
    $mode = $form_state['step'];
  }

  // build form depending on it's current mode
  switch ($mode) {
    case 'edit' :
      // build form for editing
      $form['edit']['new_answer'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#default_value' => empty($form_state['answer_value']) ? '' : $form_state['answer_value'],
      );
      $form['edit']['save'] = array(
        '#type' => 'submit',
        '#submit' => array('open_question_answer_submit'),
        '#value' => t('Save'),
        '#ajax' => array(
          'callback' => 'open_question_answer_submit_js',
          'wrapper' => 'oq-answer-form-wrapper',
          'progress' => array('message' => t('')),
        ),
      );
      $form['edit']['supplementary'] = array(
        '#prefix' => '<div class="oq-answer-form-supplementary">',
        '#suffix' => '</div>',
        '#markup' => t('Please, answer the question, and other participants of the course will review your answer.'),
      );
      if (!empty($form_state['answer_value'])) {
        // @todo add cancellation button
      }
      break;
    case 'view':
      if (!empty($form_state['answer_value'])) {
        $answer_text = $form_state['answer_value'];
        debug($answer_text);
      }
      else {
        $answer = node_load($answered);
        $answer_text = $answer->body[LANGUAGE_NONE][0]['value'];
        $form_state['answer_value'] = $answer_text;
      }
      // build form for viewing of saved answer
      $form['view']['edit'] = array(
        '#type' => 'submit',
        '#value' => t('Edit'),
        '#submit' => array('open_question_answer_submit'),
        '#ajax' => array(
          'callback' => 'open_question_answer_submit_js',
          'wrapper' => 'oq-answer-form-wrapper',
          'progress' => array('message' => t('')),
        ),
      );
      $form['view']['answer'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="oq_answer">',
        '#suffix' => '</div>',
        '#markup' => $answer_text,
      );
      
      break;
    default :
      $form['bad_state'] = array(
        '#type' => 'markup',
        '#markup' => 'State ' . $mode . ' is not supported by this form.',
      );
  }

  return $form;
}

/**
 * 
 */
function open_question_answer_submit($form, &$form_state) {

  $oq_nid = $form_state['question_nid'];
  
  global $user;
  // User clicked Save button in edit mode
  if ($form_state['triggering_element']['#value'] == t('Save')) {

    if (empty($form_state['answer_nid']) || !$form_state['answer_nid']) {
      // its a new answer
      $node = new stdClass();
      $node->type = 'open_question_answer';
      node_object_prepare($node);
      $node->title = 'OQ anwer nid#' . $oq_nid . '# uid#' . $user->uid;
      $node->language = LANGUAGE_NONE;
      $node->body[$node->language][0]['value'] = $form_state['values']['new_answer']['value'];
      $node->body[$node->language][0]['format'] = 'filtered_html';
      $node->field_open_question[LANGUAGE_NONE][0]['target_id'] = $oq_nid;
   
      node_save($node);
      $form_state['answer_nid'] = $node->nid;
      $oq = node_load($oq_nid);
      // question is now answered by user:
      rules_invoke_event('open_question_answered', $user, $oq);
    }
    else { // user changed existing answer
      debug('Updating existing node' . $form_state['answer_nid']);
      $node = node_load($form_state['answer_nid']);
      $node->body[$node->language][0]['value'] = $form_state['values']['new_answer']['value'];
      node_save($node);
    }   
    $form_state['answer_value'] = $form_state['values']['new_answer']['value'];
    $form_state['step'] = 'view';
  }
  // User clicked Edit button in view mode.
  if ($form_state['triggering_element']['#value'] == t('Edit')) {
    $form_state['step'] = 'edit';
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for open question answer submit
 */
function open_question_answer_submit_js($form, $form_state) {
  $commands[] = ajax_command_replace('#block-open-question-oq-other-answers-block .content', render(open_question_answered_content()));
  $commands[] = ajax_command_replace('#oq-answer-form-wrapper',  render($form));
  drupal_add_css(drupal_get_path('module', 'inline_comments') . '/css/inline_comments_views.css');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Returns embedded view on open question page.
 * @param type $oq_nid
 * @return string HTML for a view with feedbacks or an empty string.
 */
function open_question_get_answer_feedbacks($oqa_nid = NULL) {

  if ($oqa_nid) {
    $view_obj = views_get_view('oqa_feedbacks');
    $view = $view_obj->preview('block', array($oqa_nid));
  }
  else {
    $view = '';
  }
  return $view;
}


/**
 * Implements hook_forms().
 */
function open_question_forms($form_id, $nid) {
  $forms = array();
  if (strpos($form_id, 'oq_review_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'oq_review_form',
      'callback arguments' => array($nid),
    );
  }
  return $forms;
}

function oq_review_form($form, &$form_state, $args) {
  global $user;
  $form = array();
  $nid = $args[0]; 
  
  $form['#prefix'] = "<div id=oq-review-wrapper-{$nid}>";
  $form['#suffix'] = '</div>';
  $form['#attached'] = array(
    'css' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'fivestar') . '/css/fivestar.css'
    ),   
  );
  
  if (empty($form_state['step'])) {  // page is loaded
    $feedback_nid = oqa_is_reviewed($nid, $user->uid);
    if($feedback_nid) {
      $form_state['feedback_nid'] = $feedback_nid;
      $form_state['step'] = 'view';
    } 
    else {
      $form_state['step'] = 'edit';
    }
  } 
  else {
    $feedback_nid = $form_state['feedback_nid'];
  }
  $step = $form_state['step'];

  //Ctools helper files.
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();

 
  $flag = flag_get_flag('abuse_content');
  $action = 'flag';
  if($flag->is_flagged($nid, $user->uid)) {
    $action = 'unflag';
  } 

  switch ($step) {
    case 'view':
      if (empty($form_state['storage'])) {
        $review_node = node_load($feedback_nid);
        $rating_values = field_get_items('node', $review_node, 'field_rating');
        if ($rating_values) {
           $rating = $rating_values[0]['rating'];
        }
        else {
          $rating = FALSE;
        }
        $items = field_get_items('node', $review_node, 'body');
        $review_body_item = field_view_value('node', $review_node, 'body', $items[0]);
        if($review_body_item['#access']) {
          $review_body = $review_body_item['#markup'];
        }
      } 
      else { // we know values from the submitted form already
        $rating = $form_state['storage']['rating'];
        $review_body = $form_state['storage']['body'];
      }
      if ($rating) {
        $form['rating'] = array(
        '#type' => 'item',
        '#title' => 'Rating',
        '#markup' => theme('fivestar_static', array('rating' => $rating)),
       );
      }
      $form['review'] = array(
        '#type' => 'item',
        '#title' => 'Review',
        '#markup' => $review_body,
      );

      $form['flag'] = array(
        '#prefix' => '<div class="abuse-flag">',
        '#markup' => ctools_modal_text_button('<span class="icon"></span>', "flag/confirm/$action/abuse_content/{$nid}/nojs", t('Flag this'), 'ctools-modal-common-modal-style ctools-modal-abuse'),
        '#suffix' => '</div>'
      );
      break;
    case 'edit':
      $form['rating'] = array(
        '#type' => 'fivestar',
        '#title' => 'Rating',
        '#required' => 'true',
      );
      $form['review'] = array(
        '#type' => 'textarea',
        '#title' => 'Review',
        '#required' => 'true'
      );

      $form['flag'] = array(
        '#prefix' => '<div class="abuse-flag">',
        '#markup' => ctools_modal_text_button('<span class="abuse-flag-icon"></span>', "flag/confirm/$action/abuse_content/{$nid}/nojs", t('Flag this'), 'ctools-modal-common-modal-style ctools-modal-abuse'),
        '#suffix' => '</div>'
      );
      $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => 'OK',
        '#ajax' => array(
          'callback' => 'oq_review_form_js',
          'wrapper' => "oq-review-wrapper-{$nid}",
        ),
      );
      break;
    default: // this should not happen ever
      watchdog('open question', 'Step %step is not defined for open question feedback form.', 
          array('%step' => $step), 
          WATCHDOG_WARNING);
      break;
  }
  return $form;
}

function oqa_is_reviewed($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  // count number of answers given by user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_question_feedback')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_open_question_answer', 'target_id', $nid)
      ->range(0, 1); // this is just to improve db performance

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }

  return FALSE; 

}


/** 
 * AJAX callback function for Open Question Review Form
 */
function oq_review_form_js($form, &$form_state) {
  return $form;
}

/**
 * Implements submit for Open Question Review Form
 */
function oq_review_form_submit($form, &$form_state) {
  // validate the form
  drupal_validate_form('oq_review_form', $form, $form_state);
 // if there are errors, return the form to display the error messages
  if (form_get_errors()) {
    $form_state['rebuild'] = TRUE;
    return $form;
  }
 
  global $user;
  $oq_nid = $form_state['build_info']['args'][0];

  $node = new stdClass();
  $node->type = 'open_question_feedback';
  node_object_prepare($node);
  $node->title = 'OQ feedback nid#' . $oq_nid . '# uid#' . $user->uid;
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $form_state['values']['review'];
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->field_open_question_answer[$node->language][0]['target_id'] = $oq_nid;
  $node->field_rating[$node->language][0]['rating'] = $form_state['values']['rating'];
  node_save($node);
  $form_state['feedback_nid'] = $node->nid;
  $form_state['step'] = 'view';
  // store values provided by user in the form
  $form_state['storage']['body'] = $form_state['values']['review'];
  $form_state['storage']['rating'] =  $form_state['values']['rating'];
  // rebuild from after submit
  $form_state['rebuild'] = TRUE;
  
}
