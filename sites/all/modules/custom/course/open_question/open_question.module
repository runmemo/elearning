<?php

/**
 * @file
 * Code for the Open Question feature.
 */
include_once 'open_question.features.inc';



/**
 * Implements hook_block_info()
 */
function open_question_block_info() {
  $blocks['oq_answer_form_block'] = array(
    'info' => t('OQ Answer Form Block'),
  );
  $blocks['oq_other_answers_block'] = array(
    'info' => t('OQ Answers Review List'),
  );
  return $blocks;
}

/**
 * Implements hook_permission()
 */
function opent_question_permission() {
  return array(
    'create open question' => array(
      'title' => t('Create open question'),
      'description' => t('Allows user to create open questions.'),
    )
  );
}

/**
 * Implements hook_block_view
 */
function open_question_block_view($delta = '') {
  $block = array();
  if (!in_array($delta, array('oq_answer_form_block','oq_other_answers_block'))) {
    return $block;
  }
  $question = menu_get_object('node');
  if (!$question || $question->type != 'open_question') {
    watchdog('open question', 
        'Open question block %delta is displayed on non question page: %path', 
       array('%path' => current_path(), '%delta' => $delta), WATCHDOG_WARNING);
    return;
  }
  $answered = open_question_is_answered($question->nid);

  switch ($delta) {
    case 'oq_answer_form_block':
      $block['subject'] = '';

      if (!node_access('create', 'open_question_answer')) {
        // user does not have rights to see the form
        $block['content'] = array (
          '#type' => 'markup',
          '#prefix' => '<p class="oq-review-no-access">',
          '#suffix' => '</p>',
          '#markup' => t('You need to register to answer this question.'),
        );
        return $block;     
      }
      
      // add answer form
      $block['content']['answer_form']= drupal_get_form('open_question_answer_form', $answered);
      // embed view 
      if ($answered) {
        $block['content']['questions_list'] = array(
          '#type' => 'markup',
          '#markup' => open_question_get_answer_feedbacks($answered),
        );
      }
      
      break;
    case 'oq_other_answers_block':
      $block['subject'] = '';
     
      if ($answered) {
        $block['content'] = open_question_review_list_view();
      } 
      else {
        $block['content']['message'] = array(
         '#type' => 'markup',
         '#prefix' => '<p class="oq-review-no-access">',
         '#suffix' => '</p>',
         '#markup' => t('You need to answer question before you can review answers of other students.'),
        );
      }
    break;
  }
  return $block;
}

/*
 * Gets answers of other students for review.
 */
function open_question_review_list_view() {
  $block_content = array();
  // show answers of other students for review
  $review_list_view = views_get_view('open_questions_review_list');
  $block_content['review_list'] = array(
    '#type' => 'markup',
    '#markup' => $review_list_view->preview(),
  );
  return $block_content;
}

/**
 * Implementation of hook_rules_event_info()
 */
function open_question_rules_event_info() {
  return array(
    'open_question_answered' => array(
      'label' => t('Open question complete'),
      'module' => 'open_question',
      'group' => 'Course' ,
      'variables' => array(
        'answered_by' => array('type' => 'user', 'label' => t('User who answered the open question.')),
        'open_question' => array('type' => 'node', 'label' => t('The open question that was answered.')),
      ),
    ),
  );
}

/**
 * Gets nid of answer by user to open question
 * @global object $user current user
 * @param integer $nid
 * @param integer $uid
 * @return integer nid of user's answer to open question
 */
function open_question_is_answered($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  // count number of answers given by user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_question_answer')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_open_question', 'target_id', $nid)
      ->range(0, 1); // this is just to improve db performance

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }

  return FALSE;
}

/**
 * Form for providing an answer to an open question
 */
function open_question_answer_form($form, &$form_state, $answered) {
 
  $form = array();
  $form['#prefix'] = '<div id="oq-answer-form-wrapper">';
  $form['#suffix'] = '</div>';
  
  $nid = 0;
  if (empty($form_state['step'])) {  // page is loaded
    $question = menu_get_object('node');
    if ($question && $question->type === 'open_question') {
      $nid = $question->nid;
      $form_state['question_nid'] = $nid;
    }
    else { // this is not a page of open question
      return $form;
    }

    // check whether user already has an answer to this question
    $form_state['answer_nid'] = $answered;
    if ($answered) {
      $mode = 'view';
    }
    else {
      $mode = 'edit';
    }
    $form_state['step'] = $mode;
  }
  else {
    $answered = $form_state['asnwer_nid'];
    $mode = $form_state['step'];
  }

  // build form depending on it's current mode
  switch ($mode) {
    case 'edit' :
      // build form for editing
      $form['edit']['new_answer'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#default_value' => empty($form_state['answer_value']) ? '' : $form_state['answer_value'],
      );
      $form['edit']['save'] = array(
        '#type' => 'submit',
        '#submit' => array('open_question_answer_submit'),
        '#value' => t('Save'),
        '#ajax' => array(
          'callback' => 'open_question_answer_submit_js',
          'wrapper' => 'oq-answer-form-wrapper',
          'progress' => array('message' => t('')),
        ),
      );
      $form['edit']['supplementary'] = array(
        '#prefix' => '<div class="oq-answer-form-supplementary">',
        '#suffix' => '</div>',
        '#markup' => t('Please, answer the question, and other participants of the course will review your answer.'),
      );
      if (!empty($form_state['answer_value'])) {
        // @todo add cancellation button
      }
      break;
    case 'view':
      if (!empty($form_state['answer_value'])) {
        $answer_text = $form_state['answer_value'];
      }
      else {
        $answer = node_load($answered);
        $answer_text = $answer->body[LANGUAGE_NONE][0]['value'];
        $form_state['answer_value'] = $answer_text;
      }
      
      // build form for viewing of saved answer
      $form['view']['answer'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="oq_answer">',
        '#suffix' => '</div>',
        '#markup' => $answer_text,
      );
      $form['view']['edit'] = array(
        '#type' => 'submit',
        '#value' => t('Edit'),
        '#submit' => array('open_question_answer_submit'),
        '#ajax' => array(
          'callback' => 'open_question_answer_submit_js',
          'wrapper' => 'oq-answer-form-wrapper',
          'progress' => array('message' => t('')),
        ),
        '#attributes' => array('class' => array('oq-answer-form-submit')),
        '#suffix' => '<div class="oq-answer-submit-sign"></div>',
      );
      $stats = open_question_get_feedback_stats($answered);
      if ($stats['count']) {
         $form['view']['view_desc'] = array(
          '#prefix' => '<div class="oq-answer-footer"><div class="oq-answer-view-description">',
          '#suffix' => '</div>',
          '#markup' => 
            t('Reviews with comments') . ':',
        );
        $form['view']['rating'] = array(
          '#type' => 'markup',
          '#prefix' => '<div class="oq-answer-rating">',
          '#suffix' => '</div></div>',
          '#markup' => 
            t('Your average score: !average', array('!average' => $stats['average']))
            . '<span class="answer-feedbacks-count"> ' . t('(out of !count)', array('!count' => $stats['count'])) . '</span>',
        );
      }
      
      break;
    default :
      $form['bad_state'] = array(
        '#type' => 'markup',
        '#markup' => t('State @mode is not supported by this form.', array('@mode' => $mode)),
      );
  }

  return $form;
}

/**
 * Implements submit function for the open question answer form
 */
function open_question_answer_submit($form, &$form_state) {

  $oq_nid = $form_state['question_nid'];
  
  global $user;
  // User clicked Save button in edit mode
  if ($form_state['triggering_element']['#value'] == t('Save')) {

    if (empty($form_state['answer_nid']) || !$form_state['answer_nid']) {
      // its a new answer
      $node = new stdClass();
      $node->type = 'open_question_answer';
      node_object_prepare($node);
      $node->title = 'OQ anwer nid#' . $oq_nid . '# uid#' . $user->uid;
      $node->language = LANGUAGE_NONE;
      $node->body[$node->language][0]['value'] = $form_state['values']['new_answer']['value'];
      $node->body[$node->language][0]['format'] = 'filtered_html';
      $node->field_open_question[LANGUAGE_NONE][0]['target_id'] = $oq_nid;
   
      node_save($node);
      $form_state['answer_nid'] = $node->nid;
      $oq = node_load($oq_nid);
      // question is now answered by user:
      rules_invoke_event('open_question_answered', $user, $oq);
    }
    else { // user changed existing answer
      $node = node_load($form_state['answer_nid']);
      $node->body[$node->language][0]['value'] = $form_state['values']['new_answer']['value'];
      node_save($node);
    }   
    $form_state['answer_value'] = $form_state['values']['new_answer']['value'];
    $form_state['step'] = 'view';
  }
  // User clicked Edit button in view mode.
  if ($form_state['triggering_element']['#value'] == t('Edit')) {
    $form_state['step'] = 'edit';
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for open question answer submit
 */
function open_question_answer_submit_js($form, $form_state) {
  $commands[] = ajax_command_replace('#block-open-question-oq-other-answers-block .content', render(open_question_review_list_view()));
  $commands[] = ajax_command_replace('#oq-answer-form-wrapper',  render($form));
  // @todo Ilya, why do we need to add css file on submit?
//  drupal_add_css(drupal_get_path('module', 'inline_comments') . '/css/inline_comments_views.css');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Returns embedded view on open question page.
 * @param type $oq_nid
 * @return string HTML for a view with feedbacks or an empty string.
 */
function open_question_get_answer_feedbacks($oqa_nid = NULL) {

  if ($oqa_nid) {
    $view_obj = views_get_view('oqa_feedbacks');
    $view = $view_obj->preview('block', array($oqa_nid));
  }
  else {
    $view = '';
  }
  return $view;
}


/**
 * Implements hook_forms().
 */
function open_question_forms($form_id, $nid) {
  $forms = array();
  if (strpos($form_id, 'oq_review_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'oq_review_form',
      'callback arguments' => array($nid),
    );
  }
  return $forms;
}

/**
 * Form that is used in review list so users could review answers
 */
function oq_review_form($form, &$form_state, $args) {
  global $user;
  $form = array();
  $nid = $args[0]; 
  
  $form['#attributes']['class'][] = 'oq-review-wrapper-' . $nid;
  $form['#attached']['css'][] = drupal_get_path('module', 'common_tools') . '/widgets/elearning_fivestar_widget.css';
  
  $form['nid'] = array (
    '#type' => 'hidden', 
    '#value' => $nid,
  );
  $form['nid']['#attributes']['class'][] = 'js-oq-answer-nid';
  
   $form['message_placeholder'] = array(
     '#type' => 'markup',
     '#markup' => '<div class="oq-form-message"></div>',
   );
  
  $feedback_nid = FALSE;
  if (empty($form_state['step'])) {  // page is loaded
    $feedback_nid = oqa_is_reviewed($nid, $user->uid);
    if ($feedback_nid) {
      $form_state['feedback_nid'] = $feedback_nid;
      $form_state['step'] = 'view';
    }
    else {
      $form_state['step'] = 'edit';
    }
  }
  else {
    $feedback_nid = $form_state['feedback_nid'];
  }
  $step = $form_state['step'];

  $rating = FALSE;
  
  // add a hidden state that shows whether feedback exists in db
  $form['feedback_saved_' . $nid] = array(
      '#type' => 'hidden',
      '#value' => $feedback_nid ? 'true' : 'false',
    );
  
  if ($feedback_nid) {  
    if (empty($form_state['storage'])) {
      $review_node = node_load($feedback_nid);
      $rating_values = field_get_items('node', $review_node, 'field_rating');
      if ($rating_values) {
         $rating = $rating_values[0]['rating'];
      }
      $items = field_get_items('node', $review_node, 'body');
      $review_body_item = field_view_value('node', $review_node, 'body', $items[0]);
      if ($review_body_item['#access']) {
        $review_body = $review_body_item['#markup'];
      }
    }
    else { // we know values from the submitted form already
      $rating = $form_state['storage']['rating'];
      $review_body = $form_state['storage']['body'];
    }
  if (!empty($review_body)) {
      $view_obj = views_get_view('oqa_feedback_comments');
      $view = $view_obj->preview('block', array($feedback_nid));
    }
  }
  $form_class = $step == 'view' ? 'oq-review-form-is-view' : 'oq-review-form-is-edit';
  $form['#attributes'] = array('class' => array($form_class));
  switch ($step) {
    case 'view':
      $form['rating'] = array(
        '#type' => 'fivestar',
        '#title' => t('Rating'),
        '#required' => TRUE,
        '#default_value' => $rating ? $rating : NULL,
      );
      if ($rating) {
        $form['rating_submit'] = array(
          '#type' => 'submit',
          '#value' => 'rating_submit',
          '#ajax' => array(
            'callback' => 'oq_review_form_js',
            'wrapper' => 'oq-review-wrapper-' . $nid,
          ),
        );
        $form['rating_submit']['#attributes']['class'][] = 'oq-review-form-rating-submit';
        $form['review_value'] = array('#type' => 'hidden', '#value' => $review_body);
      }
      $form['edit_button'] = array(
        '#type' => 'submit',
        '#value' => 'edit_submit',
        '#ajax' => array(
          'callback' => 'oq_review_form_js',
          'wrapper' => "oq-review-wrapper-{$nid}",
        ),
        '#prefix' => '<div>',
      );
      
      if (!empty($review_body)) {
        $form['edit_button']['#attributes']['class'][] = 'oq-review-form-edit';
      }
      else {
        $form['edit_button']['#attributes']['class'][] = 'oq-review-form-edit-body-is-empty';
      }
      $form['review'] = array(
        '#type' => 'item',
        '#title' => t('Review'),
        '#markup' => isset($view) ? $view : $review_body,
        '#suffix' => '</div>',
      );
      break;
    case 'edit':
      $form['rating'] = array(
        '#type' => 'fivestar',
        '#title' => t('Rating'),
        '#required' => TRUE,
        '#default_value' => $rating ? $rating : NULL,
      );
      $form['toggle_fields'] = array(
        '#type' => 'fieldset',
        '#states' =>array(  
          'invisible' => array( // hid fieldset when feedback was not saved
            ':input[name="feedback_saved_' . $nid .'"]' => array('value' => 'false'),
          ),
        ),
      );
      $form['toggle_fields']['#attributes']['class'][] = 'js-oq-form-toggle-' . $nid;
      $form['toggle_fields']['#attributes']['class'][] = 'oq-form-fieldset-toggle';
      
      $form['toggle_fields']['review'] = array(
        '#type' => 'textarea',
        '#title' => t('Review'),
        '#required' => FALSE,
        '#default_value' => isset($review_body) ? $review_body : '',
      );
      $form['toggle_fields']['review']['#attributes']['class'][] = 'oq-form-review';
      $form['toggle_fields']['review']['#attributes']['class'][] = 'js-oq-review-field' . $nid;
     
      // submit button
      $form['toggle_fields']['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Add review'),
        '#ajax' => array(
          'callback' => 'oq_review_form_js',
          'wrapper' => "oq-review-wrapper-{$nid}",
        ),
      );
      $form['toggle_fields']['submit_button']['#attributes']['class'][] = 'oq-review-form-submit';
      $form['toggle_fields']['submit_button']['#attributes']['class'][] = 'js-oq-submit-review-' . $nid;
      // button that allows to skip review and just save the score
      $form['toggle_fields']['submit_skip'] = array(
        '#type' => 'submit',
        '#value' => t("Skip review"),
        '#ajax' => array(
          'callback' => 'oq_review_form_js',
          'wrapper' => "oq-review-wrapper-{$nid}",
        ),
      );
      $form['toggle_fields']['submit_skip']['#attributes']['class'][] = 'oq-review-form-skip';
      $form['toggle_fields']['submit_skip']['#attributes']['class'][] = 'js-oq-skip-review-' . $nid;
      break;
    default: // this should not happen ever
      watchdog('open question', 'Step %step is not defined for open question feedback form.', 
          array('%step' => $step), 
          WATCHDOG_WARNING);
      break;
  }
  return $form;
}

/**
 * Determins wither open question answer was reviewed
 * @global object $user
 * @param integer $nid nid of answer node
 * @param integer $uid uid of the user
 * @return integer id of the feedback node if exists, otherwise FALSE
 */
function oqa_is_reviewed($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  // count number of answers given by user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_question_feedback')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_open_question_answer', 'target_id', $nid)
      ->range(0, 1); // this is just to improve db performance

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }
  return FALSE; 
}


/**
 * Implements hook FORM_ID_validate for oq_review_form().
 */
function oq_review_form_validate($form, &$form_state) {
  $forbidden_values = array('-', '20', '40', '60');
  if ($form_state['clicked_button']['#value'] != 'rating_submit' && $form_state['clicked_button']['#value'] != 'edit_submit') {
    if (in_array($form_state['values']['rating'], $forbidden_values) && empty($form_state['values']['review'])) {
      form_set_error('review', t('Review field is required.'));
    }
  } elseif ($form_state['clicked_button']['#value'] == 'rating_submit') {
    if (in_array($form_state['values']['rating'], $forbidden_values) && empty($form_state['values']['review_value'])) {
      form_set_error('rating', t('Please, provide text along with your mark.'));
    }
  }
}

/** 
 * AJAX callback function for oq_review_form().
 */
function oq_review_form_js($form, &$form_state) {
  if ($form_state['values']['op'] == 'rating_submit' || $form_state['values']['op'] == t('Add review') || $form_state['values']['op'] == t("Don't add")) {
    $form['message_placeholder']['#markup'] = common_tools_collect_messages('error');
  }
  return $form;
}

/**
 * Implements hook FORM_ID_submit for oq_review_form().
 */
function oq_review_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'edit_submit') {
    // add this variable to show form elements after edit submit
    $form_state['step'] = 'edit';
  } else {
    // validate the form
    drupal_validate_form('oq_review_form', $form, $form_state);
    // if there are errors, return the form to display the error messages
    if (form_get_errors()) {
      $form_state['rebuild'] = TRUE;
      return $form;
    }

    if ($form_state['values']['op'] == 'rating_submit') {
      if (isset($form_state['feedback_nid']) && is_numeric($form_state['feedback_nid'])) {
        $node = node_load($form_state['feedback_nid']);
        if ($node) {
          $node->field_rating[$node->language][0]['rating'] = $form_state['values']['rating'];
          node_save($node);
        }
      }
    } else {
      if (isset($form_state['feedback_nid']) && is_numeric($form_state['feedback_nid'])) {
        $node = node_load($form_state['feedback_nid']);
        if ($node) {
          $lang = $node->language;
          $node->body[$lang][0]['value'] = $form_state['values']['review'];
          $node->field_rating[$lang][0]['rating'] = $form_state['values']['rating'];
          node_save($node);
        }
      } else {
        global $user;
        $oq_nid = $form_state['build_info']['args'][0];
        $node = new stdClass();
        $node->type = 'open_question_feedback';
        node_object_prepare($node);
        $node->title = 'OQ feedback nid#' . $oq_nid . '# uid#' . $user->uid;
        $node->language = LANGUAGE_NONE;
        $node->body[$node->language][0]['value'] = $form_state['values']['review'];

        $node->field_open_question_answer[$node->language][0]['target_id'] = $oq_nid;
        $node->field_rating[$node->language][0]['rating'] = $form_state['values']['rating'];
        node_save($node);
        $form_state['feedback_nid'] = $node->nid;
      }
    }
    $form_state['step'] = 'view';
    // store values provided by user in the form
    $form_state['storage']['body'] = $form_state['values']['op'] == 'rating_submit' ? $form_state['values']['review_value'] : $form_state['values']['review'];
    $form_state['storage']['rating'] = $form_state['values']['rating'];
  }
  // rebuild from after submit
  $form_state['rebuild'] = TRUE;
}

/**
 * Implementation of hook_node_view().
 */
function open_question_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'open_question') {
    drupal_add_js(drupal_get_path('module', 'open_question') . '/open_question.js');
  }
}

/**
 * Implementation of hook_css_alter().
 * @param array $css
 */
function open_question_css_alter(&$css) {
  // Remove fivestar.css file because we use our own widget.
  unset($css[drupal_get_path('module', 'fivestar') . '/css/fivestar.css']);
}

/**
 * Calculates basic stats for feedbacks to an open question answer.
 * @param integer $nid id of the open question answer node.
 * @return array that contains numeric stats values.
 */
function open_question_get_feedback_stats($nid) { 
  $query = db_select('field_data_field_rating', 'fr');
  $query->join('field_data_field_open_question_answer', 'oqa', 'fr.entity_id = oqa.entity_id');
  $query->fields('fr', array('field_rating_rating'));
  $query->condition('oqa.field_open_question_answer_target_id', $nid);
  $query->addExpression('AVG(fr.field_rating_rating)', 'avg_rating');
  $query->addExpression('COUNT(*)', 'count_feedbacks');
  $db_result = $query->execute();
  $result = $db_result->fetch();
  
  // calculate average on 1-5 scale
  $average = $result->avg_rating ? number_format($result->avg_rating / 20, 1, '.', ' ') : 0;
  $count = $result->count_feedbacks;
  // return stats in array
  return array('count' => $count, 'average' => $average);
}

/**
 * Implements hook_field_formatter_info().
 */
function open_question_field_formatter_info() {
  return array(
    'oqa_feedback_formatter' => array(
      'label' => t('Feedback formatter'),
      'field types' => array('fivestar'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function open_question_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $elements[0] = array(
    '#markup' => t('Rating') . ': ' . $items[0]['user'] / 20,
  );
  return $elements;
}

/**
 * Implements hook_credit_result_info from credit module
 */
function open_question_credit_info() {
  $info = array();
  $info['oq'] = array(
    'bundle' => 'open_question',
    'result_callback' => 'open_question_result'
  );
  return $info;
}
 
/**
 * Gets result of open question completion for specific user
 * @param object $node
 * @param object $account
 * @return real result of open question competion in a range from 0 to 1.
 */
function open_question_result($node, $account) {
 
  // find answer of the user for this node
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'open_question_answer')
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $account->uid)
        ->fieldCondition('field_open_question', 'target_id', $node->nid, '=')
        ->range(0, 1);
  
  $result = $query->execute();
  
  if (isset($result['node'])) {
    $answers_nids = array_keys($result['node']);
    $answer_nid = $answers_nids[0];
    $stats =  open_question_get_feedback_stats($answer_nid); 
    if ($stats['count'] > 0) { // @todo give admin an option to chose number of feedbacks
      $result =  $stats['average'] / 5.0;
      return $result;
    }
  } 
  // user did not answer that open question yet 
  // or nobody provided user with feedback 
  return .0;
}



/**
 * Implements hook_subscriptions_reference_info()
 */
function open_question_subscriptions_reference_info() {
   return array(
    'oq_subscribe_feedbacks' => array( // should unique accross modules that implement that hook
      'parent' => 'open_question_answer',  // is being referenced
      'child' => 'open_question_feedback',    // contains the field
      'field' => 'field_open_question_answer',
      'ref_item' => 'target_id'),   // name of the field
  );
}