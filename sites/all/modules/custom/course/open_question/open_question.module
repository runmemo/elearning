<?php

/**
 * @file
 * Code for the Open Question feature.
 */
include_once 'open_question.features.inc';

/**
 * Implements hook_block_info()
 */
function open_question_block_info() {
    $blocks['oq_answer_form_block'] = array(
        'info' => t('OQ Answer Form Block'),
    );
    $blocks['oq_other_answers_block'] = array(
        'info' => t('OQ Answers Review List'),
    );
    return $blocks;
}

/**
 * Implements hook_permission()
 */
function opent_question_permission() {
    return array(
      'answer open question' => array(
        'title' => 'Answer open question',
        'description' => 'Allows user to answer open questions.'
      ),
      'create open question' => array(
         'title' => 'Create open question',
         'description' => 'Allows user to create open questions.'
      )
    );
}
/**
 * Implements hook_node_access()
 */
function open_question_node_access($node, $op, $account) {
    $type = is_string($node) ? $node : $node->type;
    // @todo : add logic to make open question nodes
    // visible only to users who registered to the course.
    if ($op == 'view' && $type == 'open_question') {
        if (course_user_access($node, $account)) {
            return NODE_ACCESS_ALLOW;
        } 
        else {
            return NODE_ACCESS_DENY;
        }
    }
    return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_block_view
 */
function open_question_block_view($delta = '') {
    $block = array();
    switch ($delta) {
        case 'oq_answer_form_block':
            $block['subject'] = '';
            if(user_access('answer open question')) {               
                $block['content'] = drupal_get_form('open_question_answer_form');
            }
            else {
                $block['content'] = t('You need to register to answer this question.');
            }
           
            break;
        case 'oq_other_answers_block':
            $block['subject'] = '';
            $block['content'] = ' TODO ';
            break;
    }
    return $block;
}

/**
 * Gets nid of answer by user to open question
 * @global object $user current user
 * @param integer $nid
 * @param integer $uid
 * @return integer nid of user's answer to open question
 */
function open_question_is_answered($nid, $uid = NULL) {
    if (is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    // count number of answers given by user
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'open_question_answer')
            ->propertyCondition('status', 1)
            ->propertyCondition('uid', $uid)
            ->fieldCondition('field_open_question', 'target_id', $nid)
            ->range(0, 1); // this is just to improve db performance

    $result = $query->execute();

    foreach ($result as $entity_type => $entities) {
        foreach ($entities as $entity_id => $entity) {
            return $entity_id;
        }
    }

    return FALSE;
}

/**
 * Form for providing an answer to an open question
 */
function open_question_answer_form($form, &$form_state) {
    //debug($form_state['step']);
    $form = array();
    $form['#prefix'] = '<div id="oq-answer-form-wrapper">';
    $form['#suffix'] = '</div>';
   
    $nid = 0;
    if(empty($form_state['step'])) {  // page is loaded
      
        $question = menu_get_object('node');       
        if ($question && $question->type === 'open_question') {
            $nid = $question->nid;
            $form_state['question_nid'] = $nid;
        } else { // this is not a page of open question
            return $form;
        }
        
        // check whether user already has an answer to this question
        $answered = open_question_is_answered($nid);
        $form_state['answer_nid'] = $answered;
        if($answered) {
            $mode = 'view';          
        } 
        else {
            $mode = 'edit';
        }       
        $form_state['step'] = $mode;
    } 
    else {
        $answered = $form_state['asnwer_nid'];
        $mode = $form_state['step'];
    }
   
    // build form depending on it's current mode
    switch($mode) {
        case 'edit' :
            // build form for editing
            $form['edit']['new_answer'] = array(
                    '#type' => 'textarea',
                    '#default_value' => empty($form_state['answer_value']) ? '' : $form_state['answer_value'],
                );
            $form['edit']['save'] = array(
                '#type' => 'submit',
                '#submit' => array('open_question_answer_submit'),
                '#value' => t('Save'),
                '#ajax' => array(
                    'callback' => 'open_question_answer_submit_js',
                    'wrapper' => 'oq-answer-form-wrapper',
                    'progress' => array('message' => t('')),
                ),
            );
            if (!empty($form_state['answer_value'])) {
                // add cancellation button
                // @todo
            }
            break;
        case 'view':
            if(!empty($form_state['answer_value'])) {
                $answer_text =  $form_state['answer_value'];
                debug($answer_text);
            }
            else {
                $answer = node_load($answered);
                $answer_text =  $answer->body[LANGUAGE_NONE][0]['value'];
                $form_state['answer_value'] = $answer_text;
            }
            // build form for viewing of saved answer
            $form['view']['edit'] = array(
                '#type' => 'submit',
                '#value' => t('Edit'),
                '#submit' => array('open_question_answer_submit'),
                '#ajax' => array(
                    'callback' => 'open_question_answer_submit_js',
                    'wrapper' => 'oq-answer-form-wrapper',
                    'progress' => array('message' => t('')),
                ),
            );
            $form['view']['answer'] = array(
                '#type' => 'markup',
                '#prefix' => '<div class = "oq_answer">',
                '#suffix' => '</div>',
                '#markup' => $answer_text,
            );
            
            break;
        default :
            $form['bad_state'] = array(
                '#type' => 'markup',
                '#markup' =>  'State ' . $mode . ' is not supported by this form.',
            );
    }
   
    return $form;
}

/**
 * 
 */
function open_question_answer_submit($form, &$form_state) {
    
   $nid = $form_state['question_nid'];
   
   
   global $user;
   // User clicked Save button in edit mode
   if ($form_state['triggering_element']['#value'] == t('Save')) {
    
        if (empty($form_state['answer_nid']) || !$form_state['answer_nid']) {
            // its a new answer
            $node = new stdClass();
            $node->type = 'open_question_answer';
            node_object_prepare($node);
            $node->title = 'OQ anwer nid#' . $nid . '# uid#' . $user->uid;
            $node->language = LANGUAGE_NONE;
            $node->body[$node->language][0]['value'] = $form_state['values']['new_answer'];
            $node->body[$node->language][0]['format'] = 'filtered_html';
            $node->field_open_question[LANGUAGE_NONE][0]['target_id'] = $nid;
            
            node_save($node);
            $form_state['answer_nid'] = $node->nid;
        }
        else { // user changed existing answer
            debug('Updating existing node' . $form_state['answer_nid']);
            $node = node_load($form_state['answer_nid']);
            $node->body[$node->language][0]['value'] = $form_state['values']['new_answer'];
            node_save($node);
        }
        $form_state['answer_value']  = $form_state['values']['new_answer'];
        $form_state['step'] = 'view';
 
   }
   // User clicked Edit button in view mode.
   if ($form_state['triggering_element']['#value'] == t('Edit')) {
       $form_state['step'] = 'edit';
   }
   
   $form_state['rebuild'] = TRUE;
}

/**
 * Callback for open question answer submit
 */
function open_question_answer_submit_js($form, $form_state) {
    return $form;
}
