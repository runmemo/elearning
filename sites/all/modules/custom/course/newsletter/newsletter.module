<?php
/**
 * @file
 * Code for the Course newsletter feature.
 */

include_once 'newsletter.features.inc';

/**
 * Implements hook_node_access().
 */
function newsletter_node_access($node, $op, $account) {
  // Allow teacher to create newsletter.
  if($op == 'update' && $node->type == 'newsletter' && !course_is_teacher($node, $account)) {
    return NODE_ACCESS_DENY;
  }
  
  // Allow registered students to access the newsletter.
  if(isset($node->type) && $node->type === 'newsletter' && $op == 'view') {
    $item = entity_metadata_wrapper('node', $node);
    $course = $item->field_course->value();
    if(!course_registration_id($account->uid, $course->nid)) {
      return NODE_ACCESS_DENY;
    }
  }
}

/*
 * Implements hook_form_FORM_ID_alter.
 *
 */
function newsletter_form_newsletter_node_form_alter(&$form, &$form_state) {
  $compressed_path = isset($_GET['path']) ? $_GET['path'] : '';
  if ($compressed_path) {
    $original_path = relevant_answers_decompress_string($compressed_path);
    $langcode = field_language('node', $form_state['node'], 'field_course');
    $form['field_course'][$langcode]['#default_value'][] = $original_path;
    $form['field_course']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_node_insert().
 */
function newsletter_node_insert($node) {
  if ($node->type == 'newsletter') {
    newsletter_course_blog_post_notify($node);
  }
}

/**
 * Notifies all course blog subscribers if new post is added.
 * 
 * @param object $newsletter
 *   Node object of the new blog post.
 */
function newsletter_course_blog_post_notify($newsletter) {
  if (!module_exists('newsfeed')) {
    watchdog('newsletter', 'Enable newsfeed module to notify users of new content.', array(), WATCHDOG_WARNING);
    return;
  }
  $newsletter_wrapper = entity_metadata_wrapper('node', $newsletter);
  // Load course, in order to pass it to message_subscribe_send_message()
  // and get all course blog subscribers.
  $course = $newsletter_wrapper->field_course->value();
  $fields = array(
    'field_course' => $course->nid,
    'field_message_newsletter' => $newsletter->nid,
  );
  newsfeed_create_message('course_newsletter_notification', $newsletter->uid, $course, $fields);
}

/**
 *  Implements hook_preprocess_views_view_fields 
 *  for course_newsletter view.
 */
function newsletter_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
  if (!in_array($view->name, array('course_newsletter'))) {
    return;
  }

  $row = $vars['row'];
  if (isset($vars['fields']['nothing'])) {
    $count = get_relevant_questions_count('node/'.$row->nid);
    $css_classes = 'field-answers-count';
    if (!$count) {
      $css_classes = $css_classes . ' zero';
    }

    $output = 
     '<div class="field-group-stats">' .
       '<div class="field-created">' .
         date('d/m/Y', $row->node_created) .
       '</div>' .
       '<div class="' . $css_classes .  '">' .
         format_plural($count, '1 <br />Answer', '@count <br />Answers') . 
       '</div>' .
     '</div>';

    // Replace content of the field.
    $answer_count_field = $vars['fields']['nothing'];
    $answer_count_field->content = $output;
  }
}

/**
 * Returns count of questions related to path.
 */
function get_relevant_questions_count($path = NULL) {
  if(!$path) {
    return;
  }

  $result = db_select('field_data_field_question_path', 'fqp')
          ->fields('fqp', array('entity_id'))
          ->condition('fqp.field_question_path_value', $path) // Check path
          ->condition('fqp.entity_type', 'node') // Check entity is node
          ->condition('fqp.bundle', 'question') // Check node is of question type.
          ->condition('fqp.deleted', 0) // A boolean indicating whether this data item has been deleted
          ->execute();

  return $result->rowCount();
}

/**
 * Implements hook_views_pre_render
 */
function newsletter_views_pre_render(&$view) {
  if ($view->name == 'course_newsletter') {
    $compressed_path = relevant_answers_compress_string($view->args[0]);
    if(node_access('create', 'newsletter')) {

      $links = array();
      $compressed_path = relevant_answers_compress_string($view->args[0]);
    
      //Add links to the relevant questions views
      if (node_access('create', 'newsletter')) {
        $links[] = array(
          'title' => t('New post'), 
          'href' => 'node/add/newsletter',
          'query' => array(
            'path' => $compressed_path,
            drupal_get_destination()
          ),
          'attributes' => array(
            'class' => array('add-blog')
          )
        );
      }
      $view->attachment_before = theme('links', array('links' => $links, 'attributes' => array('class' => array('inline'))));
    }
  }
}
