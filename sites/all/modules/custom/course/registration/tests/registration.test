<?php
/**
 *
 * @author Bulat Yapparov
 *
 */
class CourseRegistrationTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Course Registration Test Case',
      'description' => 'Tests that registration functions work correctly.',
      'group' => 'Course',
    );
  }

  function setUp() {
    parent::setUp('views', 'registration');
    
   
    
    $settings = array(
     'type' => 'course'
    );
    $this->course = $this->drupalCreateNode($settings);
    $this->course->book['bid'] = $this->course->nid;
    node_save($this->course);
    
    $this->testUser = $this->drupalCreateUser(array());
    
  }

  /**
   * 
   * Checks that registration is created for a user if it did not exist
   */
  function testRegistrationCreatedWhenNotExists() {
      // Login as student
      $this->drupalLogin($this->testUser);
      
      $uid = $this->loggedInUser->uid;
      $nid = $this->course->nid;
      // Create registration with course_register_user for test course
      $rid = registration_register($uid, $nid);
      // Check that only one open registration exists for specified course
      $this->assertNotEqual($rid, FALSE, 'Registration id is not False.');
      
      $registration = registration_load($rid);
      $this->assertEqual($registration->uid, $uid, 'Current user is registration owner.');
      
      $course_id = $registration->nid;
      $this->assertEqual($nid, $course_id, 'Registration course is correct.');
      
  }
  
  /**
   * Checks that duplicate registration is not created
   */
  function testRegistrationNotCreatedWhenExists() {
      $this->drupalLogin($this->testUser);
      
      $uid = $this->loggedInUser->uid;
      $nid = $this->course->nid;
      
      $rid_first = registration_register($uid, $nid);
      $rid_second = registration_register($uid, $nid);
      
      $this->assertEqual($rid_first, $rid_second, 'Second registration is not created.');

      registration_cancel($uid, $nid);
      $rid_reactivate = registration_register($uid, $nid);
      
      $this->assertEqual($rid_first, $rid_reactivate, 'On re-activation same registration is used.');
      
  }  
  
  /**
   * Checks that cancellation of registration works as expected
   */
  function testRegistrationCancelled() {
      $this->drupalLogin($this->testUser);
      
      $uid = $this->loggedInUser->uid;
      $nid = $this->course->nid;
      
      $rid = registration_register($uid, $nid);
      // cancel registration first time
      $res = registration_cancel($uid, $nid);
      $this->assertTrue($res, 'First time cancellation returns TRUE');
      
      // cancel registration second time
      $res = registration_cancel($uid, $nid);
      $this->assertFalse($res, 'Second time cancellation returns FALSE');
      
      $rid_cancelled = course_registration_id($uid, $nid, FALSE);
      $this->assertEqual($rid_cancelled, $rid, 'Cancelled registration exists in DB');
      
      $rid_cancelled = course_registration_id($uid, $nid);
      $this->assertEqual($rid_cancelled, FALSE, 'Cancelled registration is not active');
      
      
  }

}