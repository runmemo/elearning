<?php

include_once 'registration.inc';
include_once 'registration.features.inc';

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function registration_entity_info() {
  $return['registration'] = array(
    'label' => t('Registration'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Registration',
    'controller class' => 'RegistrationController',
    'base table' => 'registration',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'registration_id',
    ),
    // Bundles are defined by the registration types below
    'bundles' => array(
      'Registration' => array(
        'label' => 'Registration ',
        'admin' => array(
          'path' => 'admin/structure/registration/manage',
          'access arguments' => array('administer postits'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'registration_create',
    'access callback' => 'registration_access',
    'module' => 'registration',
    // The information below is used by the RegistrationUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/registrations',
      'file' => 'registration.admin.inc',
      'controller class' => 'RegistrationUIController',
      'menu wildcard' => '%registration',
    ),
  );
  return $return;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer registrations' => array(
      'title' => t('Administer registrations'),
      'description' => t('Edit and delete all registrations'),
    ),
  );


  return $permissions;
}

/**
 * Determines whether the given user has access to a registration.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $registration
 *   Optionally a registration or a registration type to check access for. If nothing is
 *   given, access for all registrations is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function registration_access($op, $registration = NULL, $account = NULL) {
  if (user_access('administer registrations', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Fetch a registration object. Make sure that the wildcard you choose 
 * in the registration entity definition fits the function name here.
 *
 * @param $registration_id
 *   Integer specifying the registration id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $registration object or FALSE if it cannot be loaded.
 *
 * @see registration_load_multiple()
 */
function registration_load($registration_id, $reset = FALSE) {
  $registrations = registration_load_multiple(array($registration_id), array(), $reset);
  return reset($registrations);
}

/**
 * Load multiple registrations based on certain conditions.
 *
 * @param $registration_ids
 *   An array of registration IDs.
 * @param $conditions
 *   An array of conditions to match against the {registration} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of registration objects, indexed by registration_id.
 *
 * @see entity_load()
 * @see registration_load()
 */
function registration_load_multiple($registration_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('registration', $registration_ids, $conditions, $reset);
}

/**
 * Deletes a registration.
 */
function registration_delete(Registration $registration) {
  $registration->delete();
}

/**
 * Delete multiple registrations.
 *
 * @param $registration_ids
 *   An array of registration IDs.
 */
function registration_delete_multiple(array $registration_ids) {
  entity_get_controller('registration')->delete($registration_ids);
}

/**
 * Create a registration object.
 */
function registration_create($values = array()) {
  return entity_get_controller('registration')->create($values);
}

/**
 * Saves a registration to the database.
 *
 * @param $registration
 *   The registration object.
 */
function registration_save(Registration $registration) {
  return $registration->save();
}

/**
 * Saves a registration type to the db.
 */
function registration_type_save(RegistrationType $type) {
  $type->save();
}

/**
 * Deletes a registration type from the db.
 */
function registration_type_delete(RegistrationType $type) {
  $type->delete();
}

/**
 * URI callback for registrations
 */
function registration_uri(Registration $registration) {
  return array(
    'path' => 'registration/' . $registration->registration_id,
  );
}

/**
 * Menu title callback for showing individual entities
 */
function registration_page_title(Registration $registration) {
  return $registration->name;
}

/**
 * Sets up content to show an individual registration
 * @todo - get rid of drupal_set_title();
 */
function registration_page_view($registration, $view_mode = 'full') {
  $controller = entity_get_controller('registration');
  $content = $controller->view(array($registration->registration_id => $registration));
  drupal_set_title($registration->name);
  return $content;
}

/**
 * Implements hook_views_api().
 */
function registration_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'registration') . '/views',
  );
}


/**
 * Implements hook_context_plugins().
 *
 */
function registration_context_plugins() {
  $plugins = array();
  $plugins['context_condition_registration_access'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'registration') . '/plugins',
      'file' => 'context_condition_registration_access.inc',
      'class' => 'context_condition_registration_access',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 *
 */
function registration_context_registry() {
  return array(
    'conditions' => array(
      'registration_access' => array(
        'title' => t('Registration Access'),
        'description' => t('Determins whether user has access to a course item.'),
        'plugin' => 'context_condition_registration_access',
      ),
    ),
  );
}

/**
 * Registration form
 * @return array form for registration of user
 */
function course_registration_form($form, &$form_state) {

  // check whether user is already registered. 
  global $user;
  $uid = $user->uid;

  // get node id
  $node = menu_get_object('node');
  if ($node && isset($node->book)) {
    $nid = $node->book['bid'];
  }
  else { // it is not a node profile page, so don't show the button
    watchdog('Callback', 'Registration button is visible in a wrong place.', array($form), WATCHDOG_ERROR);
    return;
  }

  $form = array();

  // cache nid in the form as it will not be available in the callback overwise
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );

  if (!$uid) {
    $form['register'] = array(
      '#type' => 'item',
      '#markup' => l(t('Register'), "user/register/nojs", array('query' => array('course' => $nid), 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-common-modal-style', 'login-form-additional-link', 'course-user-register'))))
    );
    return $form;
  }

  $rid = course_registration_id($uid, $nid);
  if ($rid) {
    // user already registered, so we give him goto class button
    $form['submit'] = array(
      '#type' => 'submit',
      '#submit' => array('course_goto_class_submit'),
      '#value' => t('Go to class'),
    );
    return $form; // no need to show the button for registered user
  }

  // @todo : get the node id or url of the first lesson    
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enroll')
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function registration_form_user_register_form_alter(&$form, &$form_state) {
  if (isset($_GET['course'])) {
    // Store course id in storage.
    $form_state['storage']['course'] = $_GET['course'];
  }
  $form['#submit'][] = registration_user_register_submit;
}

function registration_user_register_submit($form, &$form_state) {

  if (isset($form_state['storage']['course'])) {
    $uid = $form_state['values']['uid'];
    $nid = $form_state['storage']['course'];

    // register user to course.
    try {
      registration_register($uid, $nid);
    } catch (InvalidArgumentException $e) {
      watchdog_exception($e);
    }
  }

  // Include required ctools libraries.
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_include('modal');

  // reload parent page.
  $commands[] = ctools_ajax_command_reload();
  print ajax_render($commands);
  exit;    
}

/**
 * Implements hook_user_update
 */
function registration_user_update(&$edit, $account, $category) {
  if (!empty($account->logintoboggan_email_validated)) {
    // Get course nid for which user has been registered.
    $res = db_select('registration', 'r')
      ->fields('r', array('nid'))
      ->condition('r.uid', $account->uid)
      ->execute()->fetch();

    if ($res) {
      // Set message before re-direct.
      drupal_set_message(t('You have successfully validated your e-mail address.'));

      //Take user to class.
      $node = node_load($res->nid);   
      drupal_goto(course_first_node_href('lesson', $node->book));
    }
  }
}


/**
 * Implements hook_node_view().
 */
function registration_node_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    if (!course_is_item_node($node)) {
      return;
    }
    global $user;
    // find whether user has permission to see this node.
    $access = registration_view_access($node, $user);
    $context_access = 'none';
    if (isset($access)) { // content is part of the course
      if ($access || node_access($node, 'update', $user)) {
        $context_access = 'true';
      }
      else { // user does not have access to course item
        hide($node->content);
        $context_access = 'false';
      }
    }
    // set condition for registration_access plugin
    if ($plugin = context_get_plugin('condition', 'registration_access')) {
      $plugin->execute($context_access);
    }
  }
}

/**
 * Function for access control to course items.
 * 
 * $param object $node
 *   Represents node that we 
 */
function registration_view_access($node, $account) {
  
  if (!isset($node->book)) { // this node is not part of a book
    return NULL;
  }

  $book = $node->book;
  if ($book['depth'] != 3) {
    // here we just check whether it's course item level
    return NULL;
  }

  // Check if user is registered to the course.
  $rid = course_registration_id($account->uid, $book['bid']);

  return (bool) $rid;   
}


/**
 * Registration form submit hook
 */
function course_registration_form_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;

  if ($user->uid == 0) { //user is not logged in 
    // @todo redirect to user registration form
  }

  $nid = $form['nid']['#value'];

  // register user to the course
  $rid = registration_register($uid, $nid);

  if ($rid) {
    $node = node_load($nid);
    $form_state['redirect'] = course_first_node_href('lesson', $node->book);
  }
}

function course_goto_class_submit($form, &$form_state) {
  $nid = $form['nid']['#value'];
  $last_nid = course_last_visited_node($nid);
  $path = '';
  if ($last_nid) { // user already visited some content of the course
    $path = 'node/' . $last_nid;
  }
  else { // user did not see the course, we redirect him to fist child page
    $node = node_load($nid);
    $next = book_next($node->book);
    $path = $next['link_path'];
  }
  $form_state['redirect'] = $path;
}

/**
 * Implement hook_theme().
 */
function registration_theme() {
  return array(
    'registration_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'registration.admin.inc',
    ),
    'registration' => array(
      'render element' => 'elements',
      'template' => 'registration',
    ),
    'registration_sample_data' => array(
      'variables' => array('registration_sample_data', 'registration' => NULL),
      'template' => 'registration-sample-data',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function registration_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/registrations/add' on 'admin/structure/registrations'.
  if ($root_path == 'admin/content/registrations') {
    $item = menu_get_item('admin/content/registrations/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function registration_entity_property_info_alter(&$info) {
  $properties = &$info['example_task']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date of registration."),
    'schema field' => 'created',
  );
  $properties['cancelled'] = array(
    'label' => t("Date cancelled"),
    'type' => 'date',
    'schema field' => 'cancelled',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Student"),
    'type' => 'user',
    'description' => t("User registered to course."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer example_task entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/**
 * The class used for registration entities
 */
class Registration extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'registration');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'registration/' . $this->registration_id);
  }

}

/**
 * The Controller for Registration entities
 */
class RegistrationController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a registration - we first set up the values that are specific
   * to our registration schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the registration.
   *
   * @return
   *   A registration object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Registration
    $values += array(
      'registration_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
      // registration specific fields:
      'nid' => $values['nid'],
      'uid' => $values['uid'],
    );

    $registration = parent::create($values);
    return $registration;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['registration_sample_data'] = array(
      '#markup' => theme('registration_sample_data', array('registration_sample_data' => check_plain($entity->data['sample_data']), 'registration' => $entity)),
    );

    return $content;
  }

}

