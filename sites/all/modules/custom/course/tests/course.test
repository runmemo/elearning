<?php

class CourseTestCase extends DrupalWebTestCase {

  protected $course;
  protected $course_author;
  protected $nodes; // items of the course
  
  function setUp() {
    $modules = array_merge(array('course'), func_get_args());
    parent::setUp($modules);

    $this->course_author = $this->drupalCreateUser(array(
      'create new books',
      'create book content',
      'edit own book content',
      'add content to books'));
   
    $this->course = $this->createCourseNode($this->course_author->uid);   
    
  }
  
  /**
   * Attaches node to the parent node in the book
   * @param object $node 
   * @param object $parent parent node in the book
   */
  function book_append_child($node, $parent, $weight = 0) {
    $node->book['bid'] = $parent->book['bid'];
    $node->book['plid'] = $parent->book['mlid'];
    $node->book['weight'] = $weight;
    node_save($node);
  }
  
  /**
   * creates course node
   */
  function createCourseNode($uid) {
    $settings = array(
      'type' => 'course',
      'uid' => $uid,
    );
    $course =  $this->drupalCreateNode($settings);
    $course->book['bid'] = $course->nid;
    $course->field_teacher[LANGUAGE_NONE][0]['uid'] = $uid;
    node_save($course);
    return $course;
  }
  
  /**
   * Appends items to the course
   * @param array $node_types
   * @return array of nodes
   */
  function populateCourse($course, $node_types) {
    $nodes = array();
    $unit_settings = array(
      'type' => 'unit',
       'uid' => $this->course_author->uid,
    );

    $i = 0;
    foreach ($node_types as $unit_key => $unit) {
      $u = $i;
      $nodes[$i] = $this->drupalCreateNode($unit_settings);
      $this->book_append_child($nodes[$i], $course, $u);
       // unit key in the array
      $i++;

      foreach ($unit as $key => $item) {
        $item_settings = array(
          'type' => $item,
          'uid' => $this->course_author->uid,
        );
        $nodes[$i] = $this->drupalCreateNode($item_settings);
        $this->book_append_child($nodes[$i], $nodes[$u], $i);
        $i++;
      }
    }
    $this->drupalLogout();
    return $nodes;
  }

}

/**
 *  Tests navigation related features of the course
 */
class CourseNavigationTestCase extends CourseTestCase {

  protected $student;

  public static function getInfo() {
    return array(
      'name' => 'Course Navigation Test Case',
      'description' => 'Tests that course navigation works correctly.',
      'group' => 'Course',
    );
  }

  function setUp() {
    parent::setUp('lesson'); // @todo get rid of dependencies
    $this->student = $this->drupalCreateUser(array('access content'));
    $this->nodes = $this->populateTestCourse($this->course);
    
  }
  /**
   * Creates course structure for provided course.
   * 
   * @param object $course
   * 
   * @return array of nodes
   */
  function populateTestCourse($course = NULL) {
    if (!isset($course)) {
      $course = $this->course;
    }
    // Creating a course with the following structure:
    $outline = array(
      'unit1' => array(// 0 
        'lesson1' => 'lesson', // 1
        'lesson2' => 'lesson', // 2
      ),
      'unit2' => array(// 3
        'lesson3' => 'lesson', // 4
        'lesson4' => 'lesson', // 5
      ),
    );
    return $this->populateCourse($course, $outline);
  }

  /**
   * Checks that user is redirected to the first child node from unit page
   */
  function testUnitRedirect() {
    $nodes = $this->populateTestCourse();
    $this->drupalGet('node/' . $nodes[0]->nid); // open Unit 1
    $this->assertRaw('node-type-lesson', 'User is redirected to a lesson of the unit.');
  }

  function testCourseProgress() {
    // @todo
    // login as student
    // check that progress is 0
    // complete 1st lesson
    // check that progress is correct
    // complete 2nd lesson
    // check that progress is correct
    // complete all lessons 
    // check that progress is 100
  }

  function testCourseLastVisitedItem() {
    $course2 = $this->createCourseNode($this->course_author->uid);
    $nodes2 = $this->populateTestCourse($course2);
    // course_register($this->student->uid, $this->course->nid);
    // course_register($this->student->uid, $course2->nid);
    // Login as student. 
    $this->drupalLogin($this->student);

    // Go to item X of the course.
    $this->drupalGet('node/' . $this->nodes[1]->nid);
    // Go to some other page outside of the course.
    $last_nid = course_last_visited_node($this->course->nid, $this->student->uid);
    $this->assertEqual($last_nid, $this->nodes[1]->nid);


    sleep(1);
    $this->drupalGet('node/' . $nodes2[1]->nid);
    $this->drupalGet('node/' . $this->nodes[5]->nid);
    // Go to user's page.
    $this->drupalGet('user/' . $this->student->uid);
    // Assert last visited node.
    $last_nid = course_last_visited_node($this->course->nid, $this->student->uid);
    $this->assertEqual($last_nid, $this->nodes[5]->nid);
    $last_nid = course_last_visited_node($course2->nid, $this->student->uid);
    $this->assertEqual($last_nid, $nodes2[1]->nid);
  }
}

/**
 * Contains unit tests for course functionality.
 */
class CourseUnitTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Course Unit Test Case',
      'description' => 'Unit Tests for course module.',
      'group' => 'Course',
    );
  }

  /**
   * @see _course_get_tree_items($tree) 
   */
  function testGetItemsFunction() {
    
    // test empty outline
    $outline = array();
    $tree = $this->make_book_tree($outline);
    $items = _course_get_tree_items($tree);
    $this->assertTrue(empty($items), 'Items list is empty for empty outline.');
    
    
    // test outline with empty units
    $outline = array(
      'unit1' => array (),
      'unit2' => array (),
    );
    $tree = $this->make_book_tree($outline);
    $items = _course_get_tree_items($tree);
    $this->assertTrue(empty($items), 'Items list is empty for outline with empty units.');
    
    // test outline with one item
     $outline = array(
      'unit1' => array ('lesson1' => 'lesson'),
      'unit2' => array (),
    );
    $tree = $this->make_book_tree($outline);
    $items = _course_get_tree_items($tree);
    $this->assertEqual(count($items), 1, '1 item found for outline with a lesson.');
   
    // teset outline with more items
    $outline = array(
      'unit1' => array ('lesson1' => 'lesson'),
      'unit2' => array ('lesson1' => 'lesson', 'quiz1' => 'quiz'),
      'unit3' => array ('lesson1' => 'lesson', 'quiz1' => 'quiz', 'other1' => 'other'),
    );
    $tree = $this->make_book_tree($outline);
    $items = _course_get_tree_items($tree);
    $expect = array ( 
      3,
      5, 6,
      8, 9, 10,
    );
    debug($items);
    $this->assertEqual(array_keys($items), $expect, 'Items are correct for provided outline.');
    
  }
  
  /** 
   * creates book like tree structure for provided outline array
   */
  function make_book_tree($outline) {
    $i = 1;
    $tree = array(
      'Tree Top' => $this->tree_new_leaf($i), 
    );
    
    foreach($outline as $unit_key => $unit) {
      $i++;
      $this->tree_append_leaf($tree['Tree Top'], $unit_key, $i);
      $unit_leaf = &$tree['Tree Top']['below'][$unit_key];
      
      foreach ($unit as $item) {
        $i++;
        $this->tree_append_leaf($unit_leaf, $item, $i);
      }
    }

    return $tree;
  }
  
  /**
   * Appends a leaf to another leaf
   * @param array $to_leaf 
   * @param string $leaf key of the new leaf
   * @param integer $nid of the node of a new leaf
   */
  function tree_append_leaf(&$to_leaf, $leaf, $nid) {
    $to_leaf['below'][$leaf] = $this->tree_new_leaf($nid);
  }
  /**
   * Returns array with new menu link
   */
  function tree_new_leaf($nid) {
    return array (
        'link' => array(
          'link_path' => 'node/' . $nid,
        ),
        'below' => array(),
      );
  }
  
  /**
   * Tests course_get_grade_ranges function with empty array.
   */
  function test_get_grade_ranges_empty() {
    $grades = array();
    $results = course_get_grade_ranges($grades);
    $this->assertFalse($results, 'Empty grades array results in FALSE.');
  }
  
  /**
   * Tests course_get_grade_ranges function with non empty array of grades.
   */
  function test_get_grade_ranges_non_empty() {
    $grades = array (
      50 => 'Pass',
      60 => 'Merit',
      70 => 'Distinction',
    );
    
    $results = course_get_grade_ranges($grades);
   
    foreach ($results as $range => $name) {
      $ranges[] = $range;
      $names[] = $name;
    }
    // Assert ranges.
    $this->assertEqual($ranges[0], '0-49');
    $this->assertEqual($ranges[1], '50-59');
    $this->assertEqual($ranges[2], '60-69');
    $this->assertEqual($ranges[3], '70+');
    // Assert range descriptions.
    $this->assertEqual($names[0], 'Certificate is not available');
    $this->assertEqual($names[1], 'Pass');
    $this->assertEqual($names[2], 'Merit');
    $this->assertEqual($names[3], 'Distinction');
    $this->assertEqual(count($names), 4, 'Only 4 ranges exist.');
    
  }
  
  /**
   * Tests for exported feature functions and data returned by them.
   */
  function testFeaturesHookImplementations() {  
    module_load_include('inc', 'course', 'course.features.user_permission');
    $this->assertTrue(function_exists('course_user_default_permissions'), 'Course user permissions exported.');
    
    
  }
  
}