<?php

/**
 * @file course_points.module
 */

/**
 * Implements hook_block_info()
 */
function course_points_block_info() {
  $blocks = array();
  if(module_exists('userpoints')) {
     $blocks['course_total_points'] = array(
       'info' => t('User total points'), 
       'region' => 'menu',
     );
  }
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function course_points_block_view($delta ='') {
  $block = array();
  switch($delta) {
    case 'course_total_points':
      $block['subject'] = t('User points');
      $block['content'] = array(
        '#type' => 'markup',
        '#markup' => userpoints_get_current_points(), 
      );
      
  }
  return $block;
}

/**
 * Implements hook_userpoints().
 * 
 * Prevents account's userpoints from going (further) negative.
 */
function course_points_userpoints($op, &$params) {
  if ($op == 'points before') {
    $current_points = userpoints_get_current_points($params['uid'], $params['tid']);
    course_points_make_positive($params, $current_points);
  }
}

/**
 * Processes transaction's points and changes amount in case of new amount
 * is going to be negative.
 * 
 * @param array $params
 *   Userpoints transaction parameters.
 * 
 * @param integer $current_points
 *   Current user points amount.
 */
function course_points_make_positive(&$params, $current_points) {
  if (isset($params['points'])) {
    $change = $params['points'];
    $new_points = $current_points + $change;
    // If points are going to be negative or negative already amend current
    // transaction's points in order to set points to zero.
    if ($new_points < 0) {
      $params['points'] = -$current_points;
    }
  }
}
