<?php
/**
 * @file
 * lesson.module
 */

include_once 'lesson.features.inc';


/**
 * Implements hook_init()
 */
function lesson_init() {
    $node = menu_get_object('node');
    if($node && $node->type === 'lesson') {
         drupal_add_js(drupal_get_path('module', 'lesson') . '/lesson_youtube_jsapi.js');
    }
}

/**
 * Implements hook_block_info()
 */
function lesson_block_info() {
 
  $block['lesson_lecturer_notes'] = array(
    'info' => 'Lesson Notes',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $block;
}

/**
 * Implementation of hook_block_view()
 */
function lesson_block_view($delta = '') {
  $content = array();
  switch($delta) {
    case 'lesson_lecturer_notes':
      //Lesson Node
      $lesson_node = menu_get_object('node');

      //Placeholder for message. 
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Notes form
      $content['lecturer_notes_form'] = drupal_get_form('lecturer_notes', $lesson_node);


      // Build the block title and contents
      $block['subject'] = '';
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Callback function : Defines form for lecturer notes for lesson page.
 */
function lecturer_notes($form, &$form_state) {
  $lesson_node = $form_state['build_info']['args'][0]; 
  //check if its a lesson node and user has right to update(edit) it.
  if(!($lesson_node->type == 'lesson' && node_access('update', $lesson_node))) { 
    return NULL;
  }

  $form['#prefix'] = '<div id="lecturer-notes-wrapper">';
  $form['#suffix'] = '</div>';
  
  //Get default Values
  $items = field_get_items('node', $lesson_node, 'field_notes');
  $notes = field_view_value('node', $lesson_node, 'field_notes', $items[0]);
  
  $form['notes'] = array(
    '#type' => 'text_format',
    '#attributes' => array('placeholder' => t('Notes')),
    '#rows' => 3,
    '#cols' => 73,
    '#required' => TRUE,
    '#default_value' => render($notes),
    '#format' => NULL, //Default format
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'lecturer_notes_submit_callback',
      'wrapper' => 'lecturer-notes-wrapper',
    ),
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Callback function : Ajax callback function for quick_question form.
 */
function lecturer_notes_submit_callback($form, &$form_state) {
  $lesson_node = $form_state['build_info']['args'][0]; 
  
  //validations
  if (!$form_state['values']['notes']) {
    $message = t('Notes field is required');
    $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text($message));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $lesson_node->field_notes[$lesson_node->language][0]['value'] = $form_state['values']['notes']['value'];
  $lesson_node->field_notes[$lesson_node->language][0]['format'] = $form_state['values']['notes']['format'];
  node_save($lesson_node);

  $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text(t('Notes Saved')));
  return array('#type' => 'ajax', '#commands' => $commands);
}


