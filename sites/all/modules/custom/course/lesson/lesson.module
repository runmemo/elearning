<?php

/**
 * @file
 * lesson.module
 */
include_once 'lesson.features.inc';

function lesson_quicktabs_alter(&$quicktabs) {
  // print_nice($quicktabs);
}

/**
 * Implements hook_init()
 */
function lesson_init() {
  $node = menu_get_object('node');
  if ($node && $node->type === 'lesson') {
    drupal_add_js(drupal_get_path('module', 'lesson') . '/lesson_youtube_jsapi.js');
    drupal_add_js(array('lesson' => array('nid' => $node->nid)), 'setting');
  }

  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_block_info()
 */
function lesson_block_info() {

  $block['lesson_lecturer_notes'] = array(
    'info' => t('Lesson Notes : Lecturer'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $block['lesson_student_notes'] = array(
    'info' => t('Lesson Notes : Student'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $block;
}

/**
 * Implementation of hook_block_view().
 */
function lesson_block_view($delta = '') {
  $content = array();
  switch ($delta) {
    case 'lesson_lecturer_notes':
      //Lesson Node
      $lesson_node = menu_get_object('node');
      // check if there are any notes and user has access to edit it,
      // hide tab, if these conditions are not satisfied
      $notes = field_get_items('node', $lesson_node, 'field_notes');
      if (!$notes && !node_access('update', $lesson_node)) {
        $block['content'] = '';
        break;
      }
      //Placeholder for message.
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Notes form.
      $content['lecturer_notes_form'] = drupal_get_form('lecturer_notes', $lesson_node);


      // Build the block title and contents.
      $block['subject'] = '';
      $block['content'] = $content;
      break;
    case 'lesson_student_notes':
      // Lesson Node.
      $lesson_node = menu_get_object('node');

      // Placeholder for message.
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Notes form.
      $content['student_notes_form'] = drupal_get_form('student_notes', $lesson_node);


      // Build the block title and contents
      $block['subject'] = '';
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Gets nid of notes by user to lesson.
 *
 * @param integer $nid
 *   Lesson's nid.
 * @param integer $uid
 *   User's uid.
 *
 * @return integer
 *   Note's nid for provided lesson.
 */
function lesson_student_notes_created($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  // Get notes created by user for provided lesson.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'notes')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_lesson', 'target_id', $nid)
      ->range(0, 1); // this is just to improve db performance
  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }
  return FALSE;
}

/**
 * Form for student notes.
 */
function student_notes($form, &$form_state) {
  //debug($form_state['step']);
  $form = array();
  $form['#prefix'] = '<div id="student-notes-form-wrapper">';
  $form['#suffix'] = '</div>';

  $nid = 0;
  if (empty($form_state['step'])) {  // page is loaded
    $lesson = menu_get_object('node');
    if ($lesson && $lesson->type === 'lesson' && node_access('create', 'notes')) {
      $nid = $lesson->nid;
      $form_state['lesson_nid'] = $nid;
    }
    else { // this is not a lesson page
      $form['message'] = array(
        '#type' => 'markup',
        '#markup' => t('Please complete your registration by comfirming your e-mail to make notes.'),
      );
      return $form;
    }

    // Check whether user already has a note for this lesson.
    $note_nid = lesson_student_notes_created($nid);
    $form_state['note_nid'] = $note_nid;
    if ($note_nid) {
      $mode = 'view';
    }
    else {
      $mode = 'edit';
    }
    $form_state['step'] = $mode;
  }
  else {
    $note_nid = $form_state['note_nid'];
    $mode = $form_state['step'];
  }

  // build form depending on it's current mode
  switch ($mode) {
    case 'edit' :
      // build form for editing
      $form['edit']['new_note'] = array(
        '#type' => 'textarea',
        '#default_value' => empty($form_state['note_value']) ? '' : $form_state['note_value'],
      );
      $form['edit']['save'] = array(
        '#type' => 'submit',
        '#submit' => array('student_notes_submit'),
        '#value' => t('Save'),
        '#ajax' => array(
          'callback' => 'student_notes_submit_js',
          'wrapper' => 'student-notes-form-wrapper',
          'progress' => array('message' => ''),
        ),
      );
      if (!empty($form_state['note_value'])) {
        // @todo: add cancellation button
      }
      break;
    case 'view':
      if (!empty($form_state['note_value'])) {
        $note_text = $form_state['note_value'];
      }
      else {
        $note = node_load($note_nid);
        $note_text = $note->body[LANGUAGE_NONE][0]['value'];
        $form_state['note_value'] = $note_text;
      }
      // Build form for viewing of saved note.
      $form['view']['edit'] = array(
        '#type' => 'submit',
        '#value' => t('Edit'),
        '#submit' => array('student_notes_submit'),
        '#ajax' => array(
          'callback' => 'student_notes_submit_js',
          'wrapper' => 'student-notes-form-wrapper',
          'progress' => array('message' => ''),
        ),
      );
      $form['view']['note'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class = "student_note">',
        '#suffix' => '</div>',
        '#markup' => $note_text,
      );

      break;
    default :
      $form['bad_state'] = array(
        '#type' => 'markup',
        '#markup' => t('State @mode is not supported by this form.', array('@mode' => $mode)),
      );
  }

  return $form;
}

/**
 * Implements form_submit() hook for student_notes form.
 */
function student_notes_submit($form, &$form_state) {

  $nid = $form_state['lesson_nid'];
  global $user;

  if ($form_state['triggering_element']['#value'] == t('Save')) {
    // User clicked Save button in edit mode.
    if (empty($form_state['note_nid']) || !$form_state['note_nid']) {
      // Its a new note.
      $node = new stdClass();
      $node->type = 'notes';
      node_object_prepare($node);
      $node->title = 'Student note nid#' . $nid . '# uid#' . $user->uid;
      $node->language = LANGUAGE_NONE;
      $node->body[$node->language][0]['value'] = $form_state['values']['new_note'];
      $node->body[$node->language][0]['format'] = 'filtered_html';
      $node->field_lesson[LANGUAGE_NONE][0]['target_id'] = $nid;

      node_save($node);
      $form_state['note_nid'] = $node->nid;
    }
    else { // User changed existing note.
      $node = node_load($form_state['note_nid']);
      $node->body[$node->language][0]['value'] = $form_state['values']['new_note'];
      node_save($node);
    }
    $form_state['note_value'] = $form_state['values']['new_note'];
    $form_state['step'] = 'view';
  }
  // User clicked Edit button in view mode.
  if ($form_state['triggering_element']['#value'] == t('Edit')) {
    $form_state['step'] = 'edit';
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for student notes submit.
 */
function student_notes_submit_js($form, $form_state) {
  return $form;
}

/**
 * Callback function : Defines form for lecturer notes for lesson page.
 */
function lecturer_notes($form, &$form_state) {
  $lesson_node = node_load($form_state['build_info']['args'][0]->nid); // To get rid off old values stored.
  //check if its a lesson node and user has right to update(edit) it.
  //Get default Values
  $items = field_get_items('node', $lesson_node, 'field_notes');
  $notes = field_view_value('node', $lesson_node, 'field_notes', $items[0]);

  $form['#prefix'] = '<div id="lecturer-notes-wrapper">';
  $form['#suffix'] = '</div>';

  if (!($lesson_node->type == 'lesson' && node_access('update', $lesson_node))) {
    $form['notes_markup'] = array(
      '#type' => 'markup',
      '#markup' => render($notes),
      '#prefix' => '<div id="notes-markup">',
      '#suffix' => '</div>'
    );
    return $form;
  }

  if (empty($form_state['step'])) {  // page is loaded
    // check whether user already has left notes
    if (empty($notes['#markup'])) {
      $mode = 'edit';
    }
    else {
      $mode = 'view';
    }
    $form_state['step'] = $mode;
  }
  else {
    $mode = $form_state['step'];
  }

  switch ($mode) {
    case 'edit':
      $form['edit']['notes'] = array(
        '#type' => 'text_format',
        '#attributes' => array('placeholder' => t('Notes')),
        '#rows' => 3,
        '#cols' => 73,
        '#required' => TRUE,
        '#default_value' => render($notes),
        '#format' => NULL, //Default format
      );

      $form['edit']['submit'] = array(
        '#type' => 'submit',
        '#submit' => array('lecturer_notes_submit'),
        '#ajax' => array(
          'callback' => 'lecturer_notes_submit_callback',
          'wrapper' => 'lecturer-notes-wrapper',
        ),
        '#value' => t('Save'),
      );
      return $form;
    case 'view':
      $form['view']['notes_markup'] = array(
        '#type' => 'markup',
        '#markup' => render($notes),
        '#prefix' => '<div id="notes-markup">',
        '#suffix' => '</div>'
      );
      $form['view']['edit'] = array(
        '#type' => 'submit',
        '#ajax' => array(
          'callback' => 'lecturer_notes_submit_callback',
          'wrapper' => 'lecturer-notes-wrapper',
        ),
        '#value' => t('Edit'),
      );
      return $form;
  }
}

/**
 * Callback function : Ajax callback function for lecturer_notes form.
 */
function lecturer_notes_submit($form, &$form_state) {
  $lesson_node = $form_state['build_info']['args'][0];
  if ($form_state['triggering_element']['#value'] == t('Save')) {
    //validations
    if (!$form_state['values']['notes']) {
      $message = t('Notes field is required');
      $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text($message));
      return array('#type' => 'ajax', '#commands' => $commands);
    }
    $lesson_node->field_notes[LANGUAGE_NONE][0]['value'] = $form_state['values']['notes']['value'];
    $lesson_node->field_notes[LANGUAGE_NONE][0]['format'] = $form_state['values']['notes']['format'];
    node_save($lesson_node);
    $form_state['step'] = 'view';
  }
  // User clicked Edit button in view mode.
  if ($form_state['triggering_element']['#value'] == t('Edit')) {
    $form_state['step'] = 'edit';
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for lecturer notes submit
 */
function lecturer_notes_submit_callback($form, $form_state) {
  return $form;
}

/**
 * Implementation of hook_rules_event_info()
 */
function lesson_rules_event_info() {
  return array(
    'lesson_complete' => array(
      'label' => t('Lesson complete'),
      'module' => 'lesson',
      'group' => 'Course',
      'variables' => array(
        'current_user' => array('type' => 'user', 'label' => t('The current logged in user.')),
        'lesson' => array('type' => 'node', 'label' => t('The lesson node.')),
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lesson_menu() {
  $items = array();

  $items['lesson/video-complete'] = array(
    'title' => 'AJAX callback - Lesson complete action',
    'page callback' => 'lesson_complete',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback - Lesson complete action.
 */
function lesson_complete($action, $type) {
  if ($type != 'ajax') {
    // This is js only.
    return;
  }
  global $user;
  $nid = arg(3);
  $lesson = node_load($nid);
  if ($user->uid) {
    rules_invoke_event('lesson_complete', $user, $lesson);
  }
  exit;
}

/**
 * Form for creation of new lessons.
 */
function lesson_add_form($form, &$form_state, $course = NULL) {
  if (!$course) {
    $course = $form_state['course'];
  }

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="quick-lesson-wrapper">',
    '#suffix' => '</div>',
  );

  $form['fields']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Lesson title'),
    '#required' => TRUE
  );

  $form['fields']['video_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Youtube URL'),
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'lesson_submit_video_url_js',
      'wrapper' => 'video-thumbnail-wrapper',
      'progress' => 'throbber',
    ),
  );

  $form['fields']['video_thumb'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="video-thumbnail-wrapper">',
    '#suffix' => '</div>',
    '#markup' => '',
  );

  $form['fields']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#states' => array(
      'enabled' => array(
        ':input[name="title"]' => array('filled' => TRUE),
        ':input[name="video_url"]' => array('filled' => TRUE),
      ),
    ),
  );

  // @todo : lesson_form.js causes problems if ajax is used anywhere else,
  // enable less watch mode to see effect.
 
  return $form;
}

/**
 * Checks whether given url matches format of hosting website.
 *
 * @see media_youtube module.
 *
 * @param string $url url to the video on the hosting website.
 *
 * @return boolean
 *   Returns true if url matches format of YouTube video.
 */
function lesson_valid_url($url) {

  $patterns = array(
    '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/embed/([^"\&\? ]+)@i',
    '@youtube\.com/v/([^"\&\? ]+)@i',
    '@youtube\.com/\?v=([^"\& ]+)@i',
    '@youtu\.be/([^"\&\? ]+)@i',
    '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
  );
  foreach ($patterns as $pattern) {
    preg_match($pattern, $url, $matches);
    if (isset($matches[1])) {
      return TRUE;
    }
  }
  return FALSE;
}

function lesson_get_youtube_media($url) {
  $youtube_handler = new MediaInternetYouTubeHandler($url);
  $media = $youtube_handler->getFileObject($url);
  return $media;
}

function lesson_submit_video_url_js($form, $form_state) {
  // If there are errors, return the form to display the error messages

  $video_url = $form_state['values']['video_url'];
  // Check that url has correct YouTube format.
  if (!lesson_valid_url($video_url)) {
    $form['fields']['video_thumb']['#markup'] = t('Please provide a valid YouTube url.');
  }
  else {
    try {
      $media = lesson_get_youtube_media($video_url);
      // Get Thumbnail for a video.
      $youtube_stream = new MediaYouTubeStreamWrapper($media->uri);
      $youtube_stream->setUri($media->uri);
      $form['fields']['video_thumb']['#markup'] =
          theme('image_style', array(
        'style_name' => 'thumbnail',
        'path' => $youtube_stream->getLocalThumbnailPath()));
    } 
    catch (Exception $e) 
    {
      $form['fields']['video_thumb']['#markup'] =  $e->getMessage();
    }
  }

  return $form['fields']['video_thumb'];
}

function lesson_add_form_validate($form, &$form_state) {
  $video_url = $form_state['values']['video_url'];
  if (!lesson_valid_url($video_url)) {
    form_error($form['fields']['video_url'], t('Please provide a valid YouTube url.'));
  }
  try {
    // Save media object of video.
    $media = lesson_get_youtube_media($video_url);
    $form_state['storage']['media'] = $media;
  } catch (Exception $e) {
    form_error($form['fields']['video_url'], $e->getMessage());
  }
}

function lesson_add_form_submit($form, &$form_state) {
  if (empty($form_state['ajax'])) {
    $course = $form_state['build_info']['args'][0];
  }
  else {
    $course = $form_state['course'];
  }

  // Get unit to which lesson will be added.
  $course_items = course_get_items($course, TRUE);
  $unit_nid = array_search('unit', $course_items);
  $unit = menu_get_object('node', 1, 'node/' . $unit_nid);

  $title = $form_state['values']['title'];
  $media = $form_state['storage']['media'];

  lesson_create($title, $media->fid, $unit);

  // Clear outline cache.
  course_items_clear_cache($course->nid);
}

/**
 * Adds new lesson node to the unit.
 *
 * @param string $title
 * @param integer $video
 *
 * @param object $unit unit to which lesson will be added.
 *
 * @return integer
 */
function lesson_create($title, $video, $unit) {
  $node = new stdClass();
  $node->type = 'lesson';
  node_object_prepare($node);
  $node->title = $title;
  $node->field_video = array(LANGUAGE_NONE => array(array('fid' => $video, 'display' => 1,),),);
  $node->language = $unit->language;
  $node->book['bid'] = $unit->book['bid'];
  $node->book['plid'] = $unit->book['mlid'];
  node_save($node);
  return $node->nid;
}