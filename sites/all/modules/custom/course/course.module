<?php

/**
 * @file course.module
 * Code for the Course module.
 */

include_once 'course.features.inc';

/**
 * Implements hook_init()
 */
function course_init() {
  
  $node = menu_get_object('node');
  
  // Redirect to fist lesson from unit content type page
  if ($node && $node->type === 'unit') {
    $book_link = $node->book;
    $next = book_next($book_link);
    drupal_goto($next['link_path'], array(), 301);
  }
}

/**
 * Gets node last visited by the user
 * @todo test case
 */
function course_last_visited_node($nid) {
  global $user;
  
  if ($user->uid == 0) {
    return $nid;
  }
  
  $sql = 'SELECT h.nid AS nid 
          FROM history h 
          INNER JOIN book b ON h.nid = b.nid
          INNER JOIN book c ON b.bid = c.bid
          INNER JOIN menu_links ml ON ml.mlid = b.mlid
          WHERE 
            c.nid = :nid
            AND h.uid = :uid
            AND ml.plid != 0
          ORDER BY h.timestamp DESC
          LIMIT 1';
  
  $result = db_query($sql, array(':nid' => $nid, ':uid' => $user->uid));
  
  foreach ($result as $record) {
    return $record->nid;
  }
  // user did not open any content this course
  return FALSE;
}

/**
 *
 * implements hook_block_info()
 */
function course_block_info() {
  $blocks['registration_form'] = array(
    'info' => t('Course registertion form'), 
  );
  // Temporary block for displaying notifications count
  $blocks['user_notifications_count'] = array(
    'info' => t('User notifications count'), 
  ); 
  return $blocks;
}

/**
 *
 * implements hook_block_view()
 */
function course_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'registration_form':
      return registration_form_block();
    case 'user_notifications_count':
      $block = array();
      $block['subject'] = '';
      $block['content'] = array(
        '#type' => 'markup',
        '#markup' => '17', 
      );
      return $block;
  }
}

/**
 * Gets the href to the first node of specified type in the book
 * @param string $node_type bundle name of the node href of is needed
 * @return href of the node
 */
function course_first_node_href($node_type, $book = NULL) {
   if(is_null($book)) {
      $book = course_node_book();
   }
   if(!$book) {
     return FALSE;
   }
   $item = $book;
   do {
     $node = menu_get_object('node', 1, $item['link_path']);
     if($node->type === $node_type) {
       return $item['href'];
     }
     $item = book_next($item);
   } while($item);
   return FALSE;
}

/**
 * Checks to see if current node is part of a book.
 * Returns book array if it is part of a book, FALSE is not.
 */
function course_node_book() {
  $node = menu_get_object();
  if ($node && isset($node->book)) {
    return $node->book;
  }
  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 * @param type $items
 */
function course_menu_alter(&$items) {
  $items['user']['title callback'] = 'course_user_menu_title';
}

/**
 * Custom menu title callback in order to show proper title for anonymous users.
 * @global type $user
 * @return string
 */
function course_user_menu_title() {
  global $user;
  $title = t('Login');
  if ($user->uid > 0) {
    $title = $user->name;
    $title .= ' (' . token_replace('[site:current-user:points:all]', array('user' => $user)) . ')';
  }
  return $title;
}

/**
 * Implements hook_node_view().
 */
function course_node_view($node, $view_mode) {
  //unset Book Links
  unset($node->content['links']['book']);
}
