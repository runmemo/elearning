<?php

/**
 * @file course.module
 * Code for the Course module.
 */

include_once 'course.features.inc';

/**
 * Implements hook_init()
 */
function course_init() {
  
  $node = menu_get_object('node');
  
  // Redirect to fist lesson from unit content type page
  if ($node && $node->type === 'unit') {
    $book_link = $node->book;
    $next = book_next($book_link);
    drupal_goto($next['link_path'], array(), 301);
  }
}

/**
 * Gets node last visited by the user
 * @todo test case
 * @param integer $nid id of the node in the book in which
 *                     we will look for last visited node.
 */
function course_last_visited_node($nid) {
  global $user;
  
  if ($user->uid == 0) {
    return $nid;
  }
  
  $sql = 'SELECT h.nid AS nid 
          FROM {history} h 
          INNER JOIN {book} b ON h.nid = b.nid
          INNER JOIN {book} c ON b.bid = c.bid
          INNER JOIN {menu_links} ml ON ml.mlid = b.mlid
          WHERE 
            c.nid = :nid
            AND h.uid = :uid
            AND ml.plid != 0
          ORDER BY h.timestamp DESC
          LIMIT 1';
  
  $result = db_query($sql, array(':nid' => $nid, ':uid' => $user->uid));
  
  foreach ($result as $record) {
    return $record->nid;
  }
  // user did not open any content this course
  return FALSE;
}

/**
 *
 * implements hook_block_info()
 */
function course_block_info() {
  $blocks['registration_form'] = array(
    'info' => t('Course registertion form'), 
  );
  // Temporary block for displaying notifications count
  $blocks['user_notifications_count'] = array(
    'info' => t('User notifications count'), 
  );
  // Block for displaying book header
  $blocks['book_header'] = array(
    'info' => t('Book Header'), 
  );
  return $blocks;
}

/**
 *
 * implements hook_block_view()
 */
function course_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'book_header':
      return book_header_block();
    case 'registration_form':
      return registration_form_block();
    case 'user_notifications_count':
      $block = array();
      $block['subject'] = '';
      $block['content'] = array(
        '#type' => 'markup',
        '#markup' => '17', 
      );
      return $block;
  }
}

/**
 * Gets the href to the first node of specified type in the book
 * @param string $node_type bundle name of the node href of is needed
 * @return href of the node
 */
function course_first_node_href($node_type, $book = NULL) {
   if(is_null($book)) {
      $book = course_node_book();
   }
   if(!$book) {
     return FALSE;
   }
   $item = $book;
   do {
     $node = menu_get_object('node', 1, $item['link_path']);
     if($node->type === $node_type) {
       return $item['href'];
     }
     $item = book_next($item);
   } while($item);
   return FALSE;
}

/**
 * Checks to see if current node is part of a book.
 * Returns book array if it is part of a book, FALSE is not.
 */
function course_node_book() {
  $node = menu_get_object();
  if ($node && isset($node->book)) {
    return $node->book;
  }
  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 * @param type $items
 */
function course_menu_alter(&$items) {
  $items['user']['title callback'] = 'course_user_menu_title';
}

/**
 * Custom menu title callback in order to show proper title for anonymous users.
 * @global type $user
 * @return string
 */
function course_user_menu_title() {
  global $user;
  $title = t('Login');
  if ($user->uid > 0) {
    $title = $user->name;
    $title .= ' (' . token_replace('[site:current-user:points:all]', array('user' => $user)) . ')';
  }
  return $title;
}

/**
 * Implements hook_theme().
 */
function course_theme() {
  return array(
    'book_header' => array(
      'variables' => array('book_link' => NULL),
      'template' => 'book-header',
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function course_node_view($node, $view_mode) {
  //unset Book Links
  unset($node->content['links']['book']);
}

/**
 * Gets corresponding book for a node.
 * @return array An array, representing "Book Header" block.
 */
function book_header_block() {
  $block = array(); 
  $node = menu_get_object('node');
  if (isset($node->field_question_path[$node->language][0]['value']) && !empty($node->field_question_path[$node->language][0]['value'])) {
    $lesson_path = explode('/', $node->field_question_path[$node->language][0]['value']);
    if (isset($lesson_path[1])) {
      $lesson = node_load($lesson_path[1]);
    }
  }
  if (isset($node->book)) {
    $book = $node->book;
  } elseif (isset($lesson->book)) {
    $book = $lesson->book;
  } else {
    $book = FALSE;
  }
  // Build the block title and contents
  if ($book) {
    $block['subject'] = '';
    $block['content'] = theme('book_header', array('book_link' => $book, 'question_page' => TRUE));
  }
  return $block;
}

/**
 * Processes variables for book_header.
 *
 * The $variables array contains the following elements:
 * - book_link
 */
function template_preprocess_book_header(&$vars) {
  $book_link = $vars['book_link'];
  $course_node = node_load($book_link['bid']);

  // course title
  $vars['course_title'] = $course_node->title;
  // provider logo and name
  $provider = field_get_items('node', $course_node, 'field_provider');
  if(isset($provider[0])) {
    $provider = node_load($provider[0]['target_id']);
    if(!empty($provider->field_logo)) {
      $filename = $provider->field_logo['und'][0]['filename'];
      $image_uri = file_build_uri($filename);
      $vars['provider_logo'] = theme('image_style', array('style_name' => 'provider_logo', 'path' => $image_uri));
    }
  }
  // teacher logo and name
  $teacher = field_get_items('node', $course_node, 'field_teacher');
  if (isset($teacher[0])) {
    $teacher = user_load($teacher[0]['uid']);
    $name = field_get_items('user', $teacher, 'field_name');
    $name = field_view_value('user', $teacher, 'field_name', $name[0]);
    $surname = field_get_items('user', $teacher, 'field_surname');  
    $surname = field_view_value('user', $teacher, 'field_surname', $surname[0]);
    $vars['teacher_name'] = render($name);
    $vars['teacher_surname'] = render($surname);
  }
  if (isset($vars['question_page'])) {
    $vars['lesson_link'] = l(t('Return to class'), $book_link['href'], array('attributes' => array('class' => array('node-question-return-link'))));
  }
  
}

/**
 * Implementation of hook_views_pre_render().
 * @param type $view
 */
function course_views_pre_render(&$view) {
  if ($view->name == 'user_courses') {
    if (!empty($view->result)) {
      foreach ($view->result as $id => $course) {
        if (is_numeric($course->node_registration_nid)) {
          // get path for the "Continue" link on Profile page
          $last_nid = course_last_visited_node($course->node_registration_nid);
          $path = '';
          if ($last_nid) {
            $path = 'node/' . $last_nid;
          } else {
            $node = node_load($course->node_registration_nid);
            $next = book_next($node->book);
            $path = $next['link_path'];
          }
          $view->result[$id]->continue_link = l(t('Continue'), $path, array('attributes' => array('class' => 'user-course-continue')));
          // temporary put random percentage of course completeness
          //  @todo: add real function or provide field.
          $view->result[$id]->course_progress = course_get_progress($course->node_registration_nid);
        }
      }
    }
  }
}

/**
 * Get course progress
 */
function course_get_progress($course_nid = 0, $account = NULL) { 
  if(!$course_nid) {
    return; //Course needs to be passed.
  }
  if(!$account) {
    global $user;
    $account = $user;
  }
  $course = node_load($course_nid);
  $tree = menu_tree_all_data($course->book['menu_name'], NULL, 3);
  $tree_key = key($tree);
  if(isset($tree[$tree_key]['below'])){
    $tree = $tree[$tree_key]['below'];
    $lesson_items = 0;
    $lesson_items_completed = 0;

    foreach ($tree as &$unit) { 
      if(!isset($unit['below'])) { 
        continue;
      }
      foreach ($unit['below'] as &$lesson) { 
        $lesson_items++; 
        // @todo: check for performance issues
        $node = menu_get_object('node', 1, $lesson['link']['link_path']); //@todo : Pass nid instead of Node.
        $flag = flag_get_flag('course_item_complete');
        if($flag->is_flagged($node->nid, $account->uid)) {
          $lesson_items_completed++;
        }
      }
    }  
    if($lesson_items_completed > 0 && $lesson_items > 0) {
      return round(($lesson_items_completed/$lesson_items) * 100) ;
    }
  }
  return 0;
}
