<?php

/**
 * @file course.module
 * Code for the Course module.
 */
include_once 'course.features.inc';

/**
 * Implements hook_init()
 */
function course_init() {

  $node = menu_get_object('node');

  // Redirect to fist lesson from unit content type page
  if ($node && $node->type === 'unit') {
    $book_link = $node->book;
    $next = book_next($book_link);
    drupal_goto($next['link_path'], array(), 301);
  }
}

/**
 * Gets node last visited by the user
 * @todo test case
 * @param integer $nid id of the node in the book in which
 *                     we will look for last visited node.
 */
function course_last_visited_node($nid) {
  global $user;

  if ($user->uid == 0) {
    return $nid;
  }

  $sql = 'SELECT h.nid AS nid 
          FROM {history} h 
          INNER JOIN {book} b ON h.nid = b.nid
          INNER JOIN {book} c ON b.bid = c.bid
          INNER JOIN {menu_links} ml ON ml.mlid = b.mlid
          WHERE 
            c.nid = :nid
            AND h.uid = :uid
            AND ml.plid != 0
          ORDER BY h.timestamp DESC
          LIMIT 1';

  $result = db_query($sql, array(':nid' => $nid, ':uid' => $user->uid));

  foreach ($result as $record) {
    return $record->nid;
  }
  // user did not open any content this course
  return FALSE;
}

/**
 *
 * implements hook_block_info()
 */
function course_block_info() {
  $blocks['registration_form'] = array(
    'info' => t('Course registertion form'),
  );
  // Temporary block for displaying notifications count
  $blocks['user_notifications_count'] = array(
    'info' => t('User notifications count'),
  );
  // Block for displaying book header
  $blocks['book_header'] = array(
    'info' => t('Course Header'),
  );
  return $blocks;
}

/**
 *
 * implements hook_block_view()
 */
function course_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'book_header':
      return course_header_block();
    case 'registration_form':
      return registration_form_block();
    case 'user_notifications_count':
      $block = array();
      $block['subject'] = '';
      $block['content'] = array(
        '#type' => 'markup',
        '#markup' => '17',
      );
      return $block;
  }
}

/**
 * Gets the href to the first node of specified type in the book
 * @param string $node_type bundle name of the node href of is needed
 * @return href of the node
 */
function course_first_node_href($node_type, $book = NULL) {
  if (is_null($book)) {
    $book = course_node_book();
  }
  if (!$book) {
    return FALSE;
  }
  $item = $book;
  do {
    $node = menu_get_object('node', 1, $item['link_path']);
    if ($node->type === $node_type) {
      return $item['href'];
    }
    $item = book_next($item);
  } while ($item);
  return FALSE;
}

/**
 * Checks to see if current node is part of a book.
 * Returns book array if it is part of a book, FALSE is not.
 */
function course_node_book() {
  $node = menu_get_object();
  if ($node && isset($node->book)) {
    return $node->book;
  }
  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 * @param type $items
 */
function course_menu_alter(&$items) {
  $items['user']['title callback'] = 'course_user_menu_title';
}

/**
 * Custom menu title callback in order to show proper title for anonymous users.
 * @global type $user
 * @return string
 */
function course_user_menu_title() {
  global $user;
  $title = t('Login');
  if ($user->uid > 0) {
    $title = $user->name;
    $title .= ' (' . token_replace('[site:current-user:points:all]', array('user' => $user)) . ')';
  }
  return $title;
}

/**
 * Implements hook_theme().
 */
function course_theme() {
  return array(
    'book_header' => array(
      'variables' => array('book_link' => NULL),
      'template' => 'book-header',
    ),
    'course_exit_modal' => array(
      'variables' => array('vars' => NULL),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function course_node_view($node, $view_mode) {
  //unset Book Links
  hide($node->content['links']['book']);

  if (!course_is_item_node($node)) {
    return;
  }

  if ($view_mode == 'full' && node_is_page($node)) {
    global $user;
    // find whether user has permission to see this node.
    $access = course_user_access($node, $user);
    $context_access = 'none';
    if (isset($access)) { // content is part of the course
      if ($access) {
        $context_access = 'true';
      }
      else { // user does not have access to course item
        hide($node->content);
        $context_access = 'false';
      }
    }
    // set condition for course_access plugin
    if ($plugin = context_get_plugin('condition', 'course_access')) {
      $plugin->execute($context_access);
    }
  }
}

/**
 * Gets corresponding book for a node.
 * @return array An array, representing "Book Header" block.
 */
function course_header_block() {
  $block = array();
  $node = menu_get_object('node');
  if (!$node) {
    watchdog('block header', t('Block with header of the course was shown in the wrong place.'), array(), WATCHDOG_WARNING);
    return $block;
  }

  $question_page = FALSE;
  $book = FALSE;

  if ($node->type === 'question') {
    $question_paths = field_get_items('node', $node, 'field_question_path');
    if ($question_paths) {
      $item_nid = str_ireplace('node/', '', $question_paths[0]['value']);
      $item = node_load($item_nid);
      if ($item) {
        $book = isset($item->book) ? $item->book : FALSE;
        $question_page = TRUE;
      }
      else { // node notfound
        return $block;
      }
    }
    else { // question is not related to any page
      return $block;
    }
  }
  else { // other content types
    $book = isset($node->book) ? $node->book : FALSE;
  }

  // Build the block title and contents
  if ($book) {
    $block['subject'] = '';
    $block['content'] = theme('book_header', array('book_link' => $book, 'question_page' => $question_page));
  }
  return $block;
}

/**
 * Processes variables for book_header.
 *
 * The $variables array contains the following elements:
 * - book_link
 */
function template_preprocess_book_header(&$vars) {
  $book_link = $vars['book_link'];
  $course_node = node_load($book_link['bid']);

  // course title
  $vars['course_title'] = $course_node->title;
  // provider logo and name
  $vars['provider_logo'] = '<div class="provider-logo-default"></div>';

  $provider = field_get_items('node', $course_node, 'field_provider');
  if ($provider) {
    $provider_node = node_load($provider[0]['target_id']);
    $vars['provider_logo'] = field_view_field('node', $provider_node, 'field_logo', array('settings' =>
       array('image_style' => 'provider_logo')));
  }
  // teacher logo and name
  $teacher = field_get_items('node', $course_node, 'field_teacher');
  if ($teacher) {
    $teacher_account = user_load($teacher[0]['uid']);
    // @todo barinder can you please do this with field_view_field instead of getting raw field values
    // not big deal in this case but will be better to do it this way accross the project.
    $name = field_view_field('user', $teacher_account, 'field_name', array('label' => 'hidden',));
    $surname = field_view_field('user', $teacher_account, 'field_surname', array('label' => 'hidden'));
    $vars['teacher_name'] = render($name);
    $vars['teacher_surname'] = render($surname);
  }
  else {
    // provide default values for teacher name variables:
    $vars['teacher_name'] = '';
    $vars['teacher_surname'] = '';
  }
  if ($vars['question_page'] == TRUE) {
    $vars['lesson_link'] = l(t('Return to class'), $book_link['href'], array('attributes' => array('class' => array('node-question-return-link'))));
  }
  else {
    $vars['lesson_link'] = '';
  }
}

/**
 * Implementation of hook_views_pre_render().
 * @param type $view
 */
function course_views_pre_render(&$view) {
  if ($view->name != 'user_courses' || empty($view->result)) {
    return NULL; // wrong view or view is empty;
  }

  global $user;
  // Course exit confirmation uses ctools modal.
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  //Add our own settings for styling exit modal.
  course_exit_modal_style();
  foreach ($view->result as $id => $course) {
    if (!is_numeric($course->node_registration_nid)) {
      continue;
    }
    // get path for the "Continue" link on Profile page
    $last_nid = course_last_visited_node($course->node_registration_nid);
    $path = '';
    if ($last_nid) {
      $path = 'node/' . $last_nid;
    }
    else {
      $node = node_load($course->node_registration_nid);
      $next = book_next($node->book);
      $path = $next['link_path'];
    }
    $view->result[$id]->continue_link = l(t('Continue'), $path, array('attributes' => array('class' => 'user-course-continue')));
    $view->result[$id]->exit_link = ctools_modal_text_button('<span></span>', "course-exit/nojs/{$user->uid}/{$course->node_registration_nid}", t('Exit Course'), 'ctools-modal-course-exit-style user-course-exit');
    $view->result[$id]->course_progress = course_get_progress($course->node_registration_nid);
  }
}

/**
 * Get course progress
 * @param integer $course_nid nid of the course node
 * @param object $account account of the user for who we check progress
 * @return integer Progress of course completion in percents of total course items
 */
function course_get_progress($course_nid = FALSE, $account = FALSE) {
  if (!$course_nid) {
    return; //Course needs to be passed.
  }
  if (!$account) {
    global $user;
    $account = $user;
  }
  $course = node_load($course_nid);
  $tree = menu_tree_all_data($course->book['menu_name'], NULL, 3);
  $tree_key = key($tree);
  if (isset($tree[$tree_key]['below'])) {
    return 0;
  }
  $tree = $tree[$tree_key]['below'];
  $counter = new multi_counter();
  $flag = flag_get_flag('course_item_complete');
  foreach ($tree as $unit) {
    if (!isset($unit['below'])) {
      continue;
    }
    foreach ($unit['below'] as $item) {
      $counter->increment('items');
      $nid = str_ireplace('node/', '', $item['link']['link_path']);
      if ($flag->is_flagged($nid, $account->uid)) {
        $counter->increment('completed');
      }
    }
  }
  if ($counter->current('items') != 0) {
    return round(($counter->current('completed') / $counter->current('items')) * 100);
  }

  return 0;
}

function course_is_item_node($node) {
  return in_array($node->type, course_item_node_types());
}

/**
 * Gets content types that are supported as items of the course.
 * @return array
 */
function course_item_node_types() {

  $items = &drupal_static(__FUNCTION__);

  if (!isset($items)) {
    // array that matches modules to content types that they add
    $modules = array(
      'lesson' => 'lesson',
      'quiz' => 'quiz',
      'open_question' => 'open_question',
      'closedquestion' => 'closedquestion');
    $items = array();

    // add content types provided by modules
    foreach ($modules as $module => $bundle) {
      if (module_exists($module)) {
        $items[] = $bundle;
      }
    }
  }

  return $items;
}

/**
 *  Implements of hook_menu()
 */
function course_menu() {
  $items['course-exit/%ctools_js/%user/%node'] = array(
    'title' => 'Exit Course',
    'page arguments' => array(1, 2, 3),
    'page callback' => 'course_exit_modal',
    'access callback' => 'user_edit_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['course-exit-action/%ctools_js/%/%user/%node'] = array(
    'title' => 'Action',
    'page arguments' => array(1, 2, 3, 4),
    'page callback' => 'course_exit_action',
    'access callback' => 'user_edit_access',
    'access arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function course_exit_action($js = NULL, $action = 'cancel', $user = NULL, $course = NULL) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_include('modal');
  $commands = array();

  switch ($action) {
    case 'cancel':
      $commands[] = ctools_modal_command_dismiss();
      break;
    case 'exit':
      if (registration_cancel($user->uid, $course->nid)) {
        drupal_set_message(t('Successful de-registered from course.'));
      }
      else {
        drupal_set_message('No registration was found, looks like list of cousrse is wrong', 'error');
      }
      $commands[] = ctools_ajax_command_reload();
      break;
  }

  print ajax_render($commands);
  exit;
}

function course_exit_modal($js = NULL, $user = NULL, $course = NULL) {
  if ($course == NULL || $user == NULL) {
    return 'Error :: No course node or user uid.';
  }
  if (!$js) {
    //@todo bulat : Do we need to support non-js calls also ?
    return;
  }
  else {
    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');
  }

  return ctools_modal_render(t('Confirmation'), theme('course_exit_modal', array('uid' => $user->uid, 'course' => $course)));
}

function theme_course_exit_modal($vars) {
  $output = '';
  $output .= '<div class="course-title">';
  $output .= t('Are you sure you wants to leave course : @course_title?', array('@course_title' => $vars['course']->title));
  $output .= '</div>';
  $output .= '<div class="course-actions">';
  $output .= '<div class="course-exit-action">';
  $output .= ctools_ajax_text_button(t('Yes, leave'), "course-exit-action/nojs/exit/{$vars['uid']}/{$vars['course']->nid}", t('Yes'));
  $output .= '</div>';
  $output .= '<div class="course-cancel-action">';
  $output .= ctools_ajax_text_button(t('Cancel'), "course-exit-action/nojs/cancel/{$vars['uid']}/{$vars['course']->nid}", t('Cancel'));
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

function course_exit_modal_style() {
  // Create our own javascript that will be used to theme a modal.
  $throbber = drupal_get_path('theme', 'elearning') . '/images/throbber.gif';
  $course_exit = array(
    'course-exit-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 380,
        'height' => 160,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CourseExit',
      'closeText' => 'x',
      'throbber' => theme('image', array('path' => $throbber, 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  // Add the settings array defined above to Drupal 7's JS settings:
  drupal_add_js($course_exit, 'setting');
  // The function below assumes the course_exit.modal.js file resides in [module_dir]/js
  drupal_add_js(drupal_get_path('module', 'course') . '/course_exit.modal');
}

/**
 *  Implements of hook_node_access()
 */
function course_node_access($node, $op, $account) {
  if (($op == 'update' || $op == 'delete') && course_is_item_node($node)) {
    global $user;
    if (course_is_teacher($node->book['bid'], $user->uid)) {
      return NODE_ACCESS_ALLOW;
    }
    return NODE_ACCESS_DENY;
  }
}

/**
 * Checks if uid is course teacher
 */
function course_is_teacher($course_nid = NULL, $uid = NULL) {
  if ($course_nid && $uid) {
    $course = node_load($course_nid);
    // @todo barinder user field_get_items() and check if value exists
    $teacher = $course->field_teacher['und'][0]['uid'];
    if ($teacher == $uid) {
      return TRUE;
    }
  }
  return FALSE;
}
