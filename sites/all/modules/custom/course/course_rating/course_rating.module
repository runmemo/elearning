<?php
/**
 * @file
 * Code for the Course Rating feature.
 */

/**
 * Implements hook_views_api().
 */
function course_rating_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'course_rating') . '/views',);
}

/**
 *  Implements hook_menu() for course module.
 */
function course_rating_menu() {
  $items = array();
  $items['rate-course/%node/%user'] = array(
    'title' => 'Rate this course',
    'page callback' => 'course_rating_page',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'modal' => TRUE,
    'file' => 'course_rating.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function course_rating_entity_info() {
  $return['course_rating'] = array(
    'label' => t('Course rating'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'CourseRating',
    'controller class' => 'CourseRatingController',
    'base table' => 'course_rating',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'rating_id',
    ),
    // Bundles are defined by the rating types below
    'bundles' => array(
      'Rating' => array(
        'label' => 'Course rating ',
        'admin' => array(
          'path' => 'admin/structure/course_rating/manage',
          'access arguments' => array('administer postits'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'course_rating_create',
    //'access callback' => 'course_rating_access',
    'module' => 'course_rating',
    // The information below is used by the RegistrationUIController (which extends the EntityDefaultUIController)
   // 'admin ui' => array(
   //   'path' => 'admin/content/course_ratings',
  //    'file' => 'registration.admin.inc',
  //    'controller class' => 'CourseRatingUIController',
  //    'menu wildcard' => '%course_rating',
  //  ),
  );
  return $return;
}

/**
 * Create a rating object.
 */
function course_rating_create($values = array()) {
  return entity_get_controller('course_rating')->create($values);
}

function course_rating_load($rating_id, $reset = FALSE) {
  $ratings = course_rating_load_multiple(array($rating_id), array(), $reset);
  return reset($ratings);
}

function course_rating_load_multiple($rating_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('course_rating', $rating_ids, $conditions, $reset);
}

/**
 * Implements hook_field_formatter_info().
 */
function course_rating_field_formatter_info() {
  return array(
    'course_rating_fivestar_formatter' => array(
      'label' => t('Course rating formatter'),
      'field types' => array('fivestar'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function course_rating_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $element = array();
  if ($display['type'] == 'course_rating_fivestar_formatter') {
    $element[0] = array(
      '#markup' => $items[0]['average'] > 0 ? number_format($items[0]['average'] / 10, 1, '.', ' ') : '0.0',
    );
  }
  return $element;
}

/**
 * Implements hook_block_info().
 */
function course_rating_block_info() {
  $blocks['course_rating_form'] = array(
    'info' => t('Course Rating Form'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function course_rating_block_view($delta = '') {
  if ($delta == 'course_rating_form') {
    return course_rating_form_block();
  }
}

/**
 * Block with course rating form link.
 */
function course_rating_form_block() {
  $node = menu_get_object('node');
  if (!node_access('view', $node)) {
    return FALSE;
  }
  global $user;
  if (!registration_view_access($node, $user)) {
    return FALSE;
  }
  $course_nid = isset($node->book['bid']) ? $node->book['bid'] : 0;
  $block = array();
  $block['subject'] = '';
  $block['content'][] = array(
    '#type' => 'markup',
    '#markup' => l(t('Rate this course'), 'rate-course/' . $course_nid . '/' . $user->uid, array('attributes' => array('class' => array('course-rate-link', 'ctools-modal-common-modal-style')))),
  );
  
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function course_rating_form_fivestar_custom_widget_alter(&$form, &$form_state, $form_id) {
if (isset($form_state['build_info']['args'][1]['entity']->type) && $form_state['build_info']['args'][1]['entity']->type == 'course') {
    $course_nid = $form_state['build_info']['args'][1]['content_id'];
    $form_state['course_nid'] = $course_nid;
    global $user;

    if (isset($form_state['storage']['rating_nid'])) {
      $rating_nid = $form_state['storage']['rating_nid'];
    }
    else {
      $rating_nid = course_rating_reviewed($course_nid, $user->uid);
      $form_state['storage']['rating_nid'] = $rating_nid;
    }

    if ($rating_nid) {
      $rating = course_rating_load($rating_nid);
      if ($rating) {
        $form_state['storage']['rating_nid'] = $rating_nid;
        $form_state['storage']['mode'] = 'update';
        $review = $rating->review;
      } else {
        $form_state['storage']['rating_nid'] = FALSE;
        $form_state['storage']['mode'] = 'insert';
        watchdog('course_rating', 'Course rating object seems to not exist during update. Course ID - %course_nid, Object ID - %rating_nid, User ID - %uid', array('%course_nid' => $form_state['course_nid'], '%rating_nid' => $form_state['storage']['rating_nid'], '%uid' => $user->uid), WATCHDOG_WARNING);
      }
    }
    else {
      $form_state['storage']['mode'] = 'insert';
    }
    $form['#submit'][] = 'course_rating_fivestar_custom_widget_form_submit';
    $form['#prefix'] = '<div id="course-rating-form-wrapper">';
    $form['#suffix'] = '</div>';
    $form['#attributes']['class'][] = 'course-rating-form';
    $form['vote']['#auto_submit'] = FALSE;
    $form['vote']['#settings']['autosubmit'] = FALSE;
    $form['fivestar_submit']['#weight'] = 11;
    $form['fivestar_submit']['#ajax'] = array(
      'callback' => 'course_rating_fivestar_form_js',
      'wrapper' => 'course-rating-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    $form['review'] = array(
      '#type' => 'textarea',
      '#title' => '',
      '#required' => FALSE,
      '#default_value' => isset($review) ? $review : '',
      '#attributes' => array(
        'placeholder' => t('Enter your comment'),
      ),
      '#suffix' => '<div class="form-section-separator"></div>',
      '#weight' => 10,
    );
  }
}

/**
 * AJAX callback for course rating modal form.
 */
function course_rating_fivestar_form_js($form, &$form_state) {
  // Remove modal and display message.
  // Using ctools_modal_command_dismiss() results into displaying message on
  // next page loading, which is confusing for user.
  $commands[] = ajax_command_remove('#modalBackdrop');
  $commands[] = ajax_command_remove('#modalContent');
  $commands[] = ajax_command_prepend('#page',  theme_absolute_messages(array('display' => NULL)));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Pre-render callback for rating form element. Replaces default options' text
 * with ordered numbers.
 * 
 * @param array $element
 *   Form element array
 * 
 * @return array
 *   Customized form element array
 */
function course_rating_pre_render_fivestar($element) {
  $i = 0;
  if (isset($element['#field_name'])) {
    $options = &$element[0]['vote']['vote']['#options'];
  }
  else {
    $options = &$element['vote']['vote']['#options'];
  }
  foreach ($options as $key => &$option) {
    $option = $i;
    $i++;
  }

  return $element;
}

/**
 * Additional submit for fivestar_custom_widget(). Handles course_rating entity
 * inserting/updating.
 */
function course_rating_fivestar_custom_widget_form_submit($form, &$form_state) {
  global $user;
  if ($form_state['storage']['mode'] == 'update') {
    $rating = course_rating_load($form_state['storage']['rating_nid']);
    if ($rating) {
      $rating->review = $form_state['values']['review'];
      $rating->save();
    }
    else {
      watchdog('course_rating', 'Course rating object seems to not exist during update. Course ID - %course_nid, Object ID - %rating_nid, User ID - %uid', array('%course_nid' => $form_state['course_nid'], '%rating_nid' => $form_state['storage']['rating_nid'], '%uid' => $user->uid), WATCHDOG_WARNING);
    }
  }
  else {
    $course_nid = $form_state['course_nid'];
    $uid = $user->uid;
    
    $values = array (
      'nid' => $course_nid,
      'uid' => $uid,
      'review' => $form_state['values']['review'],
      'created' => time(),
    );
   
    $rating = course_rating_create($values);
    $rating->save();
    $form_state['storage']['rating_nid'] = $rating->rating_id;
  }
}

/**
 * Determines wither course was reviewed by the user.
 * 
 * @param integer $nid
 *   Node ID of the course
 * @param integer $uid
 *   User ID of the user
 * 
 * @return integer
 *   ID of the rating node if exists, otherwise FALSE
 */
function course_rating_reviewed($nid, $uid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'course_rating')
      ->propertyCondition('uid', $uid)
      ->propertyCondition('nid', $nid)
      ->range(0, 1);

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }
  return FALSE; 
}

/**
 * The class used for Course Rating entities
 */
class CourseRating extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'course_rating');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'course_rating/' . $this->registration_id);
  }

}


/**
 * The Controller for Course Rating entities
 */
class CourseRatingController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a rating - we first set up the values that are specific
   * to our rating schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the rating.
   *
   * @return
   *   A rating object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Course Rating
    $values += array(
      'rating_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
      // registration specific fields:
      'nid' => $values['nid'],
      'uid' => $values['uid'],
    );

    $rating = parent::create($values);
    return $rating;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['rating_sample_data'] = array(
      '#markup' => theme('rating_sample_data', array('rating_sample_data' => check_plain($entity->data['sample_data']), 'rating' => $entity)),
    );

    return $content;
  }

}

/**
 * Implements hook_views_default_views_alter().
 * 
 * Adds rating field to the view with courses.
 */
function course_rating_views_default_views_alter(&$views) {
  if (isset($views['courses'])) {
    // Add the rating field to the view.
    if (!isset($views['courses']->display['default']->handler->display->display_options['fields']['field_course_rating'])) {
      $fields = &$views['courses']->display['default']->handler->display->display_options['fields'];
      $field_course_rating = array();
      $field_course_rating['id'] = 'field_course_rating';
      $field_course_rating['table'] = 'field_data_field_course_rating';
      $field_course_rating['field'] = 'field_course_rating';
      $field_course_rating['label'] = 'rating';
      $field_course_rating['element_label_colon'] = FALSE;
      $field_course_rating['click_sort_column'] = 'rating';
      $field_course_rating['type'] = 'course_rating_fivestar_formatter';
      $field_course_rating['settings'] = array(
        'widget' => array(
          'fivestar_widget' => 'default',
        ),
        'expose' => 1,
        'style' => 'average',
        'text' => 'average',
      );
      $fields = array_slice($fields, 0, 3, TRUE) + array('field_course_rating' => $field_course_rating) +  array_slice($fields, 3, count($fields) - 1, TRUE);
    }
  }
}

/**
 * Implements hook_votingapi_views_formatters().
 */
function course_rating_votingapi_views_formatters($details = array()) {
  if ($details->field == 'value') {
    return array(
      'course_rating_views_widget_float' => t('Course Rating as float number'),
    );
  }
}

/**
 * Callback function for course rating views widget.
 */
function course_rating_views_widget_float($value, $field, $columns) {
  return $value / 10 . ' / 10';
}
