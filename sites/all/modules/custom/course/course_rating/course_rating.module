<?php
/**
 * @file
 * Code for the Course Rating feature.
 */

include_once 'course_rating.features.inc';

/**
 *  Implements hook_menu() for course module.
 */
function course_rating_menu() {
  $items = array();
  $items['rate-course/%node/%user'] = array(
    'title' => 'Rate this course',
    'page callback' => 'course_rating_page',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'modal' => TRUE,
    'file' => 'course_rating.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function course_rating_field_formatter_info() {
  return array(
    'course_rating_fivestar_formatter' => array(
      'label' => t('Course rating formatter'),
      'field types' => array('fivestar'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function course_rating_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $elements[0] = array(
    '#markup' => $items[0]['average'] > 0 ? number_format($items[0]['average'] / 10, 1, '.', ' ') : '0.0',
  );
  return $elements;
}

/**
 * Implements hook_block_info().
 */
function course_rating_block_info() {
  $blocks['course_rating_form'] = array(
    'info' => t('Course Rating Form'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function course_rating_block_view($delta = '') {
  if ($delta == 'course_rating_form') {
    return course_rating_form_block();
  }
}

/**
 * Block with course rating form link.
 */
function course_rating_form_block() {
  $node = menu_get_object('node');
  if (!node_access('view', $node)) {
    return FALSE;
  }
  global $user;
  if (!registration_view_access($node, $user)) {
    return FALSE;
  }
  $course_nid = isset($node->book['bid']) ? $node->book['bid'] : 0;
  $block = array();
  $block['subject'] = '';
  $block['content'][] = array(
    '#type' => 'markup',
    '#markup' => l(t('Rate this course'), 'rate-course/' . $course_nid . '/' . $user->uid, array('attributes' => array('class' => array('course-rate-link', 'ctools-modal-common-modal-style')))),
  );
  
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function course_rating_form_fivestar_custom_widget_alter(&$form, &$form_state, $form_id) {
  $course_nid = $form_state['build_info']['args'][1]['content_id'];
  $form_state['course_nid'] = $course_nid;
  if (isset($_SESSION['courses_rating']['course_' . $course_nid]['rating_nid'])) {
    $form_state['mode'] = 'update';
    $rating_wrapper = entity_metadata_wrapper('node', $_SESSION['courses_rating']['course_' . $course_nid]['rating_nid']);
    $body = $rating_wrapper->body->value();
    $review = $body['value'];
  }
  else {
    $form_state['mode'] = 'insert';
  }
  $form['#submit'][] = 'course_rating_fivestar_custom_widget_form_submit';
  $form['#prefix'] = '<div id="course-rating-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#attributes']['class'][] = 'course-rating-form';
  $form['vote']['#auto_submit'] = FALSE;
  $form['vote']['#settings']['autosubmit'] = FALSE;
  $form['fivestar_submit']['#weight'] = 11;
  $form['fivestar_submit']['#ajax'] = array(
    'callback' => 'course_rating_fivestar_form_js',
    'wrapper' => 'course-rating-form-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
  $form['review'] = array(
    '#type' => 'textarea',
    '#title' => '',
    '#required' => FALSE,
    '#default_value' => isset($review) ? $review : '',
    '#attributes' => array(
      'placeholder' => t('Enter your comment'),
    ),
    '#suffix' => '<div class="form-section-separator"></div>',
    '#weight' => 10,
  );
}

/**
 * AJAX callback for course rating modal form.
 */
function course_rating_fivestar_form_js($form, &$form_state) {
  $form['#pre_render'] = array('course_rating_pre_render_fivestar');
  return $form;
}

/**
 * Pre-render callback for rating form element. Replaces default options' text
 * with ordered numbers.
 * 
 * @param array $element
 *   Form element array
 * 
 * @return array
 *   Customized form element array
 */
function course_rating_pre_render_fivestar($element) {
  $i = 0;
  if (isset($element['#field_name'])) {
    $options = &$element[0]['vote']['vote']['#options'];
  }
  else {
    $options = &$element['vote']['vote']['#options'];
  }
  foreach ($options as $key => &$option) {
    $option = $i;
    $i++;
  }

  return $element;
}

/**
 * Additional submit for fivestar_custom_widget(). Handles course_rating node
 * inserting/updating.
 */
function course_rating_fivestar_custom_widget_form_submit($form, &$form_state) {
  if ($form_state['mode'] == 'update') {
    $node = node_load($_SESSION['courses_rating']['course_' . $form_state['course_nid']]['rating_nid']);
    if ($node) {
      $lang = $node->language;
      $node->body[$lang][0]['value'] = $form_state['values']['review'];
      node_save($node);
    }
  }
  else {
    global $user;
    $course_nid = $form_state['course_nid'];
    $uid = $user->uid;
    $node = new stdClass();
    $node->type = 'course_rating';
    node_object_prepare($node);
    $node->title = 'Course rating nid#' . $course_nid . '# uid#' . $uid;
    $node->language = LANGUAGE_NONE;
    $node->body[$node->language][0]['value'] = $form_state['values']['review'];
    $node->field_course[$node->language][0]['target_id'] = $course_nid;
    node_save($node);
    $_SESSION['courses_rating']['course_' . $form_state['course_nid']]['rating_nid'] = $node->nid;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Determines wither course was reviewed by the user.
 * 
 * @param integer $nid
 *   Node ID of the course
 * @param integer $uid
 *   User ID of the user
 * 
 * @return integer
 *   ID of the rating node if exists, otherwise FALSE
 */
function course_is_reviewed($nid, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course_rating')
      ->propertyCondition('status', 1)
      ->propertyCondition('uid', $uid)
      ->fieldCondition('field_course', 'target_id', $nid)
      ->range(0, 1);

  $result = $query->execute();

  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      return $entity_id;
    }
  }
  return FALSE; 
}
