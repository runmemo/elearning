<?php


/**
 * Implements hook_views_api().
 */
function lesson_questions_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'lesson_questions') . '/views',);
}

/**
 * Implements hook_init().
 */
function lesson_questions_init() {
  drupal_add_js(drupal_get_path('module', 'lesson_questions') . '/lesson_questions.js');
}

/**
 * Implements hook_block_info()
 */
function lesson_questions_block_info() {
  $block['lesson_questions'] = array(
    'info' => 'Lesson Questions',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $block['lesson_question_answers'] = array(
    'info' => 'Answers for Lesson Questions',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $block;
}

/**
 * Implementation of hook_block_view()
 */
function lesson_questions_block_view($delta = '') {
  $content = array();
  $block = array();
  switch($delta) {
    case 'lesson_questions':
      // Question form
      $content['question_form'] = drupal_get_form('quick_question');
      //Placeholder for message. 
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Embed view 
      $content['questions_list'] = array(
        '#type' => 'markup',
        '#markup' => _get_relevant_questions_list(),
      );
      // Build the block title and contents
      $block['subject'] = '';
      $block['content'] = $content;
      break;
    case 'lesson_question_answers':
      // Question form
      $content['answer_form'] = drupal_get_form('quick_answer');
      //Placeholder for message. 
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Embed view 
      $content['answers_list'] = array(
        '#type' => 'markup',
        '#markup' => _get_relevant_answers_list(),
      );
      // Build the block title and contents
      $block['subject'] = '';
      $block['content'] = $content;
      break;    
  }
  return $block;
}


/**
 * Callback function : Defines form for quick question for lesson page.
 */
function quick_answer($form, &$form_state) {
  if (!user_access('create answer content')) {
    return;
  }
  
  $form['quick_answer'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="quick-answer-wrapper">',
    '#suffix' => '</div>',
    '#title' => t('Give Answer')
  );

  if(isset($form_state['values']['question'])) {
    $question_nid = $form_state['values']['question'];
  }
  else {
    $question_nid = menu_get_object('node');
    $question_nid = $question_nid->nid;
  }

  $question = menu_get_object('node');
  $form['quick_answer']['question'] = array(
    '#type' => 'hidden',
    '#value' => $question_nid
  );

  $form['quick_answer']['title'] = array(
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Title *')),
    '#required' => TRUE,
    '#size' => 75
  );

  $form['quick_answer']['answer'] = array(
    '#type' => 'textarea',
    '#attributes' => array('placeholder' => t('Answer')),
    '#rows' => 3,
    '#cols' => 73,
  );

  $form['quick_answer']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'quick_answer_submit_callback',
      'wrapper' => 'quick-answer-wrapper',
    ),
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Callback function : Ajax callback function for quick_question form.
 */
function quick_answer_submit_callback($form, &$form_state) {
  global $user;
  //validations
  if (!$form_state['values']['title']) {
    $message = t('Title field is required');
    $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text($message));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $node = new stdClass();
  $node->type = 'answer';
  node_object_prepare($node);
  $node->title = $form_state['values']['title'];
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $form_state['values']['answer'];
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->field_answer_question[$node->language][0]['nid'] = $form_state['values']['question'];
  node_save($node);

  $form_rebuilt = drupal_rebuild_form('quick_answer', $form_state, array());
  unset($form_rebuilt['quick_answer']['title']['#value']);
  unset($form_rebuilt['quick_answer']['answer']['#value']);
  //get related question its require to $original_path otherwise ajax call pass ajax/system path instead of current node.
  $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text(t('Your answer added to the list below.')));
  $commands[] = ajax_command_replace('.view-answers-to-a-question', _get_relevant_answers_list($form_state['values']['question']));
  $commands[] = ajax_command_replace('#quick-answer-wrapper', render($form_rebuilt));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
* Helper Function : Returns embeded view on lesson page.
*/
function _get_relevant_answers_list($nid = NULL) {
  if(!$nid) {
    $nid = arg(1);
  }
  return views_embed_view('answers_to_a_question', 'block_1', $nid);
}

/**
 * Callback function : Defines form for quick question for lesson page.
 */
function quick_question($form, &$form_state) {
  if (!user_access('create question content')) {
    return;
  }
  
  $form['quick_question'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div id="quick-question-wrapper">',
    '#suffix' => '</div>',
    '#title' => t('Ask Question')
  );
  $original_path = implode('/', arg());
  $compressed_path = relevant_answers_compress_string($original_path);
  $form['quick_question']['compressed_path'] = array(
    '#type' => 'hidden',
    '#value' => $compressed_path
  );

  $form['quick_question']['question'] = array(
    '#type' => 'textfield',
    '#attributes' => array('placeholder' => t('Question *')),
    '#required' => TRUE,
    '#size' => 75
  );

  $form['quick_question']['description'] = array(
    '#type' => 'textarea',
    '#attributes' => array('placeholder' => t('Description')),
    '#rows' => 3,
    '#cols' => 73,
  );

  $form['quick_question']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'quick_question_submit_callback',
      'wrapper' => 'quick-question-wrapper',
    ),
    '#value' => t('Ask'),
  );
  return $form;
}

/**
 * Callback function : Ajax callback function for quick_question form.
 */
function quick_question_submit_callback($form, &$form_state) {
  global $user;
  $original_path = relevant_answers_decompress_string($form_state['values']['compressed_path']);

  //validations
  if (!$form_state['values']['question']) {
    $message = t('Question field is required');
    $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text($message));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $node = new stdClass();
  $node->type = 'question';
  node_object_prepare($node);
  $node->title = $form_state['values']['question'];
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $form_state['values']['description'];
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->field_question_path[$node->language][0]['value'] = $original_path;
  node_save($node);

  $form_rebuilt = drupal_rebuild_form('quick_question', $form_state, array());
  unset($form_rebuilt['quick_question']['question']['#value']);
  unset($form_rebuilt['quick_question']['description']['#value']);
  //get related question its require to $original_path otherwise ajax call pass ajax/system path instead of current node.
  $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text());
  $commands[] = ajax_command_replace('.view-questions-list', _get_relevant_questions_list($original_path));
  $commands[] = ajax_command_replace('#quick-question-wrapper', render($form_rebuilt));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper Function : Returns status message to user after creating question.
 */
function _get_completion_text($message = NULL) {
  if (!$message) {
    $message = t('Your message was added to the list below.');
  }
  return '<div id="message-placeholder"><div class="text">' . $message . '<span class="close" title="close">X</span></div></div>';
}

/**
* Helper Function : Returns embeded view on lesson page.
*/
function _get_relevant_questions_list($path = NULL) {
  if(!$path) {
    $path = implode('/', arg());
  }
  return views_embed_view('relevant_questions_list', 'block', $path);
}
