<?php


/**
 * Implements hook_block_info()
 */
function lesson_questions_block_info() {
  $block['lesson_questions'] = array(
    'info' => 'Lesson Questions',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $block;
}


/**
 * Define the contents and title of the block/
 * Implementation of hook_block_view()
 */

function lesson_questions_block_view($delta = '') {

  $content = '';
  $content .= render(drupal_get_form('quick_question'));
  //Placeholder for message.
  $content .= '<div id="message-placeholder" class="close">';
  $content .= '</div>';
  // Embed view
  $content .= _get_related_questions();
  
  // Build the block title and contents
  $block['subject'] = '';
  $block['content'] = $content;
  
  return $block;
}

function quick_question($form, &$form_state) {
  if (user_access('create question content')) {
    $form['quick_question'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div id="quick_question">',
    '#suffix' => '</div>',
    '#title' => t('Ask Question')
  );

  $original_path = implode('/', arg());
  $compressed_path = relevant_answers_compress_string($original_path);
  $form['quick_question']['compressed_path'] = array(
    '#type' => 'hidden', 
    '#value' => $compressed_path
  );

  $form['quick_question']['question'] = array(
    '#type' => 'textfield',
    '#attributes' =>array('placeholder' => t('Question'))
  );

  $form['quick_question']['description'] = array(
    '#type' => 'textarea',
    '#attributes' =>array('placeholder' => t('Description'))
  );

  $form['quick_question']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'quick_question_submit_callback',
      'wrapper' => 'quick_question',
    ),
    '#value' => t('Submit'),
  );

  return $form;
  }
}


function quick_question_submit_callback($form, $form_state) {
  global $user;
  $original_path = relevant_answers_decompress_string($form_state['values']['compressed_path']);

  $node = new stdClass();
  $node->type = 'question';
  node_object_prepare($node);
  $node->title = $form_state['values']['question'];
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $form_state['values']['description'];
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->field_question_path[$node->language][0]['value'] = $original_path;
  node_save($node);

  //get related question its require to $original_path otherwise ajax call pass ajax/system path instead of current node.
  $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text());
  $commands[] = ajax_command_replace('#view-result', _get_related_questions($original_path));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function _get_completion_text() {
  return '<div id="message-placeholder">'.t('Your message was added to the list below.').'</div>';
}

function _get_related_questions($path = NULL) {
  if(!$path) {
    $path = implode('/', arg());
  }
  return '<div id="view-result">'.views_embed_view('relevant_questions', 'popular_relevant_questions_block', $path).'</div>';
}
