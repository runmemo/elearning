<?php

/**
 * @file 
 * answers_extra.module
 */

/**
 * Implements hook_menu().
 */
function answers_extra_menu() {
  $items = array();

  $items['admin/people/points-permissions'] = array(
    'title' => 'Points Permissions',
    'description' => 'Determine access to features by editing correlattion between permissions and userpoints.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('answers_extra_permissions_form'),
    'access arguments' => array('administer permissions'),
    'file' => 'answers_extra.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_init() to redirect from answer nodes to questions.
 */
function answers_extra_init() {
  $node = menu_get_object('node', 1);
  if($node && $node->type == 'answer') {
    $question = entity_metadata_wrapper('node', $node);
    drupal_goto('node/' . $question->field_answer_question->raw(), array('fragment' => "answer-".$node->nid), '302');   
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function answers_extra_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
  if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function answers_extra_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'answers_extra') . '/views',);
}

/**
 * Implements hook_block_info().
 */
function answers_extra_block_info() {
  $block['question_answers'] = array(
    'info' => t('List of Question Answers'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function answers_extra_block_view($delta = '') {
  $content = array();
  $block = array();
  switch($delta) {
    case 'question_answers':
      // Placeholder for message. 
      $content['message_placeholder'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="message-placeholder"></div>',
      );
      // Embed view 
      $content['answers_list'] = array(
        '#type' => 'markup',
        '#markup' => _get_relevant_answers_list(),
      );
      // Question form
      $content['answer_form'] = drupal_get_form('quick_answer');
      // Build the block title and contents
      $block['subject'] = '';
      $block['content'] = $content;
      break;    
  }
  return $block;
}

/**
* Helper Function : Returns embeded view on lesson page.
*/
function _get_relevant_answers_list($nid = NULL) {
  if(!$nid) {
    $nid = arg(1);
  }
  return views_embed_view('answers_to_a_question_extra', 'block_answers', $nid);
}



/**
 * Build a form for answers on question page
 */
function quick_answer($form, &$form_state) {
  if (!user_access('create answer content')) {
    return;
  }
  
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="quick-answer-wrapper">',
    '#suffix' => '</div>',
    '#title' => t('Give Answer')
  );

  if(isset($form_state['values']['question'])) {
    $question_nid = $form_state['values']['question'];
  }
  else {
    $question_node = menu_get_object('node');
    if(!$question_node || $question_node->type <> 'question') {
      return;
    }
    $question_nid = $question_node->nid;
  }

  $form['fields']['question'] = array(
    '#type' => 'hidden',
    '#value' => $question_nid
  );

  $form['fields']['answer'] = array(
    '#type' => 'text_format',
    '#format' => 'filtered_html',
    '#attributes' => array('placeholder' => t('Answer')),
    '#rows' => 3,
    '#cols' => 73,
  );

  $form['fields']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'quick_answer_submit_callback',
      'wrapper' => 'quick-answer-wrapper',
    ),
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Submit function for quick answer form
 */
function quick_answer_submit($form, &$form_state) {
   global $user;
  //validations
  if (!$form_state['values']['answer']['value']) {
    $message = t('Answer cannot be empty.'); // @todo add js to disable button if field is empty.
    $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text($message));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $node = new stdClass();
  $node->type = 'answer';
  node_object_prepare($node);
  $node->title = 'Answer of uid# ' . $user->uid . ' for question #nid ' . $form_state['values']['question'];
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $form_state['values']['answer']['value'];
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->field_answer_question[$node->language][0]['nid'] = $form_state['values']['question'];
  node_save($node);
  
  unset($form_state['values']['answer']);
  $form_state['rebuild'] = TRUE;
}

/**
 * Callback function : Ajax callback function for quick_answer form.
 */
function quick_answer_submit_callback($form, &$form_state) {
  //get related question its require to $original_path otherwise ajax call pass ajax/system path instead of current node.
  $commands[] = ajax_command_replace('#message-placeholder', _get_completion_text(t('Your answer added to the list below.')));
  $commands[] = ajax_command_replace('.view-question-answers', _get_relevant_answers_list($form_state['values']['question']));
  //unset Answers
  unset($form['fields']['answer']['value']['#value']);
  $commands[] = ajax_command_replace('#quick-answer-wrapper', render($form));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 *  Implements hook_preprocess_views_view_fields 
 *  for relevant_questions_list view.
 */
function answers_extra_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
 // print_nice($view, 3);
  $question_list_views = array('relevant_questions_list', 'user_questions_list', 'course_questions');
  if (!in_array($view->name, $question_list_views)) {
    return;
  }
  
  $row = $vars['row'];
  if (isset($row->field_field_answer_count[0])) {
    $answers = $row->field_field_answer_count[0]['raw']['count'];
    $ccs_classes = 'field-answer-count';
    if (!$answers) {
      $ccs_classes = $ccs_classes . ' zero';
    }
    $output = 
     '<div class="' . $ccs_classes .  '">' .
       format_plural($answers, '1 <br />Answer', '@count <br />Answers') . 
     '</div>';
    
    // Replace content of the field.
    $answers_count_field = $vars['fields']['field_answer_count'];
    $answers_count_field->content = $output;
  }  
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function answers_extra_form_question_node_form_alter(&$form, &$form_state) {
  // hide not required fields.
  $form['field_notify_p']['#access'] = FALSE;

  // hide format selection.
  $form['#after_build'] = array('hide_format_question');
}

function hide_format_question(&$form) {
  $form['body'][LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_strongarm_alter().
 */
function answers_extra_strongarm_alter(&$items) {
  if (isset($items['node_options_question'])) {
    $items['node_options_question']->value = array('status', 'revision');
  }
}

/**
 * Form for inline answer editing.
 */
function answers_extra_answer_form($form, &$form_state, $nid) {
  $form = array();
  $form['#prefix'] = "<div id='node-answer-form-$nid'>";
  $form['#suffix'] = '</div>';

  if (!isset($form_state['storage']['answer'])) {
    $form_state['storage']['answer'] = node_load($nid);
  }
  $answer = $form_state['storage']['answer'];

  if (!node_access("update", $answer) || !$answer || $answer->type !== 'answer') {
    return $form;
  }
  
  if (!isset($form_state['step'])) {  // page is loaded
    $form_state['step'] =  'view';
  }
   
  // build form depending on it's current mode
  switch ($form_state['step']) {
    case 'view':
      $form['view']['edit'] = array(
        '#name' => 'edit',
        '#type' => 'submit',
        '#value' => t('Edit'),
        '#submit' => array('answers_extra_answer_form_edit'),
        '#attributes' => array('class' => array('answer-form-edit')),
        '#suffix' => '<div class="description">'.t('Edit').'</div>',
        '#ajax' => array(
          'callback' => 'answers_extra_answer_form_js',
          'wrapper' => "node-answer-form-$nid",
          'progress' => array('message' => ''),
        ),
      );
      $form['#attributes'] = array('class' => 'answer-form');
      break;
    
    case 'edit' :
      // build form for editing
      $answer_wrapper = entity_metadata_wrapper('node', $answer);
      $answer_body = $answer_wrapper->body->value();
     
      $form['edit']['body'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#default_value' => $answer_body['value']
      );

      $form['edit']['save'] = array(
        '#name' => 'save',
        '#type' => 'submit',
        '#submit' => array('answers_extra_answer_form_save'),
        '#value' => t('Save'),
        '#attributes' => array('class' => array('answer-form-save')),
        '#ajax' => array(
          'callback' => 'answers_extra_answer_form_js',
          'wrapper' => "node-answer-form-$nid",
          'progress' => array('message' => ''),
        ),
      );
      break;
    
    default :
      $form['bad_state'] = array(
        '#type' => 'markup',
        '#markup' => t('State @mode is not supported by this form.', array('@mode' => $mode)),
      );
  }

  // remove format selection after building the form.
  $form['#after_build'] = array('hide_format_answer');

  return $form;
}

function hide_format_answer($form) {
  $form['edit']['body']['format']['#access'] = FALSE;
  return $form;
}

/**
 * Form submit for edit mode inline answer editing.
 */
function answers_extra_answer_form_edit($form, &$form_state) {
  $form_state['step'] = 'edit';
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements submit function for the answer editing form
 */
function answers_extra_answer_form_save($form, &$form_state) {
  $answer = $form_state['storage']['answer'];
  $answer->body[$answer->language][0]['value'] = $form_state['values']['body']['value'];
  $answer->body[$answer->language][0]['format'] = 'filtered_html';
  node_save($answer);

  $form_state['step'] = 'view';
  $form_state['rebuild'] = TRUE;

  // Temporary workaround for showing updated content to user.
  // @todo : Find some another way to refresh node.
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands[] = ctools_ajax_command_reload();
  print ajax_render($commands);
  exit;
}

/**
 * Callback for answer edit js submit
 */
function answers_extra_answer_form_js($form, &$form_state) {

  $answer = $form_state['storage']['answer'];

  $commands[] = ajax_command_replace('#node-answer-form-'.$answer->nid, render($form));

  //unset Answers
  $commands[] = ajax_command_replace('#answer-'.$answer->nid, '');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 *  Implements hook_node_access()
 */
function answers_extra_node_access($node, $op, $account) {
  if ($op == 'update' && in_array($node->type, array('question', 'answer'))) {
    
    // Check whether current user has "student" role.
    if (!in_array('student', array_values($account->roles))) {
      return NODE_ACCESS_IGNORE;
    }
    
    // Check whether current node author has "student" role.
    $author = user_load($node->uid);
    if (!in_array('student', array_values($author->roles))) {
      return NODE_ACCESS_IGNORE;
    }
  
    // Check whether current user has minimum points required to edit questions
    // and answers of other students.
    $points = userpoints_get_current_points($account->uid);
    if($points >= variable_get('answers_extra_edit_points', 500)) {
      return NODE_ACCESS_ALLOW;
    }

    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Helper function which determines current user has minimum 
 * required points for commenting nodes.
 */
function user_has_min_voting_points() {
  global $user;
  $user_points = userpoints_get_current_points($user->uid);

  if($user_points >= variable_get('answers_extra_rate_points', 100)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_node_view().
 */
function answers_extra_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'question') {
    drupal_add_js(drupal_get_path('module', 'answers_extra') . '/answers_extra.js', array('weight' => 10));
    $node->content['follow_flag'] = flag_create_link('follow_content', $node->nid );
  }
}

/**
 * Implements hook_node_insert().
 */
function answers_extra_node_insert($node) {
  if ($node->type == 'answer') {
    answers_extra_new_answer_notify($node);
  }
}

/**
 * Notifies all question subscribers if new answer is posted.
 * 
 * @param object $answer
 *   Node object of the new answer.
 */
function answers_extra_new_answer_notify($answer) {
  if (!module_exists('newsfeed')) {
    watchdog('answers_extra', 
        'Enable newsfeed module to notify users of new content.', array(), 
        WATCHDOG_WARNING);
    return;
  }
  $answer_wrapper = entity_metadata_wrapper('node', $answer);
  // Load question, in order to pass it to message_subscribe_send_message()
  // and get all question subscribers.
  $question = $answer_wrapper->field_answer_question->value();
  $fields = array(
    'field_message_answer' => $answer->nid,
    'field_message_question' => $question->nid,
  );
  newsfeed_create_message('question_answer_notification', $answer->uid, $question, $fields);
}

/**
 * Implements hook_vud_widget_template_variables_alter().
 */
function answers_extra_vud_widget_template_variables_alter(&$variables) {

  global $user;
  // Check, whether the node belongs to the current user
  // and define access to the links and message for tooltips.
  $node = isset($variables['entity_id']) ? node_load($variables['entity_id']) : FALSE;
  $variables['vote_acess'] = (!$node || ($node && $node->uid == $user->uid)) ? FALSE : TRUE;
  if ($variables['vote_acess']) {
    $variables['title_text_up'] = $variables['class_up'] == 'up-active' ? t('Reset your vote') : t('Vote up!');
    $variables['title_text_down'] = $variables['class_down'] == 'down-active' ? t('Reset your vote') : t('Vote down!');
  } 
  else {
    $variables['title_text_up'] = t('You cannot vote up your own !content_type', array('!content_type' => $node ? $node->type : t('content')));
    $variables['title_text_down'] = t('You cannot vote down your own !content_type', array('!content_type' => $node ? $node->type : t('content')));
  }

  // Check, whether the current user has minimum required points and he is not the node author.
  if (!user_has_min_voting_points() && ($node->uid <> $user->uid)) {
    $points = variable_get('answers_extra_rate_points', 100);
    $variables['vote_acess'] = FALSE;
    $variables['title_text_up'] = t('You need to have !points points to be able to vote up this !content_type', array('!points' => $points, '!content_type' => $node ? $node->type : t('content')));
    $variables['title_text_down'] = t('You need to have !points points to be able to vote down this !content_type', array('!points' => $points, '!content_type' => $node ? $node->type : t('content')));    
  }
}
