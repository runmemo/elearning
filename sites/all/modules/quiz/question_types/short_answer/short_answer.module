<?php

/**
 * The main file for short_answer.
 *
 * Short answer is structurally similar to long answer. However, the module
 * mechanism makes it very difficult for these two modules (either one of
 * which may be disabled) to effectively share code.
 * @file
 */

/**
 * Implements hook_help().
 */
function short_answer_help($path, $args) {
  if ($path == 'admin/help#short_answer') {
    return t('This module provides a short answer question type for Quiz.');
  }
}

/**
 * Implements hook_permission().
 */
function short_answer_permission() {
  return array(
    'use regex for short answer' => array(
      'title' => t('use regex for short answer'),
      'description' => t('TODO Add a description for \'use regex for short answer\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function short_answer_menu() {
  $items['admin/quiz/reports/score-short-answer'] = array(
    'title' => 'Score short answer questions',
    'description' => 'Score the answers from quizzes that use short answer questions.',
    'page callback' => 'short_answer_view_unscored',
    'access arguments' => array('score any quiz', 'score own quiz'),
    'access callback' => 'quiz_access_multi_or',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'short_answer.admin.inc',
  );
  // Pass vid and rid to this path.
  $items['admin/quiz/reports/score-short-answer/%/%'] = array(
    'title' => 'Score short answer response',
    'description' => 'Score a response to a short answer question.',
    'page callback' => 'short_answer_edit_score',
    'page arguments' => array(4, 5),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array(4, 5),
    'access callback' => 'quiz_question_access_to_score',
    'file' => 'short_answer.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_quiz_question_info().
 */
function short_answer_quiz_question_info() {
  return array(
    'short_answer' => array(
      'name' => t('Short answer question'),
      'description' => t('Quiz questions that allow a user to enter a line of text.'),
      'question provider' => 'ShortAnswerQuestion',
      'response provider' => 'ShortAnswerResponse',
      'module' => 'quiz_question', // All wrapper functions are in that module.
    ),
  );
}

/**
 * Implements hook_config().
 */
function short_answer_config() {
  return FALSE; // No config options available for the short answer question type
}

/**
 * Implements hook_autoload_info().
 */
function short_answer_autoload_info() {
  return array(
    'ShortAnswerQuestion' => array('file' => 'short_answer.classes.inc'),
    'ShortAnswerResponse' => array('file' => 'short_answer.classes.inc'),
  );
}

/**
 * Implements hook_theme().
 */
function short_answer_theme() {
  return array(
    'short_answer_view_unscored' => array(
      'variables' => array('unscored' => array()),
      'path' => drupal_get_path('module', 'short_answer') . '/theme',
      'file' => 'short_answer.theme.inc',
    ),
    'short_answer_response_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'short_answer') . '/theme',
      'file' => 'short_answer.theme.inc',
    ),
    'short_answer_user_answer' => array(
      'variables' => array('answer' => NULL, 'correct' => NULL),
      'path' => drupal_get_path('module', 'short_answer') . '/theme',
      'file' => 'short_answer.theme.inc',
    ),
    'short_answer_answering_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'short_answer') . '/theme',
      'template' => 'short-answer-answering-form',
    ),
  );
}

/**
 * Set a score for a short answer question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * The function updates all of the necessary data sources so that the individual answer results should be
 * reflected in the total scoring table.
 *
 * @param $quiz
 *  Quiz node.
 * @param $nid
 *  Node ID of question.
 * @param $vid
 *  Version ID of question.
 * @param $rid
 *  Result ID for the quiz results.
 * @param $score
 *  The numeric score to assign the result.
 * @param $update_total
 *  Shall the total score for a quiz be updated?
 *
 * @return int
 *  Number of scores adjusted. If a change was made, this should be 1.
 */
function short_answer_score_an_answer($quiz, $nid, $vid, $rid, $score, $update_total = TRUE) {
  // When we set the score we make sure that the max score in the quiz the question belongs to is considered
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {quiz_short_answer_user_answers}
   SET score = %d * (
   SELECT max_score
   FROM {quiz_question_properties}
   WHERE vid = %d
   ) / (
   SELECT max_score
   FROM {quiz_node_relationship}
   WHERE parent_vid = %d
   AND child_vid = %d
   ), is_evaluated = 1
   WHERE question_nid = %d
   AND question_vid = %d
   AND result_id = %d", $score, $vid, $quiz->vid, $vid, $nid, $vid, $rid) */
  db_update('quiz_short_answer_user_answers')
  ->fields(array(
    'score' => $score,
  ))
    ->where('vid = %d             ) / (               SELECT max_score               FROM {quiz_node_relationship}               WHERE parent_vid = %d               AND child_vid = %d             ), is_evaluated = 1             WHERE question_nid = %d             AND question_vid = %d             AND result_id = %d',  )
  ->execute();
  $changed = db_affected_rows();

  // Now the short answer user data has been updated. We also need to update the data in the quiz tables
  if ($changed > 0) {
    $max = db_query('SELECT max_score FROM {quiz_question_properties} WHERE vid = :vid', array(':vid' => $vid))->fetchField();
    if ($max <= 0) {
      $is_correct = 0;
      $points_awarded = 0;
    }
    else {
      $is_correct = ($score / $max > 0.5) ? 1 : 0;
      $points_awarded = $score;
    }

    $sql = 'UPDATE {quiz_node_results_answers}
      SET points_awarded = %d, is_correct = %d
      WHERE question_vid = %d AND result_id = %d';
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query($sql, $points_awarded, $is_correct, $vid, $rid) */
    db_update('quiz_node_results_answers')
  ->fields(array(
    'points_awarded' => $points_awarded,
    'is_correct' => $is_correct,
  ))
  ->condition('question_vid', $vid)
  ->condition('result_id', $rid)
  ->execute();

    // Third, we update the main quiz results table
    if ($update_total) {
      quiz_update_total_score($quiz, $rid);
    }
  }
  return $changed;
}

/**
 * Validate the result report for short answer
 */
function short_answer_report_validate($values, $form_key) {
  // Check to make sure that entered score is not higher than max allowed score.
  if (!_quiz_is_int($values['score'], 0, (int) $values['max_score'])) {
    form_set_error($form_key . '][score', t('The score needs to be a number between 0 and @max', array('@max' => (int) $values['max_score'])));
  }
}

/**
 * Submit the result report for short answer
 */
function short_answer_report_submit($values) {
  short_answer_score_an_answer($values['quiz'], $values['nid'], $values['vid'], $values['rid'], (int) $values['score'], FALSE);
}

/**
 * Get the answer for a question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * @param $question_nid
 *  Node ID of question.
 * @param $question_vid
 *  Version ID of question.
 * @param $result_id
 *  Result ID for the quiz results.
 *
 * @return Assoc array
 *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
 *  <code>
 *  answer_id; // The answer ID
 *  answer; // The full text of the answer
 *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
 *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
 *  question_vid
 *  question_nid
 *  result_id
 *  </code>
 */
function short_answer_get_answer($question_nid, $question_vid, $result_id) {
  $sql = "SELECT sa.answer_id, sa.answer, sa.is_evaluated, sa.score, sa.question_vid, sa.question_nid, sa.result_id, rel.max_score AS rel_max_score
    FROM {quiz_short_answer_user_answers} sa
    JOIN {quiz_node_results} qnr ON (sa.result_id = qnr.result_id)
    JOIN {quiz_node_relationship} rel ON (qnr.vid = rel.parent_vid AND rel.child_vid = sa.question_vid)
    WHERE sa.question_nid = %d AND sa.question_vid = %d AND sa.result_id = %d";
  $results = db_query("SELECT sa.answer_id, sa.answer, sa.is_evaluated, sa.score, sa.question_vid, sa.question_nid, sa.result_id, rel.max_score AS rel_max_score
    FROM {quiz_short_answer_user_answers} sa
    JOIN {quiz_node_results} qnr ON (sa.result_id = qnr.result_id)
    JOIN {quiz_node_relationship} rel ON (qnr.vid = rel.parent_vid AND rel.child_vid = sa.question_vid)
    WHERE sa.question_nid = :sa.question_nid AND sa.question_vid = :sa.question_vid AND sa.result_id = :sa.result_id", array(':sa.question_nid' => $question_nid, ':sa.question_vid' => $question_vid, ':sa.result_id' => $result_id));

  if (!$results) {
    return FALSE;
  }

  return db_fetch_array($results);
}
