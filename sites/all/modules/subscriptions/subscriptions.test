<?php
/**
 * @file
 * Contains base class for test cases for Subscriptions module
 */

/**
 * Base test case class for Subscriptions
 */
class SubscriptionsTestCase extends DrupalWebTestCase {
  function setUp() {
    $modules = array_merge(array('subscriptions'), func_get_args());
    parent::setUp($modules);
  }
  
  /**
   * Gets records from subscriptions_queue table
   * @param array $conditions
   * @return array queue items - fetched records from queue table
   */
  protected function getSubscriptionQueueItems($conditions = array()) {
     $query = db_select('subscriptions_queue', 'sq')
      ->fields('sq', array('sqid', 'value', 'field', 'uid', 'load_args',));
     foreach ($conditions as $field => $value) {
       $query->condition($field, $value);
     }
     $queue = $query->execute()->fetchAll();
     return $queue;
  } 
  
  /**
   * Asserts number of subscription that exist for specificed parameter for user
   */
  protected function assertSubscriptions($params, $uid, $count, $message = '') {
    $s = subscriptions_get($params);
    if ($count == 0) {
      // check that user has no subscriptions
      $this->assertFalse(isset($s[$uid]), $message ? $message : t('User has no subscriptions.'));
    } 
    else {
      // check if that and only item is in the queue (uA is autosubscribed)
      $this->assert(isset($s[$uid]) && count($s[$uid]) == $count, $message ? $message : t('User has @count subscriptions.', array('@count' => $count)));
    }
  }
  
  /**
   * Asserts number of items in subscription queue for specified conditions
   */
  protected function assertSubscriptionsQueue($conditions, $items, $message ='') {
    $queue = $this->getSubscriptionQueueItems($conditions);
    if ($items == 0) {
      $this->assertFalse($queue, $message ? $message : t('Subscriptions queue is empty for provided conditions.'));
    }
    else {
      $this->assertEqual(count($queue), $items, $message ? $message : t('@items items found in subscriptions queue.', array('@items' => $items)));
    }
  }
  
}


