<?php

/**
 * @file
 * Contains test case for Subscriptions Content module.
 */

/** 
 * Class with tests for Subscriptions Content module.
 */
class SubscriptionsContnentTestCase extends SubscriptionsTestCase {
  protected $node;
  protected $user_a;
  protected $user_b;
  
  public static function getInfo() {
    return array(
      'name' => 'Subscription Conentent Drupal Web Test',
      'description' => 'Drupal Web tests for subscriptions conent.',
      'group' => 'Subscriptions',
    );
  }
  
  function setUp() {
    parent::setUp('subscriptions_content');
    
    // create user A (uA)
    $this->user_a = $this->drupalCreateUser(array(
      'subscribe to content types',
    ));
    // We need to set access attribute on account.
    $this->drupalLogin($this->user_a); 
    
    // create user B (uB)
    $this->user_b = $this->drupalCreateUser(array(
      'subscribe to content types',
    ));
    // We need to set access attribute on account.
    $this->drupalLogin($this->user_b); 
    $this->drupalLogout();
    
    // Create a node for testing.
    $settings = array(
      'type' => 'page',
      'uid' => $this->user_a->uid,
    );
    $this->node = $this->drupalCreateNode($settings);
  }


  /**
   * Tests subscribe functions used by rules
   * @see subscriptions_write_subscription()
   * 
   */
  function testWriteSubsciptionFunction() {
    $params = array( // default pararms for getting our subscriptions
      'module' => 'node', 
      'field' => 'type',
      'value' => 'page');
    
    // subscribe uA to nP : Authors are not auto subscribed see : rules_subscribe_author_to_question for more
    subscriptions_write_subscription('node', 'type', 'page', -1, $this->user_a->uid);
    $this->assertSubscriptions($params, $this->user_a->uid, 1, 'User A has a subscription');
    $this->assertSubscriptions(array(), $this->user_a->uid, 1, 'User A has a subscription');
   
    // subscribe user B to parent node
    subscriptions_write_subscription('node', 'type', 'page', -1, $this->user_b->uid);
    // check subscription of uB to nP
    $this->assertSubscriptions($params, $this->user_b->uid, 1, 'User B has a subscription');
    $this->assertSubscriptions($params, $this->user_a->uid, 1, 'User A still has a subscription');
    
    // Unsubscribe user A from specific subscription.
    subscriptions_delete($this->user_a->uid, 'node', 'type', 'page');
    $this->assertSubscriptions(array(), $this->user_b->uid, 1, 'User B still has a subscription');
    $this->assertSubscriptions(array(), $this->user_a->uid, 0);
     
    // Unsubscribe user B from all subscriptions.
    subscriptions_delete($this->user_b->uid);
    $this->assertSubscriptions(array(), $this->user_b->uid, 0);
  }
  
  /**
   * Tests that correct notifications are being sent to users 
   * subscribed to new content via subscriptions_reference
   * @see subscriptions_reference_test.module in tests
   */
  function testUserGetsNotification() {
    // @todo write tests that would check that correct emails are sent
    // by emails cron
  }

}

class SubscriptionContentUnitTestCase extends DrupalUnitTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'Subscriptions Content Unit Test Case',
      'description' => 'Unit tests for subscription reference.',
      'group' => 'Subscriptions',
    );
  }
  
  function test_Proper_Unit_Testing_with_Mocks() {
    //  @todo find a way to mock the function _available_reference_fields() 
    //  override_function(); this is one possible solution
    //  http://php.net/manual/en/function.override-function.php
    //  http://www.php.net/manual/en/function.override-function.php#50821
    //  that requires: pecl apd
    
    //  overriding of the function will allow testing of other functions
    //  without touching db
    
    //  here is an example of mock testing:
    //  http://www.workhabit.com/blog/mock-function-testing-drupal
    //  that requires: pecl runkit
    //  @see PHPMockFunction folder in libraries
    
  }
  /**
   * Sumple test case to show how unit tests can be used.
   */
  function testAPIFunctionsExists() {
   
    $this->assertTrue(function_exists('subscriptions_write_subscription'), 'Function subscriptions_write_subscription() exists.');
    
  }
  
}
